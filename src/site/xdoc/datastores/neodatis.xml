<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Neodatis Datastore</title>
    </properties>

    <body>
        <section name="Neodatis Datastores">
            <!--a href="http://www.neodatis.org" target="_blank"><img src="../images/thirdparty/neodatis.jpg" border="0" alt=""/></a-->
            <p>
                NeoDatis is an object-oriented database for Java and .Net. It is simple and fast and supports 
                various query mechanisms.
            </p>
            <p>
                DataNucleus supports persisting/retrieving objects to 
                <a href="http://www.neodatis.org" target="_blank">Neodatis</a> datastores 
                (using the <a href="../../../plugins/store.neodatis.html">datanucleus-neodatis</a> plugin).
                If you wish to help out in this effort either by contributing or by sponsoring particular 
                functionality please contact us via the <a href="http://forum.datanucleus.org">DataNucleus Forum</a>.
            </p>
            <p>
                The jars required to use DataNucleus NeoDatis persistence are <i>datanucleus-core</i>,
                <i>datanucleus-api-jdo</i>/<i>datanucleus-api-jpa</i>, <i>datanucleus-neodatis</i>
                and <i>neodatis</i>
            </p>

            <subsection name="Datastore Connection">
                <p>
                    DataNucleus supports 2 modes of operation of <i>neodatis</i> - file-based, and client-server 
                    based. In order to do so and to fit in with the JDO/JPA APIs we have defined the following
                    means of connection.
                </p>
                <p>
                    The following persistence properties will connect to a <b>file-based</b> Neodatis running on 
                    your local machine
                </p>
                <source>
datanucleus.ConnectionURL=neodatis:file:neodatisdb.odb</source>
                <p>
                    Replacing "neodatis.odb" by your filename for the datastore, and can be absolute OR relative.
                </p>
                <p>
                    The following persistence properties will connect to <b>embedded-server-based</b> NeoDatis 
                    running with a local file
                </p>
                <source>
datanucleus.ConnectionURL=neodatis:server:{my_neodatis_file}
datanucleus.ConnectionUserName=
datanucleus.ConnectionPassword=</source>
                <p>
                    The filename {my_neodatis_file} can be absolute OR relative.
                </p>
                <p>
                    The following persistence properties will connect as a client to a <b>TCP/IP NeoDatis Server</b>
                </p>
                <source>
datanucleus.ConnectionURL=neodatis:{neodatis_host}:{neodatis_port}/{identifier}
datanucleus.ConnectionUserName=
datanucleus.ConnectionPassword=</source>
                <p>
                    Neodatis doesn't itself use such URLs so it was necessary to define this DataNucleus-specific way 
                    of addressing Neodatis.
                </p>
                <p>
                    So you create your <a href="../jdo/pmf.html">PersistenceManagerFactory</a> or
                    <a href="../jpa/emf.html">EntityManagerFactory</a> with these properties. 
                    Thereafter you have the full power of the JDO or JPA APIs at your disposal, for your 
                    NeoDatis datastore.
                </p>
                <br/>
            </subsection>

            <subsection name="Queries">
                <p>
                    Access Platform allows you to query the objects in the datastore using the following
                </p>
                <ul>
                    <li><a href="../jdo/jdoql.html">JDOQL</a> - language based around the objects that are persisted and 
                        using Java-type syntax</li>
                    <li><a href="../jpa/jpql.html">JPQL</a> - language based around the objects that are persisted and 
                        using SQL-like syntax</li>
                <li><a href="#native">Native</a> - NeoDatis' own type-safe query language</li>
                <li><a href="#criteria">Criteria</a> - NeoDatis' own Criteria query language</li>
                </ul>
                <br/>
            </subsection>

            <a name="native"/>
            <subsection name="Queries : NeoDatis Native Queries">
                <table>
                    <tr>
                        <td>Note that if you choose to use NeoDatis Native Queries then these are not portable
                            to any other datastore. Use JDOQL/JPQL for portability</td>
                    </tr>
                </table>
                <p>
                    NeoDatis provides its own "native" query interface, and if you are using the JDO API you can 
                    utilise this for querying.
                    To take a simple example
                </p>
                <source><![CDATA[
// Find all employees older than 31
Query q = pm.newQuery("Native", new NativeQuery()
    {
        public boolean match(Object e)
        {
            if (!(e instanceof Employee))
            {
                return false;
            }
            return ((Employee)e).getAge() >= 32;
        }
        public Class getObjectType()
        {
            return Employee.class;
        }
    });

List results = (List)q.execute();]]></source>
                <p>
                    So we are utilising the JDO API to generate a query and passing in the NeoDatis "NativeQuery".
                </p>
                <br/>
            </subsection>

            <a name="criteria"/>
            <subsection name="Queries : NeoDatis Criteria Queries">
                <table>
                    <tr>
                        <td>Note that if you choose to use NeoDatis Criteria Queries then these are not portable
                            to any other datastore. Use JDOQL/JPQL for portability</td>
                    </tr>
                </table>
                <p>
                    NeoDatis provides its own "criteria" query interface, and if you are using the JDO API you 
                    can utilise this for querying.
                    To take a simple example
                </p>
                <source><![CDATA[
// Find all employees older than 31
Query q = pm.newQuery("Criteria", new CriteriaQuery(Employee.class, Where.ge("age", 32)));

List results = (List)q.execute();]]></source>
                <p>
                    So we are utilising the JDO API to generate a query and passing in the NeoDatis "CriteriaQuery".
                </p>
                <br/>
            </subsection>

            <subsection name="Known Limitations">
                <p>
                    The following are known limitations of the current implementation
                </p>
                <ul>
                    <li>NeoDatis doesn't have the concept of an "unloaded" field and so when you request an
                    object from the datastore it comes with its graph of objects. Consequently there is no
                    "lazy loading" and the consequent impact that can have on memory utilisation.</li>
                </ul>
            </subsection>
        </section>

    </body>
</document>