<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>XML Datastores</title>
    </properties>

    <body>
        <section name="XML Documents">
            <img src="../images/thirdparty/xml.png" border="0" alt=""/>
            <p>
                DataNucleus supports persisting/retrieving objects to/from XML documents 
                (using the <a href="../../../plugins/store.xml.html">datanucleus-xml</a> plugin).
                Simply specify your "connectionURL" as follows
            </p>
            <source>datanucleus.ConnectionURL=xml:file:myfile.xml</source>
            <p>
                replacing "myfile.xml" with your filename, which can be absolute or relative
            </p>
            <p>
                It makes use of JAXB, and the jars required to use DataNucleus XML persistence are <i>datanucleus-core</i>,
                <i>datanucleus-api-jdo</i>/<i>datanucleus-api-jpa</i>, <i>datanucleus-xml</i>
                and <i>JAXB API</i>, <i>JAXB Reference Implementation</i>.
                If you wish to help out in this effort either by contributing or by sponsoring particular 
                functionality please contact us via the <a href="http://forum.datanucleus.org">DataNucleus Forum</a>.
            </p>
            <p>
                Things to bear in mind with ODF usage :-
            </p>
            <ul>
                <li><b>indentation</b> : the persistence property <b>datanucleus.xml.indentSize</b> defaults to 4 but set it to the desired indent size</li>
                <li>Querying using JDOQL/JPQL will operate in-memory currently.</li>
                <li>Application identity is supported but can only have 1 PK field and must be a String. This is a limitation of JAXB</li>
                <li>Persistent properties are not supported, only persistent fields</li>
            </ul>
    
            <subsection name="Mapping : XML Datastore Mapping">
                <p>
                    When persisting a Java object to an XML datastore clearly the user would like some control
                    over the structure of the XML document.
                    Here's an example using JDO XML MetaData
                </p>
                <source><![CDATA[
<jdo>
    <package name="org.datanucleus.samples.models.company">
        <class name="Person" detachable="true" schema="/myproduct/people" table="person">
            <field name="personNum">
                <extension vendor-name="datanucleus" key="XmlAttribute" value="true"/>
            </field>
            <field name="firstName" primary-key="true"/> <!-- PK since JAXB requires String -->
            <field name="lastName"/>
            <field name="bestFriend"/>
        </class>
    </package>
</jdo>]]></source>
                <p>
                    Things to note :
                </p>
                <ul>
                    <li><b>schema</b> on class is used to define the "XPath" to the root of the class in XML.
                            You can also use the extension "xpath" to specify the same thing.</li>
                    <li><b>table</b> on class is used to define the name of the element for an object of
                            the particular class.</li>
                    <li><b>column</b> on field is used to define the name of the element for a field of
                            the particular class.</li>
                    <li><b>XmlAttribute</b> : when set to true denotes that this will appear in the
                            XML file as an attribute of the overall element for the object</li>
                    <li>When a field is primary-key it will gain a JAXB "XmlID" attribute.</li>
                    <li>When a field is a relation to another object (and the field is not embedded) then
                            it will gain a JAXB "XmlIDREF" attribute as a link to the other object.</li>
                    <li><b>Important : JAXB has a limitation for primary keys</b> : there can only be
                            a single PK field, and it must be a String!</li>
                </ul>
                <p>
                    What is generated with the above is as follows
                </p>
                <source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<myproduct>
    <people>
        <person personNum="1">
            <firstName>Bugs</firstName>
            <lastName>Bunny</lastName>
            <bestFriend>My</bestFriend>
        </person>        
    </people>
]]></source>
                <p>
                    Here's the same example using JDO Annotations
                </p>
                <source><![CDATA[
@PersistenceCapable(schema="/myproduct/people", table="person")
public class Person
{
    @XmlAttribute
    private long personNum;

    @PrimaryKey
    private String firstName;

    private String lastName;

    private Person bestFiend;

    @XmlElementWrapper(name="phone-numbers")
    @XmlElement(name="phone-number")
    @Element(types=String.class)
    private Map phoneNumbers = new HashMap();
   
    ...]]></source>
                <p>
                    Here's the same example using JPA Annotations (with DataNucleus @Extension/@Extensions
                    annotations)
                </p>
                <source>
TODO Add this example
               </source>
            </subsection>
        </section>
    </body>
</document>