<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Cassandra Datastores</title>
    </properties>

    <body>
        <section name="Cassandra Datastores">
            <img src="../images/thirdparty/cassandra.png" border="0" alt=""/>
            <p>
                DataNucleus supports a limited for of persisting/retrieving objects to/from Cassandra datastores (using the 
                <a href="https://github.com/datanucleus/datanucleus-cassandra">datanucleus-cassandra</a> plugin, which utilises the
                DataStax Java driver). Simply specify your "connectionURL" as follows
            </p>
            <source>datanucleus.ConnectionURL=cassandra:[{host1}[:{port}] [,{host2} [,{host3}]]]</source>
            <p>
                where it will create a Cassandra <i>cluster</i> with contact points of <i>host1</i> (<i>host2</i>, <i>host3</i> etc), 
                and if the port is specified on the first host then will use that as the port (no port specified on alternate hosts).
            </p>
            <p>
                For example, to connect to a local server
            </p>
            <source>datanucleus.ConnectionURL=cassandra:</source>
            <p>
                It is intended to have this plugin feature complete by DataNucleus v4.0, but is available in GitHub for testing/improvement.
                The jars required to use DataNucleus Cassandra persistence are <i>datanucleus-core</i>,
                <i>datanucleus-api-jdo</i>/<i>datanucleus-api-jpa</i>, <i>datanucleus-cassandra</i> and <i>cassandra-driver-core</i>
            </p>
            <p>
                Things to bear in mind with Cassandra usage :-
            </p>
            <ul>
                <li>Creation of a PMF/EMF will create a <i>Cluster</i>. This will be closed then the PMF/EMF is closed.</li>
                <li>Any PM/EM will use a single <i>Session</i>, by default, shared amongst all PM/EMs.</li>
                <li>If you specify the persistence property <b>datanucleus.cassandra.sessionPerManager</b> to <i>true</i> then each
                    PM/EM will have its own <i>Session</i> object.</li>
                <li>You can set the number of connections per host with the persistence property <b>datanucleus.mongodb.connectionsPerHost</b></li>
                <li>Cassandra doesn't use transactions, so any JDO/JPA transaction operation is a no-op (i.e will be ignored).</li>
                <li>This uses Cassandra 2.x (and CQL v3.x), not Thrift (like the previous unofficial attempts at a datanucleus-cassandra plugin used)</li>
                <li>You need to specify the "schema" (<i>datanucleus.mapping.Schema</i>)</li>
                <li>Queries are evaluated in-datastore when they only have (indexed) members and literals and using the operators ==, !=, &gt;, &gt;=, &lt;, &lt;=, &amp;&amp;, ||.</li>
                <li>You can query the datastore using <a href="../jdo/jdoql.html">JDOQL</a>, <a href="../jpa/jpql.html">JPQL</a>, or <a href="#native">CQL</a></li>
            </ul>

            <a name="native"/>
            <subsection name="Queries : Cassandra CQL Queries">
                <table>
                    <tr>
                        <td>Note that if you choose to use Cassandra CQL Queries then these are not portable to any other datastore. Use JDOQL/JPQL for portability</td>
                    </tr>
                </table>
                <p>
                    Cassandra provides the CQL query language.
                    To take a simple example using the JDO API
                </p>
                <source><![CDATA[
// Find all employees
PersistenceManager persistenceManager = pmf.getPersistenceManager();
Query q = pm.newQuery("CQL", "SELECT * FROM schema1.Employee");
// Fetch 10 Employee rows at a time
query.getFetchPlan().setFetchSize(10);
query.setResultClass(Employee.class);
List<Employee> results = (List)q.execute();]]></source>
                <p>
                    You can also query results as List&lt;Object[]&gt; without specifying a specific result type as shown below.
                </p>
                <source><![CDATA[
// Find all employees
PersistenceManager persistenceManager = pmf.getPersistenceManager();
Query q = pm.newQuery("CQL", "SELECT * FROM schema1.Employee");
// Fetch all Employee rows as Object[] at a time.
query.getFetchPlan().setFetchSize(-1);
List<Object[]> results = (List)q.execute();]]></source>
                <p>
                    So we are utilising the JDO API to generate a query and passing in the Cassandra "CQL".
                </p>
                <p>
                    If you wanted to use CQL with the JPA API, you would do
                </p>
                <source><![CDATA[
// Find all employees
Query q = em.createNativeQuery("SELECT * FROM schema1.Employee", Employee.class);
List<Employee> results = q.getResultList();]]></source>
                <p>
                    Note that the last argument to <i>createNativeQuery</i> is optional and you would get <i>List&lt;Object[]&gt;</i> returned otherwise.
                </p>
                <br/>
            </subsection>

        </section>
    </body>
</document>