<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>ODF Documents</title>
    </properties>

    <body>
        <section name="ODF Documents">
            <img src="../images/thirdparty/odf.png" border="0" alt=""/>
            <p>
                DataNucleus supports persisting/retrieving objects to/from ODF documents (using the 
                <a href="../../../plugins/store.odf.html">datanucleus-odf</a> plugin) which makes use of the
                ODFDOM project. Simply specify your "connectionURL" as follows
            </p>
            <source>datanucleus.ConnectionURL=odf:file:myfile.ods</source>
            <p>
                replacing "myfile.ods" with your filename, which can be absolute or relative. This connects to a file
                on your local machine. You then create your PMF/EMF as normal and use JDO/JPA as normal.
            </p>
            <p>
                The jars required to use DataNucleus ODF persistence are <i>datanucleus-core</i>,
                <i>datanucleus-api-jdo</i>/<i>datanucleus-api-jpa</i>, <i>datanucleus-odf</i>
                and <i>odftoolkit</i>
            </p>
            <p>
                There are tutorials available for use of DataNucleus with ODF 
                <a href="../jdo/guides/tutorial_odf.html">for JDO</a> and
                <a href="../jpa/guides/tutorial_odf.html">for JPA</a>
            </p>
            <p>
                Things to bear in mind with ODF usage :-
            </p>
            <ul>
                <li>Querying can be performed using JDOQL or JPQL. Any filtering/ordering will be performed
                        <b>in-memory</b></li>
                <li>Relations : A spreadsheet cannot store related objects directly, since each object is a 
                        row of a particular worksheet. DataNucleus gets around this by storing the String-form of 
                        the identity of the related object in the relation cell.
                        See <img src="../images/odf_sample1.jpg" border="0" alt=""/></li>
            </ul>
            <br/>

            <subsection name="Worksheet Headers">
                <p>
                    A typical spreadsheet has many rows of data. It contains no names of columns tying
                    the data back to the input object (field names). DataNucleus allows an extension
                    specified at <i>class</i> level called <b>include-column-headers</b> (should be set to
                    true). When the table is then created it will include an extra row (the first row)
                    with the column names from the metadata (or field names if no column names were defined).
                    For example
                </p>
                <img src="../images/odf_sample2.jpg" border="0" alt=""/>
                <br/>
            </subsection>
        </section>
    </body>
</document>