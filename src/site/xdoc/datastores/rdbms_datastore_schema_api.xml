<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Datastore Schema API</title>
    </properties>

    <body>
        <section name="RDBMS : Datastore Schema API">
            <img src="../images/nucleus_extension.gif" border="0" alt=""/>
            <p>
                JDO/JPA are APIs for persisting and retrieving objects to/from datastores. They don't
                provide a way of accessing the schema of the datastore itself (if it has one). In the
                case of RDBMS it is useful to be able to find out what columns there are in a table, or
                what data types are supported for example. DataNucleus Access Platform provides an
                API for this.
            </p>
            <p>
                The first thing to do is get your hands on the DataNucleus <i>StoreManager</i> and from
                that the <i>StoreSchemaHandler</i>. You
                do this as follows
            </p>
            <source><![CDATA[
import org.datanucleus.api.jdo.JDOPersistenceManagerFactory;
import org.datanucleus.store.StoreManager;
import org.datanucleus.store.schema.StoreSchemaHandler;

[assumed to have "pmf"]
...

StoreManager storeMgr = ((JDOPersistenceManagerFactory)pmf).getStoreManager();
StoreSchemaHandler schemaHandler = storeMgr.getSchemaHandler();
]]></source>
            <p>
                So now we have the <i>StoreSchemaHandler</i> what can we do with it? Well start with the
                javadoc for the implementation that is used for RDBMS
                <a href="http://www.datanucleus.org/javadocs/store.rdbms/latest/org/datanucleus/store/rdbms/schema/RDBMSSchemaHandler.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
            </p>
            <br/>

            <subsection name="Datastore Types Information">
                <p>
                    So we now want to find out what JDBC/SQL types are supported for our RDBMS.
                    This is simple.
                </p>
                <source><![CDATA[
import org.datanucleus.store.rdbms.schema.RDBMSTypesInfo;

Connection conn = (Connection)pm.getDataStoreConnection().getNativeConnection();
RDBMSTypesInfo typesInfo = schemaHandler.getSchemaData(conn, "types");
]]></source>
                <p>
                    As you can see from the javadocs for <i>RDBMSTypesInfo</i>
                    <a href="http://www.datanucleus.org/javadocs/store.rdbms/latest/org/datanucleus/store/rdbms/schema/RDBMSTypesInfo.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
                    we can access the JDBC types information via the "children". They are keyed by
                    the JDBC type number of the JDBC type (see java.sql.Types).
                    So we can just iterate it
                </p>
                <source><![CDATA[
Iterator jdbcTypesIter = typesInfo.getChildren().values().iterator();
while (jdbcTypesIter.hasNext())
{
    JDBCTypeInfo jdbcType = (JDBCTypeInfo)jdbcTypesIter.next();

    // Each JDBCTypeInfo contains SQLTypeInfo as its children, keyed by SQL name
    Iterator sqlTypesIter = jdbcType.getChildren().values().iterator();
    while (sqlTypesIter.hasNext())
    {
        SQLTypeInfo sqlType = (SQLTypeInfo)sqlTypesIter.next();
        ... inspect the SQL type info
    }
}]]></source>
                <br/>
            </subsection>

            <subsection name="Column information for a table">
                <p>
                    Here we have a table in the datastore and want to find the columns present.
                    So we do this
                </p>
                <source><![CDATA[
import org.datanucleus.store.rdbms.schema.RDBMSTableInfo;

Connection conn = (Connection)pm.getDataStoreConnection().getNativeConnection();
RDBMSTableInfo tableInfo = schemaHandler.getSchemaData(conn, "columns", 
    new Object[] {catalogName, schemaName, tableName});
]]></source>
                <p>
                    As you can see from the javadocs for <i>RDBMSTableInfo</i>
                    <a href="http://www.datanucleus.org/javadocs/store.rdbms/latest/org/datanucleus/store/rdbms/schema/RDBMSTableInfo.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
                    we can access the columns information via the "children".
                </p>
                <source><![CDATA[
Iterator columnsIter = tableInfo.getChildren().iterator();
while (columnsIter.hasNext())
{
    RDBMSColumnInfo colInfo = (RDBMSColumnInfo)columnsIter.next();

    ...
}]]></source>
                <br/>
            </subsection>

            <subsection name="Index information for a table">
                <p>
                    Here we have a table in the datastore and want to find the indices present.
                    So we do this
                </p>
                <source><![CDATA[
import org.datanucleus.store.rdbms.schema.RDBMSTableInfo;

Connection conn = (Connection)pm.getDataStoreConnection().getNativeConnection();
RDBMSTableIndexInfo tableInfo = schemaHandler.getSchemaData(conn, "indices", 
    new Object[] {catalogName, schemaName, tableName});
]]></source>
                <p>
                    As you can see from the javadocs for <i>RDBMSTableIndexInfo</i>
                    <a href="http://www.datanucleus.org/javadocs/store.rdbms/latest/org/datanucleus/store/rdbms/schema/RDBMSTableIndexInfo.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
                    we can access the index information via the "children".
                </p>
                <source><![CDATA[
Iterator indexIter = tableInfo.getChildren().iterator();
while (indexIter.hasNext())
{
    IndexInfo idxInfo = (IndexInfo)indexIter.next();

    ...
}]]></source>
                <br/>
            </subsection>

            <subsection name="ForeignKey information for a table">
                <p>
                    Here we have a table in the datastore and want to find the FKs present.
                    So we do this
                </p>
                <source><![CDATA[
import org.datanucleus.store.rdbms.schema.RDBMSTableInfo;

Connection conn = (Connection)pm.getDataStoreConnection().getNativeConnection();
RDBMSTableFKInfo tableInfo = schemaHandler.getSchemaData(conn, "foreign-keys", 
    new Object[] {catalogName, schemaName, tableName});
]]></source>
                <p>
                    As you can see from the javadocs for <i>RDBMSTableFKInfo</i>
                    <a href="http://www.datanucleus.org/javadocs/store.rdbms/latest/org/datanucleus/store/rdbms/schema/RDBMSTableFKInfo.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
                    we can access the foreign-key information via the "children".
                </p>
                <source><![CDATA[
Iterator fkIter = tableInfo.getChildren().iterator();
while (fkIter.hasNext())
{
    ForeignKeyInfo fkInfo = (ForeignKeyInfo)fkIter.next();

    ...
}]]></source>
                <br/>
            </subsection>

            <subsection name="PrimaryKey information for a table">
                <p>
                    Here we have a table in the datastore and want to find the PK present.
                    So we do this
                </p>
                <source><![CDATA[
import org.datanucleus.store.rdbms.schema.RDBMSTableInfo;

Connection conn = (Connection)pm.getDataStoreConnection().getNativeConnection();
RDBMSTablePKInfo tableInfo = schemaHandler.getSchemaData(conn, "primary-keys", 
    new Object[] {catalogName, schemaName, tableName});
]]></source>
                <p>
                    As you can see from the javadocs for <i>RDBMSTablePKInfo</i>
                    <a href="http://www.datanucleus.org/javadocs/store.rdbms/latest/org/datanucleus/store/rdbms/schema/RDBMSTablePKInfo.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
                    we can access the foreign-key information via the "children".
                </p>
                <source><![CDATA[
Iterator pkIter = tableInfo.getChildren().iterator();
while (pkIter.hasNext())
{
    PrimaryKeyInfo pkInfo = (PrimaryKeyInfo)pkIter.next();

    ...
}]]></source>
                <br/>
            </subsection>
        </section>

    </body>
</document>