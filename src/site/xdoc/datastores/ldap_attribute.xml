<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Relationship Mapping by Attribute</title>
    </properties>

    <body>
        <section name="LDAP : Relationship Mapping by Attribute">
            <p>
                Another way to model relationships between LDAP entries is to use attribute matching. This means two entries have the same
                attribute values. An example of this type of relationship is used by posixGroup and posixAccount object classes were 
                posixGroup.memberUid points to posicAccount.uid.
            </p>
            <p>
                We just describe 1-N relationship mapping here and distinguish between unidirectional and bidirectional relationships. 
                The metadata for 1-1, N-1 and M-N relationship mapping looks identical, the only difference is whether single-valued or
                multi-valued attributes are used in LDAP to store the relationships. 
            </p>
                <ul>
                    <li><a href="#unidirectional">Unidirectional</a></li>
                    <li><a href="#bidirectional">Bidirectional</a></li>
                </ul>
        </section>
        
        <section name="1-N Unidirectional">
            <a name="unidirectional"/>
            <p>
                We use the following example LDAP tree and Java classes:
            </p>
            <source><![CDATA[
dc=example,dc=com                                       public class Department {
|                                                           String name;
|-- ou=Departments                                          Set<Employee> employees;
|   |-- ou=Sales                                        }
|   |-- ou=Engineering                                  
|   |-- ...                                             public class Employee {
|                                                           String firstName;
|-- ou=Employees                                            String lastName;
|   |-- uid=bbunny                                          String fullName;
|   |-- uid=dduck                                           String uid;
|   |-- uid=sgonzales                                   }
|   |-- ...                                             ]]></source>
            <p>
                We have a flat LDAP tree with one container for all the departments and one container for all the employees.
                We have two Java classes, <b>Department</b> and <b>Employee</b>. The <b>Department</b> class contains a
                Collection of type <b>Employee</b>. The <b>Employee</b> knows nothing about the <b>Department</b> it 
                belongs to.
            </p>
            <p>
                There are 2 ways that we can persist this relationship in LDAP because the reference could be stored at the one
                or at the other LDAP entry.
            </p>
            <subsection name="Owner Object Side">
                <p>
                    One way is to store the reference at the owner object side, in our case at the department entry. This is possible since 
                    LDAP allows multi-valued attributes. The example department entry looks like this:
                </p>
                <source><![CDATA[
dn: ou=Sales,ou=Departments,dc=example,dc=com
objectClass: top
objectClass: organizationalUnit
objectClass: extensibleObject
ou: Sales
memberUid: bbunny
memberUid: dduck]]></source>
                <p>
                     Our JDO metadata looks like this:
                </p>
                <source><![CDATA[
<jdo>
    <package name="com.example">
        <class name="Department" table="ou=Departments,dc=example,dc=com" schema="top,organizationalUnit,extensibleObject">
            <field name="name" primary-key="true" column="ou" />
            <field name="employees" column="memberUid">
                <join column="uid" />
            </field>
        </class>
        <class name="Employee" table="ou=Employees,dc=example,dc=com" schema="top,person,organizationalPerson,inetOrgPerson">
        
            <field name="fullName" primary-key="true column="cn" />
            <field name="firstName" column="givenName" />
            <field name="lastName" column="sn" />
            <field name="uid" column="uid" />
        </class>
    </package>
</jdo>]]></source>
                <p>
                    So we define that the attribute <i>memberUid</i> at the department entry should be used to persist the 
                    relationship of field <i>employees</i> 
                </p>
                <p>
                    The important thing here is the <i>&lt;join&gt;</i> tag and its <i>column</i>.
                    Firstly it signals DataNucleus to use attribute mapping. 
                    Secondly it specifies the attribute at the other side that should be used for relationship mapping.
                    In our case, when we establish a relationship between a <b>Department</b> and an <b>Employee</b>,
                    the <i>uid</i> value of the employee entry is stored in the <i>memberUid</i> attribute of the department entry.
                </p>
            </subsection>
            <subsection name="Non-Owner Object Side">
                <p>
                    Another possible way is to store the reference at the non-owner object side, in our case at the employee entry.
                    The example employee entry looks like this:
                </p>
                <source><![CDATA[
dn: uid=bbunny,ou=Employees,dc=example,dc=com
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
uid: bbunny
cn: Bugs Bunny
givenName: Bugs
sn: Bunny
departmentNumber: Sales]]></source>
                <p>
                     Our JDO metadata looks like this:
                </p>
                <source><![CDATA[
<jdo>
    <package name="com.example">
        <class name="Department" table="ou=Departments,dc=example,dc=com" schema="top,organizationalUnit">
            <field name="name" primary-key="true" column="ou" />
            <field name="employees">
                <element column="departmentNumber" />
                <join column="ou" />
            </field>
        </class>
        <class name="Employee" table="ou=Employees,dc=example,dc=com" schema="top,person,organizationalPerson,inetOrgPerson">
            <field name="fullName" primary-key="true column="cn" />
            <field name="firstName" column="givenName" />
            <field name="lastName" column="sn" />
            <field name="uid" column="uid" />
        </class>
    </package>
</jdo>]]></source>
                <p>
                    We need to define the relationship at the department metadata because the employee doesn't know about
                    the department it belongs to.
                </p>
                <p>
                    With the <i>&lt;element&gt;</i> tag we specify that the relationship should be persisted at the other
                    side and the <i>column</i> attribute defines the LDAP attribute to use. 
                    In this case the relationship is persisted in the <i>departmentNumber</i> attribute at the employee entry.
                </p>
                <p>
                    The important thing here is the <i>&lt;join&gt;</i> tag and its <i>column</i>.
                    As before it signals DataNucleus to use attribute mapping.
                    Now, as the relation is persisted at the <u>other</u> side, it specifies the attribute at <u>this</u> side
                    that should be used for relationship mapping.
                    In our case, when we establish a relationship between a <b>Department</b> and an <b>Employee</b>,
                    the <i>ou</i> value of the department entry is stored in the <i>departmentNumber</i> attribute of the employee entry.
                </p>
            </subsection>
        </section>
        
        
        
        
        <section name="1-N Bidirectional">
            <a name="bidirectional"/>
            <p>
                We use the following example LDAP tree and Java classes:
            </p>
            <source><![CDATA[
dc=example,dc=com                                       public class Department {
|                                                           String name;
|-- ou=Departments                                          Set<Employee> employees;
|   |-- ou=Sales                                        }
|   |-- ou=Engineering                                  
|   |-- ...                                             public class Employee {
|                                                           String firstName;
|-- ou=Employees                                            String lastName;
|   |-- uid=bbunny                                          String fullName;
|   |-- uid=dduck                                           String uid;
|   |-- uid=sgonzales                                       Department department;
|   |-- ...                                             }]]></source>
            <p>
                We have a flat LDAP tree with one container for all the departments and one container for all the employees.
                We have two Java classes, <b>Department</b> and <b>Employee</b>. The <b>Department</b> class contains a
                Collection of type <b>Employee</b>. Now each <b>Employee</b> has a reference to its <b>Department</b>.
            </p>
            <p>
                It is possible to persist this relationship on both sides.
            </p>
                <source><![CDATA[
dn: uid=bbunny,ou=Employees,dc=example,dc=com
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
uid: bbunny
cn: Bugs Bunny
givenName: Bugs
sn: Bunny
departmentNumber: Sales]]></source>
                <source><![CDATA[
<jdo>
    <package name="com.example">
        <class name="Department" table="ou=Departments,dc=example,dc=com" schema="top,organizationalUnit">
            <field name="name" primary-key="true" column="ou" />
            <field name="employees" mapped-by="department" />
        </class>
        <class name="Employee" table="ou=Employees,dc=example,dc=com" schema="top,person,organizationalPerson,inetOrgPerson">
            <field name="fullName" primary-key="true column="cn" />
            <field name="firstName" column="givenName" />
            <field name="lastName" column="sn" />
            <field name="uid" column="uid" />
            <field name="department" column="departmentNumber">
                <join column="ou" />
            </field>
        </class>
    </package>
</jdo>]]></source>
                <p>
                    In this case we store the relation at the employee entry side in a single-valued attribute <i>departmentNumber</i>. 
                    With the <i>&lt;join&gt;</i> tag and its <i>column</i> we specify that the <i>ou</i>
                    value of the department entry should be used as join value. 
                    Also note that <i>employee</i> field of <b>Department</b> is <i>mapped-by</i> the <i>department</i> field
                    of the <b>Employee</b>.
                </p>
        </section>
        
    </body>
</document>