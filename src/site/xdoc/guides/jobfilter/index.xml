<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Guides : Jobfilter</title>
    </properties>

    <body>
        <section name="JobFilter">
            <img src="../../images/jobfilter.png" border="0" alt="JobFilter"/>
            <p>
                Jobfilter is a simple Spring-based webapp for managing and filtering
                job vacancies and application. Vacancy information is obtained from an
                external data source - currently
                <a href="http://www.jobserve.com">www.jobserve.com</a>-mailed CSV files;
                however the implementation is designed to be extensible to other
                sources of vacancy information.
            </p>
            <p>
                Vacancies are handled via a simple workflow: a vacancy begins life
                (having been loaded from the external data source) in a <i>new</i>
                state. An initial filtering is performed on all new vacancies whereby
                they are either accepted as being of potential interest or rejected.
                New vacancies which are accepted become <i>pending</i>. A pending
                vacancy can be edited repeatedly and, at each stage, have notes
                attached; it can also be rejected if, on closer inspection, it is
                deemed to be of no further interest. If a pending vacancy is of
                interest, an application can be made for the vacancy. Vacancy
                applications require a CV (Resume) and Jobfilter maintains a set of
                available CVs for this purpose. An application can be made by email
                (using an email address provided in the vacancy data) or via an
                external website (using a URL provided in the vacancy data). In the
                latter case, Jobfilter merely maintains a record of the vacancy
                application but leaves the application process to the external website.
            </p>
            <p>
                Vacancies which are rejected (at either the <i>new</i> or <i>pending</i>
                stages) are maintained internally within the system for a period of
                time after the rejection. This allows the system to spot and remove
                duplicates of rejected vacancies which might appear in subsequent
                vacancy data loads. A timer within the Jobfilter application
                automatically removes rejected vacancies after a period of time
                (when it is assumed duplicates will no longer appear).
            </p>
            <p>
                The data comprising a vacancy is divided into data specific to the
                vacancy itself, data pertaining to the agent who posted the vacancy
                and data about the agency to which that agent belongs. Jobfilter
                maintains a record of all agencies and their agents and provides the
                ability to edit this information. Additionally a record is maintained
                of CVs sent to each agency for reference in the event of a later
                application for a different vacancy posted by the same agency.
            </p>
            <p>
                You can download this sample from <a href="http://sourceforge.net/projects/datanucleus/files/datanucleus-samples/3.0/">SourceForge</a>.
            </p>
            <br/>
        </section>

        <section name="Implementation">
            <subsection name="Architecture">
                <p>
                Jobfilter is implemented as a simple 3-tier web application. The web tier
                is implemented using Spring web MVC which communicates with a middle tier
                via a set of <i>service</i> interfaces whose implementations are dependency
                injected into the web tier using Spring. Spring is also used to provide
                transactional behaviour on the service interfaces. Service interface
                implementations communicate with the persistence tier via a set of Data
                Access Object (DAO) interfaces whose implementations are dependency
                injected into the middle tier using Spring. The following DAO
                implementations are provided:
                </p>
                <ul>
                    <li><i>Hibernate3</i> (included for completeness)</li>
                    <li>JDO (DataNucleus)</li>
                    <li>JPA (DataNucleus)</li>
                </ul>
            </subsection>

            <subsection name="Projects">
                <p>
                    The Jobfilter implementation is spread across a number of projects as follows:
                </p>
                <ul>
                    <li>
                        <i>jobfilter-toplevel</i>
                        <p>
                            Project whose sole purpose is for invoking a Maven build of the entire
                            application. This project does not provide any code nor does it provide
                            any resultant artifact.
                        </p>
                    </li>
                    <li>
                        <i>jobfilter-doc</i>
                        <p>
                            Project documentation - README's, build and deployment instructions etc.
                        </p>
                    </li>
                  <li>
                    <i>jobfilter-common</i>
                    <p>
                        Provides domain classes, persistence layer and middle tier
                        (business logic). Note that the jobfilter-common codebase includes
                        the sources for <b>all</b> variants of the persistence layer (JDO, JPA,
                        Hibernate3 etc.) - an appropriate implementation will be selected
                        according to a property passed to the Maven build. 
                    </p>
                  </li>
                  <li>
                    <i>jobfilter-war</i>
                    <p>
                        Web front-end - servlets, JSPs, Spring MVC form controllers, web-related
                        decorator classes etc. Also provides top-level Spring configuration of
                        application, linking together web tier, business logic and DAOs.
                    </p>
                  </li>
                </ul>
            </subsection>

            <subsection name="Object Model">
                <p>
                    The Jobfilter object model is given in the UML class diagram below:
                </p>
                <img src="../../images/jobfilter_class_diagram.png" alt="Jobfilter Class Diagram"/>
                <p>
                    The classes in the diagram correspond to those in package
                    <i>com.plus.fcentre.jobfilter.domain</i> (in project
                    <i>jobfilter-common</i>). A description of the classes and their
                    relationships follows:
                </p>
                <ul>
                    <li><b>Agency</b> - An agency employing a number of agents and holding the registrations of a number of CVs.</li>
                    <li><b>Agent</b> - An agent employed by an agency and who is handing a number of vacancies.</li>
                    <li><b>Vacancy</b> - Abstract base class for a vacancy being handled by an agent.</li>
                    <li><b>NewVacancy</b> - A vacancy in the <i>new</i> state. New vacancies have not undergone the initial filtering process.</li>
                    <li><b>PendingVacancy</b> - A vacancy in the <i>pending</i> state. Pending vacancies have successfully passed the initial vacancy filtering process and may or may not be associated with a vacancy application. A series of notes may be attached  to a pending vacancy, recording events during its lifecycle.</li>
                    <li><b>VacancyNote</b> - A note associated with a pending vacancy. Vacancy notes are timestamped and contain a textual description of some event during the lifecycle of its associated vacancy - e.g. "Called agent to  check on progress of application - still awaiting response from client."</li>
                    <li><b>RejectedVacancy</b> - A vacancy in the <i>rejected</i> state. Rejected vacancies are new or pending vacancies which have ultimately been determined to be of no further interest. Rejected vacancies do not appear in the user interface but are retained by the system for a short time to help prevent the uploading of future, duplicate vacancies.</li>
                    <li><b>CV</b> - A <i>Curriculum Vitae</i> (Resume) held by the system. The set of available CVs is presented to the user upon making an application for a vacancy. A CV object contains a binary image of the original CV file uploaded from filestore and a reference to an entity reflecting the type of the contents of the binary image (e.g. "Word document"). Any given CV may be registered with any number of agencies - note that, in the <i>CV</i> domain class, the relationship from a CV to a CV registration is actually represented by a map of <i>CVRegistration</i> keyed by the agency with which the CV is
                        registered rather than a simple list or set.</li>
                    <li><b>CVContentType</b> - The type of the content of a CV binary held by a CV object. CV content types are <i>static data</i>, having a fixed set of values (currently "PDF" and "Word"). These are created in the database when the application starts up for the first time. </li>
                    <li><b>CVRegistration</b> - The registration of a given CV with a given agency. A CV registration can be used as the basis of any number of vacancy applications - i.e. upon registering a CV with an agency, it is possible to use that CV to apply for any number of vacancies advertised by that agency.</li>
                    <li><b>VacancyApplication</b> - An application for a (pending) vacancy using a given CV registered with a given agency (i.e. a CV registration entity).</li>
                </ul>
            </subsection>
            
            <subsection name="Database model">
                <p>
                    The tables of the Jobfilter database model (into which the Object Model
                    is persisted) are described below. Note that, for brevity, this
                    description omits the   majority of the <i>value</i> fields of the various
                    tables and, instead, concentrates on the various primary and foreign key
                    fields.
                </p>
                <ul>
                    <li>agency
                    <ul>
                        <li>id - primary key</li>
                    </ul></li>
                    <li>agent
                    <ul>
                        <li>id - primary key</li>
                        <li>agency_id - id of agency to which agent belongs</li>
                    </ul></li>
                    <li>vacancy
                    <ul>
                        <li>id - primary key</li>
                        <li>agent_id - id of agent posting vacancy</li>
                        <li>subtype - discriminator field indicating vacancy subtype</li>
                    </ul></li>
                    <li>vacancy_note
                    <ul>
                        <li>id - primary key</li>
                        <li>vacancy_id - id of (pending) vacancy to which note applies</li>
                    </ul></li>
                    <li>cv
                    <ul>
                        <li>id - primary key</li>
                        <li>content_type_id - id of CV content type</li>
                        <li>content - BLOB field containing CV file binary image</li>
                    </ul></li>
                    <li>cv_content_type
                    <ul>
                        <li>id - primary key</li>
                    </ul></li>
                    <li>cv_registration
                    <ul>
                        <li>agency_id - id of agency with which CV has been registered</li>
                        <li>cv_id - id of registered CV</li>
                    </ul></li>
                    <li>vacancy_application
                    <ul>
                        <li>id - primary key</li>
                        <li>agency_id - id of agency posting vacancy being applied for</li>
                        <li>cv_id - id of CV used for application</li>
                        <li>vacancy_id - id of (pending) vacancy being applied for</li>
                    </ul></li>
                </ul>
            </subsection>
        </section>
    </body>
</document>
