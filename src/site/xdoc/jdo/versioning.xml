<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JDO Versioning</title>
    </properties>

    <body>
        <section name="JDO : Versioning of Objects">
            <p>
                JDO allows objects of classes to be versioned. The version is typically used as a way of
                detecting if the object has been updated by another thread or PersistenceManager since retrieval
                using the current PersistenceManager - for use by Optimistic Transactions. JDO defines several
                "strategies" for generating the version of an object. The strategy has the following possible values
            </p>
            <ul>
                <li><b>none</b> stores a number like the version-number but will not perform any optimistic checks.</li>
                <li><b>version-number</b> stores a number (starting at 1) representing the version of the object.</li>
                <li><b>date-time</b> stores a Timestamp representing the time at which the object was last updated.
                    <i>Note that not all RDBMS store milliseconds in a Timestamp!</i></li>
                <li><b>state-image</b> stores a Long value being the hash code of all fields of the object.
                    <b>DataNucleus doesnt currently support this option</b></li>
            </ul>
            <br/>

            <a name="surrogate"/>
            <subsection name="Versioning using a surrogate column">
                <p>
                    JDO2s mechanism for versioning of objects in RDBMS datastores is via a <b>surrogate column</b>
                    in the table of the class. In the MetaData you specify the details of the surrogate column
                    and the strategy to be used. For example
                </p>
                <source><![CDATA[
<package name="mydomain">
    <class name="User" table="USER">
        <version strategy="version-number" column="VERSION"/>
        <field name="name" column="NAME"/>
        ...
    </class>
</package>]]></source>
                <p>alternatively using annotations</p>
                <source><![CDATA[
@PersistenceCapable
@Version(strategy=VersionStrategy.VERSION_NUMBER, column="VERSION")
public class MyClass
{
    ...
}]]></source>
                <p>
                    The specification above will create a table with an additional column called "VERSION" that will
                    store the version of the object.
                </p>
                <br/>
            </subsection>

            <a name="field"/>
            <subsection name="Versioning using a field of the class">
                <img src="../images/nucleus_extension.gif" border="0" alt=""/>
                <p>
                    DataNucleus provides a valuable extension to JDO whereby you can have a field of your class store
                    the version of the object. This equates to JPA's versioning process whereby you have to have
                    a field present. To do this lets take a class
                </p>
                <source><![CDATA[
public class User
{
    String name;
    ...
    long myVersion;

}]]></source>
                <p>
                    and we want to store the version of the object in the field "myVersion". So we specify the
                    metadata as follows
                </p>
                <source><![CDATA[
<package name="mydomain">
    <class name="User" table="USER">
        <version strategy="version-number">
            <extension vendor-name="datanucleus" key="field-name" value="myVersion"/>
        </version>
        <field name="name" column="NAME"/>
        ...
        <field name="myVersion" column="VERSION"/>
    </class>
</package>
                ]]></source>
                <p>alternatively using annotations</p>
                <source><![CDATA[
@PersistenceCapable
@Version(strategy=VersionStrategy.VERSION_NUMBER, column="VERSION",
         extensions={@Extension(vendorName="datanucleus", key="field-name", value="myVersion")})
public class MyClass
{
    protected long myVersion;
    ...
}]]></source>
                <p>
                    and so now objects of our class will have access to the version via the "myVersion" field.
                </p>
            </subsection>
        </section>

    </body>
</document>