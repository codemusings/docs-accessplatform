<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JDO Meta-Data API</title>
    </properties>
    <body>
        <section name="JDO : Metadata API">
            <p>
                When using JDO you need to define which classes are persistent, and also how they are
                persisted. JDO has allowed XML metadata since its first revision, and introduced support
                for annotations in JDO 2.1. JDO 3.0 introduces a programmatic API to do the same task.
            </p>

            <subsection name="Defining Metadata for classes">
                <p>
                    The basic idea behind the Metadata API is that the developer obtains a metadata object
                    from the PersistenceManagerFactory, and adds the definition to that as required, before
                    registering it for use in the persistence process.
                </p>
                <source><![CDATA[
PersistenceManagerFactory pmf = JDOHelper.getPersistenceManagerFactory(propsFile);
...
JDOMetadata md = pmf.newMetadata();]]></source>
                <p>
                    So we have a <i>JDOMetadata</i> object and want to define the persistence for
                    our class <i>mydomain.MyClass</i>, so we do as follows
                </p>
                <source><![CDATA[
PackageMetadata pmd = md.newPackageMetadata("mydomain");
ClassMetadata cmd = pmd.newClassMetadata("MyClass");]]></source>
                <p>
                    So we follow the same structure of the JDO <a href="metadata_xml.html">XML Metadata file</a>
                    adding packages to the top level, and classes to the respective package. Note that we could
                    have achieved this by a simple typesafe invocation
                </p>
                <source><![CDATA[
ClassMetadata cmd = md.newClassMetadata(MyClass.class);]]></source>
                <p>
                    So now we have the class defined, we need to set its key information
                </p>
                <source><![CDATA[
cmd.setTable("CLIENT").setDetachable(true).setIdentityType(IdentityType.DATASTORE);
cmd.setPersistenceModifier(ClassPersistenceModifier.PERSISTENCE_CAPABLE);

InheritanceMetadata inhmd = cmd.newInheritanceMetadata();
inhmd.setStrategy(InheritanceStrategy.NEW_TABLE);
DiscriminatorMetadata dmd = inhmd.newDiscriminatorMetadata();
dmd.setColumn("disc").setValue("Client");
dmd.setStrategy(DiscriminatorStrategy.VALUE_MAP).setIndexed(Indexed.TRUE);

VersionMetadata vermd = cmd.newVersionMetadata();
vermd.setStrategy(VersionStrategy.VERSION_NUMBER);
vermd.setColumn("version").setIndexed(Indexed.TRUE);]]></source>
                <p>
                    And we define also define fields/properties via the API in a similar way
                </p>
                <source><![CDATA[
FieldMetadata fmd = cmd.newFieldMetadata("name");
fmd.setNullValue(NullValue.DEFAULT).setColumn("client_name");
fmd.setIndexed(true).setUnique(true);]]></source>
                <p>
                    Note that, just like with XML metadata, we don't need to add information for all fields
                    since they have their own default persistence settings based on the type of the field.
                </p>
                <p>
                    All that remains is to register the metadata with the persistence process
                </p>
                <source><![CDATA[
pmf.registerMetadata(md);]]></source>
            </subsection>

            <subsection name="Accessing Metadata for classes">
                <p>
                    Maybe you have a class with its persistence defined in XML or annotations and you
                    want to check its persistence information at runtime. With the JDO Metadata API you can
                    do that
                </p>
                <source><![CDATA[
TypeMetadata compmd = pmf.getMetadata("mydomain.MyOtherClass");]]></source>
                <p>
                    and we can now inspect the information, casting the <i>compmd</i> to either
                    <i>javax.jdo.metadata.ClassMetadata</i> or <i>javax.jdo.metadata.InterfaceMetadata</i>.
                </p>
                <p>
                    <b>Please note that you cannot currently change metadata retrieved in this way, only
                    view it</b>
                </p>
            </subsection>
        </section>
    </body>
</document>