<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JDO Serialised Objects</title>
    </properties>

    <body>
        <section name="JDO : Serialising Fields">
            <p>
                JDO provides a way for users to specify that a field will be persisted <i>serialised</i>. 
                This is of use, for example, to collections/maps/arrays which typically are stored using 
                join tables or foreign-keys to other records. By specifying that a field is serialised a 
                column will be added to store that field and the field will be serialised into it.
            </p>
            <p>
                JDO's definition of serialising encompasses several types of fields. These are described below
            </p>
            <ul>
                <li><a href="arrays.html#serialised">Serialised Array fields</a> - where you want to serialise 
                    the array into a single "BLOB" column.</li>
                <li><a href="#Collection">Serialised Collection fields</a> - where you want to serialise the 
                    collection into a single "BLOB" column.</li>
                <li><a href="#CollectionElements">Serialised Collection elements</a> - where you want to 
                    serialise the collection elements into a single column in a join table.</li>
                <li><a href="#Map">Serialised Map fields</a> - where you want to serialise the map into a 
                    single "BLOB" column</li>
                <li><a href="#MapKeysValues">Serialised Map keys/values</a> - where you want to serialise the 
                    map keys and/or values into single column(s) in a join table.</li>
                <li><a href="#PC">Serialised persistable fields</a> - where you want to serialise a PC 
                    object into a single "BLOB" column.</li>
                <li><a href="#Reference">Serialised Reference (Interface/Object) fields</a> - where you want 
                    to serialise a reference field into a single "BLOB" column.</li>
                <li><a href="#LocalFile">Serialised field to local disk</a> - not part of the JDO spec but available
                    as an option for RDBMS datastores usage</li>
            </ul>
            <p>
                Perhaps the most important thing to bear in mind when deciding to serialise a field is that 
                that object must implement <i>java.io.Serializable</i>.
            </p>
            <br/>

            <a name="Collection"/>
            <subsection name="Serialised Collections">
                <table><tr><td>Applicable to RDBMS, HBase, MongoDB</td></tr></table>
                <p>
                    Collections are usually persisted by way of either a <i>join table</i>, or by use of a 
                    <i>foreign-key</i> in the element table. In some situations it is required to store the 
                    whole collection in a single column in the table of the class being persisted. This 
                    prohibits the querying of such a collection, but will persist the collection in a single 
                    statement. Let's take an example. We have the following classes
                </p>
                <img src="../../images/orm/serialised_collection_class.jpg" alt=""/><br/>
                <p>
                    and we want the <i>animals</i> collection to be serialised into a single column in the table
                    storing the <b>Farm</b> class, so we define our MetaData like this
                </p>
                <source><![CDATA[
<class name="Farm" table="FARM">
    <datastore-identity column="ID"/>
    <field name="name" column="NAME"/>
    <field name="animals" serialized="true">
        <collection element-type="Animal"/>
        <column name="ANIMALS"/>
    </field>
</class>
<class name="Animal">
    <field name="name"/>
    <field name="type"/>
</class>]]></source>
                <p>
                    So we make use of the <i>serialized</i> attribute of &lt;field&gt;. This specification 
                    results in a table like this
                </p>
                <img src="../../images/orm/serialised_collection_db.jpg" alt=""/><br/>
                <p>
                    Provisos to bear in mind are
                </p>
                <ul>
                    <li>Queries cannot be performed on collections stored as serialised.</li>
                </ul>
                <p>
                    There are some other combinations of MetaData tags that result in serialising of the whole 
                    collection in the same way. These are as follows
                </p>
                <ul>
                    <li><b>Collection of non-<i>persistable</i> elements, and no &lt;join&gt; is 
                        specified.</b>
                        Since the elements don't have a table of their own, the only option is to serialise 
                        the whole collection and it appears as a single BLOB field in the table of the main 
                        class.</li>
                    <li><b>Collection of <i>persistable</i> elements, with "embedded-element" set to 
                        <u>true</u> and no &lt;join&gt; is specified.</b>
                        Since the elements are embedded and there is no join table, then the whole collection 
                        is serialised as above.</li>
                </ul>
                <p>See also :-</p>
                <ul>
                    <li><a href="../metadata_xml.html#field">MetaData reference for &lt;field&gt; element</a></li>
                    <li><a href="../annotations.html#Persistent">Annotations reference for @Persistent</a></li>
                    <li><a href="../annotations.html#Serialized">Annotations reference for @Serialized</a></li>
                </ul>
            </subsection>

            <a name="CollectionElements"/>
            <subsection name="Serialised Collection Elements">
                <table><tr><td>Applicable to RDBMS</td></tr></table>
                <p>
                    Collections are usually persisted by way of either a <i>join table</i>, or by use of a 
                    <i>foreign-key</i> in the element table. In some situations you may want to serialise the 
                    element into a single column in the join table. Let's take an example. We have the same 
                    classes as in the previous case and we want the <i>animals</i> collection to be stored in 
                    a join table, and the element serialised into a single column storing the "Animal"
                    object. We define our MetaData like this
                </p>
                <source><![CDATA[
<class name="Farm" table="FARM">
    <datastore-identity column="ID"/>
    <field name="name">
        <column name="NAME"/>
    </field>
    <field name="animals" table="FARM_ANIMALS">
        <collection element-type="Animal" serialised-element="true"/>
        <join column="FARM_ID_OID"/>
    </field>
</class>
<class name="Animal">
    <field name="name"/>
    <field name="type"/>
</class>]]></source>
                <p>
                    So we make use of the <i>serialized-element</i> attribute of &lt;collection&gt;. This 
                    specification results in tables like this
                </p>
                <img src="../../images/orm/serialised_collection_elements_db.jpg" alt=""/><br/>
                <p>
                    Provisos to bear in mind are
                </p>
                <ul>
                    <li>Queries cannot be performed on collection elements stored as serialised.</li>
                </ul>
                <p>See also :-</p>
                <ul>
                    <li><a href="../metadata_xml.html#collection">MetaData reference for &lt;collection&gt; element</a></li>
                    <li><a href="../metadata_xml.html#join">MetaData reference for &lt;join&gt; element</a></li>
                    <li><a href="../annotations.html#Element">Annotations reference for @Element</a></li>
                </ul>
                <br/>
            </subsection>

            <a name="Map"/>
            <subsection name="Serialised Maps">
                <table><tr><td>Applicable to RDBMS, HBase, MongoDB</td></tr></table>
                <p>
                    Maps are usually persisted by way of a <i>join table</i>, or very occasionaly using a 
                    <i>foreign-key</i> in the value table. In some situations it is required to store the whole
                    map in a single column in the table of the class being persisted. This prohibits the 
                    querying of such a map, but will persist the map in a single statement. Let's take an 
                    example. We have the following classes
                </p>
                <img src="../../images/orm/serialised_map_class.jpg" alt=""/><br/>
                <p>
                    and we want the <i>children</i> map to be serialised into a single column in the table
                    storing the <b>ClassRoom</b> class, so we define our MetaData like this
                </p>
                <source><![CDATA[
<class name="ClassRoom">
    <field name="level">
        <column name="LEVEL"/>
    </field>
    <field name="children" serialized="true">
        <map key-type="java.lang.String" value-type="Child"/>
        <column name="CHILDREN"/>
    </field>
</class>
<class name="Child"/>]]></source>
                <p>
                    So we make use of the <i>serialized</i> attribute of &lt;field&gt;. This specification 
                    results in a table like this
                </p>
                <img src="../../images/orm/serialised_map_db.jpg" alt=""/><br/>
                <p>
                    Provisos to bear in mind are
                </p>
                <ul>
                    <li>Queries cannot be performed on maps stored as serialised.</li>
                </ul>
                <p>
                    There are some other combinations of MetaData tags that result in serialising of the whole 
                    map in the same way. These are as follows
                </p>
                <ul>
                    <li><b>Map&lt;non-<i>persistable</i>, non-<i>persistable</i>&gt;, and 
                        no &lt;join&gt; is specified.</b>
                        Since the keys/values don't have a table of their own, the only option is to serialise 
                        the whole map and it appears as a single BLOB field in the table of the main class.</li>
                    <li><b>Map&lt;non-<i>persistable</i>, <i>persistable</i>&gt;, with 
                        "embedded-value" set to <u>true</u>
                        and no &lt;join&gt; is specified.</b> Since the keys/values are embedded and there is 
                        no join table, then the whole map is serialised as above.</li>
                </ul>
                <p>See also :-</p>
                <ul>
                    <li><a href="../metadata_xml.html#map">MetaData reference for &lt;map&gt; element</a></li>
                    <li><a href="../annotations.html#Key">Annotations reference for @Key</a></li>
                    <li><a href="../annotations.html#Value">Annotations reference for @Value</a></li>
                    <li><a href="../annotations.html#Serialized">Annotations reference for @Serialized</a></li>
                </ul>
            </subsection>

            <a name="MapKeysValues"/>
            <subsection name="Serialised Map Keys/Values">
                <table><tr><td>Applicable to RDBMS</td></tr></table>
                <p>
                    Maps are usually persisted by way of a <i>join table</i>, or very occasionaly using a 
                    <i>foreign-key</i> in the value table. In the join table case you have the option of 
                    serialising the keys and/or the values each into a single (BLOB) column in the join table. 
                    This is performed in a similar way to serialised elements for collections, but this time 
                    using the "serialized-key", "serialized-value" attributes. We take the example in the 
                    previous section, with "a classroom of children" and the children stored in a map field. 
                    This time we want to serialise the child object into the join table of the map
                </p>
                <source><![CDATA[
<class name="ClassRoom">
    <field name="level">
        <column name="LEVEL"/>
    </field>
    <field name="children" table="CLASS_CHILDREN">
        <map key-type="java.lang.String" value-type="Child" serialized-value="true"/>
        <join column="CLASSROOM_ID"/>
        <key column="ALIAS"/>
        <value column="CHILD"/>
    </field>
</class>
<class name="Child"/>]]></source>
                <p>
                    So we make use of the <i>serialized-value</i> attribute of &lt;map&gt;. 
                    This results in a schema like this
                </p>
                <img src="../../images/orm/serialised_map_value_db.jpg" alt=""/><br/>
                <p>
                    Provisos to bear in mind are
                </p>
                <ul>
                    <li>Queries cannot be performed on map keys/values stored as serialised.</li>
                </ul>
                <p>See also :-</p>
                <ul>
                    <li><a href="../metadata_xml.html#map">MetaData reference for &lt;map&gt; element</a></li>
                    <li><a href="../metadata_xml.html#join">MetaData reference for &lt;join&gt; element</a></li>
                    <li><a href="../metadata_xml.html#key">MetaData reference for &lt;key&gt; element</a></li>
                    <li><a href="../metadata_xml.html#value">MetaData reference for &lt;value&gt; element</a></li>
                    <li><a href="../annotations.html#Key">Annotations reference for @Key</a></li>
                    <li><a href="../annotations.html#Value">Annotations reference for @Value</a></li>
                </ul>
                <br/>
            </subsection>

            <a name="PC"/>
            <subsection name="Serialised persistable Fields">
                <table><tr><td>Applicable to RDBMS, HBase, MongoDB</td></tr></table>
                <p>
                    A field that is a <i>persistable</i> object is typically stored as a foreign-key 
                    relation between the container object and the contained object. In some situations it is 
                    not necessary that the contained object has an identity of its own, and for efficiency of 
                    access the contained object is required to be stored in a BLOB column in the containing 
                    object's datastore table. Let's take an example. We have the following classes
                </p>
                <img src="../../images/orm/serialised_pc_class.jpg" alt=""/><br/>
                <p>
                    and we want the <i>teacher</i> object to be serialised into a single column in the table
                    storing the <b>ClassRoom</b> class, so we define our MetaData like this
                </p>
                <source><![CDATA[
<class name="ClassRoom">
    <field name="level">
        <column name="LEVEL"/>
    </field>
    <field name="teacher" serialized="true">
        <column name="TEACHER"/>
    </field>
</class>]]></source>
                <p>
                    So we make use of the <i>serialized</i> attribute of &lt;field&gt;. 
                    This specification results in a table like this
                </p>
                <img src="../../images/orm/serialised_pc_db.jpg" alt=""/><br/>
                <p>
                    Provisos to bear in mind are
                </p>
                <ul>
                    <li>Queries cannot be performed on persistable objects stored as serialised.</li>
                </ul>
            </subsection>

            <a name="Reference"/>
            <subsection name="Serialised Reference (Interface/Object) Fields">
                <table><tr><td>Applicable to RDBMS</td></tr></table>
                <p>
                    A reference (Interface/Object) field is typically stored as a foreign-key relation between 
                    the container object and the contained implementation of the reference. In some situations 
                    it is not necessary that the contained object has an identity of its own, and for 
                    efficiency of access the contained object is required to be stored in a BLOB column in the 
                    containing object's datastore table. Let's take an example using an interface field. 
                    We have the following classes
                </p>
                <img src="../../images/orm/serialised_intf_class.jpg" alt=""/><br/>
                <p>
                    and we want the <i>teacher</i> object to be serialised into a single column in the table
                    storing the <b>ClassRoom</b> class, so we define our MetaData like this
                </p>
                <source><![CDATA[
<class name="ClassRoom">
    <field name="level">
        <column name="LEVEL"/>
    </field>
    <field name="teacher" serialized="true">
        <column name="TEACHER"/>
    </field>
</class>
<class name="Teacher">
</class>]]></source>
                <p>
                    So we make use of the <i>serialized</i> attribute of &lt;field&gt;. 
                    This specification results in a table like this
                </p>
                <img src="../../images/orm/serialised_intf_db.jpg" alt=""/><br/>
                <p>
                    Provisos to bear in mind are
                </p>
                <ul>
                    <li>Queries cannot be performed on Reference (Interface/Object) fields stored as 
                        serialised.</li>
                </ul>
                <p>See also :-</p>
                <ul>
                    <li><a href="../metadata_xml.html#implements">MetaData reference for &lt;implements&gt; 
                        element</a></li>
                    <li><a href="../annotations.html#Serialized">Annotations reference for @Serialized</a></li>
                </ul>
            </subsection>

            <a name="LocalFile"/>
            <subsection name="Serialised Field to Local File">
                <table><tr><td>Applicable to RDBMS</td></tr></table>
                <p>
                    If you have a non-relation field that implements Serializable you have the option of serialising
                    it into a file on the local disk. This could be useful where you have a large file and don't want
                    to persist very large objects into your RDBMS. Obviously this will mean that the field is no
                    longer queryable, but then if its a large file you likely don't care about that. So let's give an
                    example
                </p>
<source><![CDATA[
@PersistenceCapable
public class Person
{
    @PrimaryKey
    long id;

    @Persistent
    @Extension(vendorName="datanucleus", key="serializeToFileLocation"
        value="person_avatars")
    AvatarImage image;
}]]></source>
                <p>
                    Or using XML
                </p>
                <source><![CDATA[
<class name="Person">
    ...
    <field name="image" persistence-modifier="persistent">
        <extension vendor-name="datanucleus" key="serializeToFileLocation"
            value="person_avatars"/>
    </field>
</class>]]></source>
                <p>
                    So this will now persist a file into a folder <i>person_avatars</i> with filename as the String
                    form of the identity of the owning object. In a real world example you likely will specify the
                    extension value as an absolute path name, so you can place it anywhere in the local disk.
                </p>
            </subsection>
        </section>

    </body>
</document>