<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JDO Arrays</title>
    </properties>

    <body>
        <section name="JDO : Array fields">
            <p>
                JDO allows implementations to <u>optionally</u> support the persistence of arrays. DataNucleus 
                provides full support for arrays in similar ways that collections are supported. 
                DataNucleus supports persisting arrays as
            </p>
            <ul>
                <li><a href="#singlecolumn">Single Column</a> - the array is byte-streamed into a single column 
                    in the table of the containing object.</li>
                <li><a href="#serialised">Serialised</a> - the array is serialised into single column in the 
                    table of the containing object.</li>
                <li><a href="#join">Using a Join Table</a> - where the array relation is persisted into the 
                    join table, with foreign-key links to an element table where the elements of the array are 
                    <i>PersistenceCapable</i></li>
                <li><a href="#fk">Using a Foreign-Key in the element</a> - only available where the array is of 
                    a <i>PersistenceCapable</i> type</li>
            </ul>
            <table>
                <tr>
                    <td>JDO has no simple way of detecting <i>changes</i> to an arrays contents. To update
                        an array you must either
                        <ul>
                            <li>replace the array field with the new array value</li>
                            <li>update the array element and then call <i>JDOHelper.makeDirty(obj, "fieldName");</i></li>
                        </ul>
                    </td>
                </tr>
            </table>
            <br/>

            <a name="singlecolumn"/>
            <subsection name="Single Column Arrays">
                <p>
                    Let's suppose you have a class something like this
                </p>
                <img src="../../images/orm/array_serialised_class.gif" border="0" alt=""/>
                <p>
                    So we have an <b>Account</b> and it has a number of permissions, each expressed as a byte. We 
                    want to persist the permissions in a single-column into the table of the account (but we don't 
                    want them serialised). We then define MetaData something like this
                </p>
                <source><![CDATA[
<class name="Account" identity-type="datastore">
    <field name="firstName">
        <column name="FIRST_NAME" length="100" jdbc-type="VARCHAR"/>
    </field>
    <field name="lastName">
        <column column="LAST_NAME" length="100" jdbc-type="VARCHAR"/>
    </field>
    <field name="permissions" column="PERMISSIONS"/>
</class>]]></source>
                <p>
                    You could have added &lt;array&gt; to be explicit but the type of the field is an array, and 
                    the type declaration also defines the component type so nothing more is needed. This results 
                    in a datastore schema as follows
                </p>
                <img src="../../images/orm/array_serialised_db.gif" border="0" alt=""/>
                <p>
                    DataNucleus supports persistence of the following array types in this way :<i>
                    boolean[], byte[], char[], double[], float[], int[], long[], short[],
                    Boolean[], Byte[], Character[], Double[], Float[], Integer[], Long[], Short[],
                    BigDecimal[], BigInteger[]</i>
                </p>
                <p>See also :-</p>
                <ul>
                    <li><a href="../metadata_xml.html#array">MetaData reference for &lt;array&gt; element</a></li>
                    <li><a href="../annotations.html#Element">Annotations reference for @Element</a></li>
                </ul>
                <br/>
            </subsection>

            <a name="serialised"/>
            <subsection name="Serialised Arrays">
                <p>
                    Let's suppose you have a class something like this
                </p>
                <img src="../../images/orm/array_serialised_class.gif" border="0" alt=""/>
                <p>
                    So we have an <b>Account</b> and it has a number of permissions, each expressed as a byte. 
                    We want to persist the permissions as serialised into the table of the account. We then define 
                    MetaData something like this
                </p>
                <source><![CDATA[
<class name="Account" identity-type="datastore">
    <field name="firstName">
        <column name="FIRST_NAME" length="100" jdbc-type="VARCHAR"/>
    </field>
    <field name="lastName">
        <column column="LAST_NAME" length="100" jdbc-type="VARCHAR"/>
    </field>
    <field name="permissions" serialized="true" column="PERMISSIONS"/>
</class>]]></source>
                <p>
                    That is, you define the field as <b>serialized</b>. To define arrays of short, long, int, or 
                    indeed any other supported array type you would do the same as above. This results in a 
                    datastore schema as follows
                </p>
                <img src="../../images/orm/array_serialised_db.gif" border="0" alt=""/>
                <p>
                    DataNucleus supports persistence of many array types in this way, including :<i>
                    boolean[], byte[], char[], double[], float[], int[], long[], short[],
                    Boolean[], Byte[], Character[], Double[], Float[], Integer[], Long[], Short[],
                    BigDecimal[], BigInteger[], String[], java.util.Date[], java.util.Locale[]</i>
                </p>
                <p>See also :-</p>
                <ul>
                    <li><a href="../metadata_xml.html#field">MetaData reference for &lt;field&gt; element</a></li>
                    <li><a href="../metadata_xml.html#array">MetaData reference for &lt;array&gt; element</a></li>
                    <li><a href="../annotations.html#Persistent">Annotations reference for @Persistent</a></li>
                    <li><a href="../annotations.html#Element">Annotations reference for @Element</a></li>
                    <li><a href="../annotations.html#Serialized">Annotations reference for @Serialized</a></li>
                </ul>
                <br/>
            </subsection>

            <a name="join"/>
            <subsection name="Arrays persisted into Join Tables">
                <p>
                    DataNucleus will support arrays persisted into a join table. Let's take the example above and 
                    make the "permission" a class in its own right, so we have
                </p>
                <img src="../../images/orm/array_jointable_class.gif" border="0" alt=""/>
                <p>
                    So an <b>Account</b> has an array of <b>Permission</b>s, and both of these objects are 
                    <i>PersistenceCapable</i>. We want to persist the relationship using a join table. We define 
                    the MetaData as follows
                </p>
                <source><![CDATA[
<class name="Account" table="ACCOUNT">
    <field name="firstName">
        <column name="FIRST_NAME" length="100" jdbc-type="VARCHAR"/>
    </field>
    <field name="lastName">
        <column column="LAST_NAME" length="100" jdbc-type="VARCHAR"/>
    </field>
    <field name="permissions" table="ACCOUNT_PERMISSIONS">
        <array/>
        <join column="ACCOUNT_ID"/>
        <element column="PERMISSION_ID"/>
        <order column="PERMISSION_ORDER_IDX"/>
    </field>
</class>
<class name="Permission" table="PERMISSION">
    <field name="name"/>
</class>]]></source>
                <p>
                    This results in a datastore schema as follows
                </p>
                <img src="../../images/orm/array_jointable_db.gif" border="0" alt=""/>
                <br/>
                <p>See also :-</p>
                <ul>
                    <li><a href="../metadata_xml.html#array">MetaData reference for &lt;array&gt; element</a></li>
                    <li><a href="../metadata_xml.html#element">MetaData reference for &lt;element&gt; element</a></li>
                    <li><a href="../metadata_xml.html#join">MetaData reference for &lt;join&gt; element</a></li>
                    <li><a href="../metadata_xml.html#order">MetaData reference for &lt;order&gt; element</a></li>
                    <li><a href="../annotations.html#Element">Annotations reference for @Element</a></li>
                    <li><a href="../annotations.html#Order">Annotations reference for @Order</a></li>
                </ul>
                <br/>
            </subsection>

            <a name="fk"/>
            <subsection name="Arrays persisted using Foreign-Keys">
                <p>
                    DataNucleus will support arrays persisted via a foreign-key in the element table. This is only 
                    applicable when the array is of a <i>PersistenceCapable</i> type. Let's take the same example 
                    above. So we have
                </p>
                <img src="../../images/orm/array_foreignkey_class.gif" border="0" alt=""/>
                <p>
                    So an <b>Account</b> has an array of <b>Permission</b>s, and both of these objects are 
                    <i>PersistenceCapable</i>. We want to persist the relationship using a foreign-key in the table 
                    for the Permission class. We define the MetaData as follows
                </p>
                <source><![CDATA[
<class name="Account" table="ACCOUNT">
    <field name="firstName">
        <column name="FIRST_NAME" length="100" jdbc-type="VARCHAR"/>
    </field>
    <field name="lastName">
        <column column="LAST_NAME" length="100" jdbc-type="VARCHAR"/>
    </field>
    <field name="permissions">
        <array/>
        <element column="ACCOUNT_ID"/>
        <order column="ACCOUNT_PERMISSION_ORDER_IDX"/>
    </field>
</class>
<class name="Permission" table="PERMISSION">
    <field name="name"/>
</class>]]></source>
                <p>
                    This results in a datastore schema as follows
                </p>
                <img src="../../images/orm/array_foreignkey_db.gif" border="0" alt=""/>
                <br/>
                <p>See also :-</p>
                <ul>
                    <li><a href="../metadata_xml.html#array">MetaData reference for &lt;array&gt; element</a></li>
                    <li><a href="../metadata_xml.html#element">MetaData reference for &lt;element&gt; element</a></li>
                    <li><a href="../metadata_xml.html#order">MetaData reference for &lt;order&gt; element</a></li>
                    <li><a href="../annotations.html#Element">Annotations reference for @Element</a></li>
                    <li><a href="../annotations.html#Order">Annotations reference for @Order</a></li>
                </ul>
                <br/>
            </subsection>
        </section>

    </body>
</document>