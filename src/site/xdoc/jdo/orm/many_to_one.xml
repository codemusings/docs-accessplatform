<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JDO N-1 Relationships</title>
    </properties>

    <body>
        <section name="JDO : N-1 Relationships">
            <p>
                You have a N-to-1 relationship when an object of a class has an associated object of another class 
                (only one associated object) and several of this type of object can be linked to the same associated 
                object. From the other end of the relationship it is effectively a 1-N, but from the point of view of
                the object in question, it is N-1. You can create the relationship in 2 ways depending on whether the 
                2 classes know about each other (bidirectional), or whether only the "N" side knows about the other 
                class (unidirectional). These are described below.
            </p>
            <br/>

            <a name="uni_join"/>
            <subsection name="Unidirectional (Join Table)">
                <p>
                    For this case you could have 2 classes, <b>User</b> and <b>Account</b>, as below.
                    <br/>
                    <img src="../../images/orm/relationship_1_1_uni_class.jpg" border="0" alt=""/>
                    <br/>
                    so the <b>Account</b> class ("N" side) knows about the <b>User</b> class ("1" side), but not 
                    vice-versa and the relation is stored using a join table. 
                    A particular user could be related to several accounts. 
                    If you define the XML metadata for these classes as follows
                </p>
<source><![CDATA[
<package name="mydomain">
    <class name="User" identity-type="datastore">
        ...
    </class>

    <class name="Account" identity-type="datastore">
        ...
        <field name="user" persistence-modifier="persistent">
            <join/>
        </field>
    </class>
</package>]]></source>
                <p>alternatively using annotations</p>
<source><![CDATA[
public class Account
{
    ...

    @Join(table="ACCOUNT_USER")
    User user;
}]]></source>
                <p>
                    For RDBMS this will create 3 tables in the database, one for <b>User</b> (with name <i>USER</i>), 
                    one for <b>Account</b> (with name <i>ACCOUNT</i>), and a join table (with name <i>ACCOUNT_USER</i>)
                    as shown below.
                    <br/>
                    <img src="../../images/orm/relationship_N_1_uni_db.gif" border="0" alt=""/>
                    <br/>
                    <b>Note that in the case of non-RDBMS datastores there is no join-table, simply a "column" in the
                    <i>ACCOUNT</i> "table", storing the "id" of the related object</b>
                </p>
                <p>
                    Things to note :-
                </p>
                <ul>
                    <li>If you wish to specify the names of the database tables and columns for these classes, you can 
                        use the attribute <i>table</i> (on the <b>class</b> element), the attribute <i>name</i> (on 
                        the <b>column</b> element) and the attribute <i>name</i> (on the <b>column</b> attribute under 
                        join</li>
                </ul>
                <br/>
            </subsection>

            <a name="uni_fk"/>
            <subsection name="Unidirectional (ForeignKey)">
                <p>
                    Here you have the same two classes as above but you have a foreign-key in the table of 
                    <i>Account</i>. For this case, just look at the
                    <a href="one_to_one.html#uni">1-1 Unidirectional</a> documentation since it is identical.
                </p>
                <br/>
            </subsection>

            <a name="bi"/>
            <subsection name="Bidirectional">
                <p>
                    This relationship is described in the guide for <a href="one_to_many_collection.html">1-N 
                    relationships</a>. In particular there are 2 ways to define the relationship with RDBMS :
                    the <a href="one_to_many_collection.html#join_bi">first</a> uses a Join Table to hold the 
                    relationship, whilst the <a href="one_to_many_collection.html#fk_bi">second</a> uses a Foreign Key 
                    in the "N" object to hold the relationship.
                    For non-RDBMS datastores each side will have a "column" (or equivalent) in the "table" of the N
                    side storing the "id" of the related (owning) object.
                    Please refer to the 1-N relationships bidirectional relations since they show this exact relationship.
                </p>
            </subsection>
        </section>

    </body>
</document>