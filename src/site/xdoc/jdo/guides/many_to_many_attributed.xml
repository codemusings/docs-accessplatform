<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Guides : M-N Attributed Relation with JDO</title>
    </properties>

    <body>
        <section name="JDO Guides : M-N Attributed Relation">
            <a href="https://sourceforge.net/projects/datanucleus/files/datanucleus-samples/">
                <img src="../../images/download.png" alt="Download" border="0"/>
            </a>
            <a href="https://github.com/datanucleus/samples-jdo/many_to_many_attributed">
                <img src="../../images/source_code.png" alt="Source Code" border="0"/>
            </a>
        
            <p>
                DataNucleus provides support for 
                <a href="../orm/many_to_many.html">standard JDO M-N relations</a> 
                where we have a relation between, for example, <i>Customer</i> and <i>Supplier</i>, where a 
                <i>Customer</i> has many <i>Supplier</i>s and a <i>Supplier</i> has many <i>Customer</i>s. 
                A slight modification on this is where you have the relation carrying some additional attributes
                of the relation. Let's take some classes
            </p>
            <source>
public class Customer
{
    private long id; // PK
    private String name;
    private Set supplierRelations = new HashSet();

    ...
}

public class Supplier
{
    private long id; // PK
    private String name;
    private Set customerRelations = new HashSet();

    ...
}</source>
            <p>
                Now we obviously cant define an "attributed relation" using Java and just these classes so we invent an intermediate
                "associative" class, that will also contain the attributes.
            </p>
            <source>
public class BusinessRelation
{
    private Customer customer; // PK
    private Supplier supplier; // PK
    private String relationLevel;
    private String meetingLocation;

    public BusinessRelation(Customer cust, Supplier supp, String level, String meeting)
    {
        this.customer = cust;
        this.supplier = supp;
        this.relationLevel = level;
        this.meetingLocation = meeting;
    }
    ...
}</source>
            <p>
                So we define the metadata like this
            </p>
            <source><![CDATA[
<jdo>
    <package name="mydomain.business">
        <class name="Customer" detachable="true" table="CUSTOMER">
            <field name="id" primary-key="true" value-strategy="increment" column="ID"/>
            <field name="name" column="NAME"/>
            <field name="supplierRelations" persistence-modifier="persistent" mapped-by="customer">
                <collection element-type="BusinessRelation"/>
            </field>
        </class>

        <class name="Supplier" detachable="true" table="SUPPLIER">
            <field name="id" primary-key="true" value-strategy="increment" column="ID"/>
            <field name="name" column="NAME"/>
            <field name="customerRelations" persistence-modifier="persistent" mapped-by="supplier">
                <collection element-type="BusinessRelation"/>
            </field>
        </class>

        <class name="BusinessRelation" type="application" detachable="true"
             objectid-class="BusinessRelation$PK" table="BUSINESSRELATION">
            <field name="customer" primary-key="true" column="CUSTOMER_ID"/>
            <field name="supplier" primary-key="true" column="SUPPLIER_ID"/>
            <field name="relationLevel" column="RELATION_LEVEL"/>
            <field name="meetingLocation" column="MEETING_LOCATION"/>
        </class>
    </package>
</jdo>]]></source>
            <p>
                So we've used a 1-N "CompoundIdentity" relation between <i>Customer</i> and <i>BusinessRelation</i>, and similarly
                between <i>Supplier</i> and <i>BusinessRelation</i> meaning that <i>BusinessRelation</i> has a composite PK define like this
            </p>
            <source><![CDATA[
public class BusinessRelation
{
    ...

    public static class PK implements Serializable
    {
        public LongIdentity customer; // Use same name as BusinessRelation field
        public LongIdentity supplier; // Use same name as BusinessRelation field

        public PK()
        {
        }

        public PK(String s)
        {
            StringTokenizer st = new StringTokenizer(s, "::");
            this.customer = new LongIdentity(Customer.class, st.nextToken());
            this.supplier = new LongIdentity(Supplier.class, st.nextToken());
        }

        public String toString()
        {
            return (customer.toString() + "::" + supplier.toString());
        }

        public int hashCode()
        {
            return customer.hashCode() ^ supplier.hashCode();
        }

        public boolean equals(Object other)
        {
            if (other != null && (other instanceof PK))
            {
                PK otherPK = (PK)other;
                return this.customer.equals(otherPK.customer) && this.supplier.equals(otherPK.supplier);
            }
            return false;
        }
    }
}]]></source>
            <p>
                This arrangement will result in the following schema
            </p>
            <img src="../../images/jdo/many_to_many_attributed.jpg" border="0" alt="M-N-Attributed"/>
            <p>
                So all we need to do now is persist some objects using these classes
            </p>
            <source>
PersistenceManagerFactory pmf = JDOHelper.getPersistenceManagerFactory("jpox.properties");
PersistenceManager pm = pmf.getPersistenceManager();
Transaction tx = pm.currentTransaction();
Object holderId = null;
try
{
    tx1.begin();

    Customer cust1 = new Customer("Web design Inc");
    Supplier supp1 = new Supplier("DataNucleus Corporation");
    pm.makePersistent(cust1);
    pm.makePersistent(supp1);

    BusinessRelation rel_1_1 = new BusinessRelation(cust1, supp1, "Very Friendly", "Hilton Hotel, London");
    cust1.addRelation(rel_1_1);
    supp1.addRelation(rel_1_1);
    pm.makePersistent(rel_1_1);

    tx.commit();
}
finally
{
    if (tx1.isActive())
    {
        tx1.rollback();
    }
    pm1.close();
}</source>
            <p>
                This will now have persisted an entry in table "CUSTOMER", an entry in table "SUPPLIER", and an entry in 
                table "BUSINESSRELATION". We can now utilise the <i>BusinessRelation</i> objects to update the attributes of the
                M-N relation as we wish.
            </p>
        </section>
    </body>
</document>