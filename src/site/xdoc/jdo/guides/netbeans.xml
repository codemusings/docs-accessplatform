<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>DataNucleus - NetBeans 7.x integration</title>
    </properties>

    <body>
        <section name="DataNucleus and NetBeans 7.0">
            <p>Perhaps the most important step in developing applications with DataNucleus is the enhancement
                of compiled classes. <a href="http://netbeans.org">NetBeans</a> provides a convenient way of 
                integrating this procedure into the build process without the need for any additional tool or plugin. 
                This is possible because NetBeans has native integration with Maven and Ant. Any DataNucleus project
                based on Maven will open and run as is with Netbeans. No changes are needed in the project nor in 
                Netbeans. When using Ant Class enhancement thus becomes a simple matter of adding a new task to the 
                existing <b>build.xml</b> generated by NetBeans.
            </p>
            <p> This tutorial shows how to integrate DataNucleus with NetBeans 7.0 to simplify the development of 
                JDO applications. <b>Please contribute any updates to this guide that you have since the developers 
                of DataNucleus don't use Netbeans</b> 
            </p>

            <subsection name="Requirements">
                <p> The following components are required to complete this tutorial successfully: </p>
                <ul>
                    <li><a href="http://sourceforge.net/projects/datanucleus/files/datanucleus-accessplatform/">DataNucleus AccessPlatform</a></li>
                    <li><a href="http://sourceforge.net/projects/datanucleus/files/datanucleus-samples/">DataNucleus Samples</a></li>
                    <li><a href="http://netbeans.org/downloads/index.html">NetBeans</a></li>
                    <li><a href="http://sourceforge.net/projects/hsqldb/files/">Hsqldb</a></li>
                </ul>
                <br/>
            </subsection>

            <subsection name="Working with Maven-based DataNucleus Project">
                <p>NetBeans has native integration with Maven. If your project builds with Maven then it will also 
                    build with NetBeans without any change. Unzip the sample project to 
                    <i>$home/DNSamples/datanucleus-samples-jdo-tutorial-3.0</i>
                </p>
                <p>The sample project comes with a pom.xml. When you try to open this project NetBeans will 
                    automatically detect it as maven project.
                </p>
                <p>Start Netbeans</p>
                <img src="../../images/netbeans/starting_netbeans.png" alt="Start NetBeans"/>
                <p><b>Open Maven Project</b></p>
                <img src="../../images/netbeans/open_project.png" alt="Open Maven Project"/><br/>

                <p><b>Clean Build the project</b></p>
                <img src="../../images/netbeans/maven_clean_build.png" alt="Maven Clean Build"/><br/>
                <p>You will see a success message as below</p>
                <source><![CDATA[
------------------------------------------------------------------------
BUILD SUCCESS
------------------------------------------------------------------------
Total time: 5.406s
Finished at: Fri Aug 05 09:23:53 IST 2011
Final Memory: 14M/108M
------------------------------------------------------------------------]]></source><br/>
                <p><b>Run Main Class</b></p>
                <img src="../../images/netbeans/maven_run_main.png" alt="Run Maven Project"/>
                <p>The results can be seen in the output window</p>
                <source><![CDATA[
DataNucleus AccessPlatform with JDO
===================================
Persisting products
Product and Book have been persisted

Retrieving Extent for Products
>>  Book : JRR Tolkien - Lord of the Rings by Tolkien
>>  Product : Sony Discman [A standard discman from Sony]

Executing Query for Products with price below 150.00
>>  Book : JRR Tolkien - Lord of the Rings by Tolkien

Deleting all products from persistence
Deleted 2 products

End of Tutorial
------------------------------------------------------------------------
BUILD SUCCESS
------------------------------------------------------------------------
Total time: 6.221s
Finished at: Fri Aug 05 09:27:43 IST 2011
Final Memory: 7M/106M
------------------------------------------------------------------------]]></source><br/>
            </subsection>

            <subsection name="Setting up NetBeans for DataNucleus ANT use">
                <p>The first thing to do is to register the DataNucleus components in the <b>Library Manager</b> of 
                    NetBeans 7 so that these become available to any project created with the IDE. This involves 
                    creating a new library and adding the JAR files to it, as shown in the following screenshots
                </p>
                <p><b>Open Library Manager</b></p>
                <img src="../../images/netbeans/ant_library.png" alt="LibraryManager"/><br/>
                <p><b>Add New Library with Name DN3</b> - Repeat the process for DN3Deps</p>
                <img src="../../images/netbeans/library_manager.png" alt="Add DN3"/><br/>
                <p><b>Add all the libraries</b> under <i>$home/datanucleus-accessplatform-full-deps-3.0.0-release/lib</i>
                    to DN3. Add all the libraries under <i>$home/datanucleus-accessplatform-full-deps-3.0.0-release/deps</i>
                    to DN3Deps</p>
                <img src="../../images/netbeans/library_manager.png" alt="LibraryManger"/><br/>
                <p>Once this is done, the NetBeans 7 will add the JAR files to the classpath whenever the
                    newly-created DN3 and DN3Deps library is selected for a project.</p><br/>
            </subsection>

            <subsection name="Setting up a new project">
                <p>Delete pom.xml from the downloaded samples project. NetBeans treats any folder with
                    pom.xml as maven project. Copy the datanucleus.properties to src/java in the downloaded 
                    samples project.</p>
                <p><b>Now create a new project from existing sources.</b></p>
                <img src="../../images/netbeans/ant_new_project.png" alt="Ant New Project"/><br/>
                <p>Remember to Select <b>Java Project with Existing Source</b></p>
                <img src="../../images/netbeans/new_project.png" alt="New Project"/><br/>
                <p><b>Click Next and Add Folder</b>. The source folder should point to
                   <i>datanucleus-samples-jdo-tutorial-3.0/src/java</i></p>
                <img src="../../images/netbeans/new_java_project_existing_sources.png" alt="select src folder"/><br/>
                <p><b>Then click Next and Finish</b></p>
                <p>Now we have the sucessfuly created the sample project using Ant</p>
                <img src="../../images/netbeans/netbeans_ide_7.png" alt="Ant Project Created"/><br/>
                <p><b>Add the Libraries</b> created in first set to this project. Right-Click on Libraries in the Projects Tab</p>
                <img src="../../images/netbeans/ant_add_libraries.png" alt="Ant Add library"/><br/>
                <p><b>Add DN3 library</b> to your project. Also add DN3Deps</p>
                <img src="../../images/netbeans/add_library.png" alt="Add DN3"/><br/>
                <p>We also need to <b>add JDBC support to our project</b>. Add this using add Add jars option.
                    Right-Click on Libraries in the Projects Tab and select Add jars</p>
                <img src="../../images/netbeans/ant_add_jar.png" alt="Add Jar"/><br/>
                <p>Add hsqldb</p>
                <img src="../../images/netbeans/add_jar_folder.png" alt="add jdbc"/><br/>
            </subsection>

            <subsection name="Enhancing the classes">
                <p>The enhancement process needs to be defined and integrated into the build process. As
                    stated in the introduction, this requires a simple change to the <i>nbbuild.xml</i> file.</p>
                <p><b>TypeSafe Queries :-</b> Datanucleus generates addtional code for supporting type
                    safe queries. Ensure that "Enable Annotation processing" check box is selected, which is
                    under Project Properties | build | compiling </p>
                <p>Click on the <b>Files</b> tab, expand the project tree, then open <i>nbbuild.xml</i></p>
                <img src="../../images/netbeans/sample_ant_netbeans.png" alt="Locate Build File"/><br/>
                <p>Override the <b> -post-compile </b> task/target with the following Ant instructions. </p>
                <source><![CDATA[
<target name="-post-compile" depends="init">
    <path id="module.enhancer.classpath">
        <pathelement path="${javac.classpath}"/>
        <pathelement location="${build.classes.dir}"/>
    </path>
    <taskdef name="datanucleusenhancer" classpathref="module.enhancer.classpath" classname="org.datanucleus.enhancer.EnhancerTask"/>
    <echo message="start datanucleusenhancer"/>
    <datanucleusenhancer classpathref="module.enhancer.classpath" dir="${build.classes.dir}" verbose="true">
        <fileset dir="${build.classes.dir}">
            <include name="**/*.class"/>
        </fileset>
    </datanucleusenhancer>
    <echo message="end datanucleusenhancer"/>
</target>]]></source><br/>
                <p>This target is the most convenient for enhancing classes because it occurs just after
                    all classes have been compiled and is called in any case, whether the project is being built,
                    tested or deployed. This ensures that classes are always enhanced.
                    <b>Ensure that the Compile on Save option is turned off.</b> 
                    <b>Enable Annotation Processing should be turned ON</b></p>
                <img src="../../images/netbeans/project_properties_ant.png" alt="Project Properties" /><br/>
            </subsection>

            <subsection name="Building the project">
                <p>The project can now be built, with the knowledge that the classes will be enhanced in
                    the process.</p>
                <img src="../../images/netbeans/ant_clean_build.png" alt="ant clean and build"/><br/>
                <p>Output window will show some thing similar to this</p>
                <source><![CDATA[
BUILD SUCCESSFUL (total time: 2 seconds)

Run the main class
The output window will show as below

Product and Book have been persisted

Retrieving Extent for Products
>>  Book : JRR Tolkien - Lord of the Rings by Tolkien
>>  Product : Sony Discman [A standard discman from Sony]

Executing Query for Products with price below 150.00
>>  Book : JRR Tolkien - Lord of the Rings by Tolkien

Deleting all products from persistence
Deleted 2 products

End of Tutorial
BUILD SUCCESSFUL (total time: 2 seconds)]]></source><br/>
            </subsection>
            
            <subsection name="Conclusion">
                <p>This concludes our tutorial on how to integrate DataNucleus with NetBeans 7. As can be seen, 
                    thanks to NetBeans project system based on Ant and Native Maven support, development of JDO 
                    applications is largely simplified. 
                    This tutorial was provided by a user of this software, Kiran Kumar.
                </p>
            </subsection>
        </section>
    </body>
</document>