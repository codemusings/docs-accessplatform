<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Fields or Properties</title>
    </properties>

    <body>
        <section name="JDO : Persistent Fields or Properties">
            <p>
                Now that we have defined the class as persistable we need to define how to persist the different
                fields/properties that are to be persisted. 
                Please note that JDO <b>cannot persist static or final fields</b>.
                There are two distinct modes of persistence definition. 
                The most common uses <b>fields</b>, whereas an alternative uses <b>properties</b>.
            </p>

            <a name="fields"/>
            <subsection name="Persistent Fields">
                <p>
                    The most common form of persistence is where you have a <b>field</b> in a class and want to 
                    persist it to the datastore. With this mode of operation DataNucleus will persist the values 
                    stored in the fields into the datastore, and will set the values of the fields when extracting 
                    it from the datastore.
                </p>
                <table class="infoTable"><tr>
                    <td><img src="../images/lightbulb.png" border="0"/></td>
                    <td>Requirement : you have a field in the class. This can be public, protected, private or package access, but cannot be static or final.</td>
                </tr></table>
                <b>
                    Almost all Java field types are default persistent (if DataNucleus knows how to persist a type then it defaults to persistent) 
                    so there is no real need to specify @Persistent to make the field persistent.
                </b>
                <p>
                    An example of how to define the persistence of a field is shown below
                </p>
                <source>
@PersistenceCapable
public class MyClass
{
    @Persistent
    Date birthday;

    @NotPersistent
    String someOtherField;
}</source>
                <p>
                    So, using annotations, we have marked the field <i>birthday</i> as persistent, whereas 
                    field <i>someOtherField</i> is not persisted.
                    <i>Please note that in this particular case, Date is by default persistent so we
                    could omit the @Persistent annotation</i> (with non-default-persistent types we would definitely
                    need the annotation). Using XML MetaData we would have done
                </p>
                <source><![CDATA[
<class name="MyClass">
    <field name="birthday" persistence-modifier="persistent"/>
    <field name="someOtherField" persistence-modifier="none"/>
</class>]]></source>
                <p>
                    Please note that the field Java type defines whether it is, by default, persistable.
                    Look at the <a href="types.html">Types Guide</a> and if the type has a tick in the column
                    "Persistent?" then you don't need to mark the <i>persistence-modifier</i> as "persistent".
                </p>
                <br/>
            </subsection>

            <a name="properties"/>
            <subsection name="Persistent Properties">
                <p>
                    A second mode of operation is where you have Java Bean-style getter/setter for a <b>property</b>. 
                    In this situation you want to persist the output from <i>getXXX</i> to the datastore, and use the 
                    <i>setXXX</i> to load up the value into the object when extracting it from the datastore.
                </p>
                <table class="infoTable"><tr>
                    <td><img src="../images/lightbulb.png" border="0"/></td>
                    <td>Requirement : you have a property in the class with Java Bean getter/setter methods. These 
                    methods can be public, protected, private or package access, but cannot be static. The class 
                    must have BOTH getter AND setter methods.</td>
                </tr></table>
                <p>
                    An example of how to define the persistence of a property is shown below
                </p>
                <source>
@PersistenceCapable
public class MyClass
{
    @Persistent
    Date getBirthday()
    {
        ...
    }

    void setBirthday(Date date)
    {
        ...
    }
}</source>
                <p>
                    So, using annotations, we have marked this class as persistent, and the getter is marked as
                    persistent.  By default a property is non-persistent, so we have no need in specifying the
                    <i>someOtherField</i> as not persistent. Using XML MetaData we would have done
                </p>
                <source><![CDATA[
<class name="MyClass">
    <property name="birthday" persistence-modifier="persistent"/>
</class>>]]></source>
                <br/>
            </subsection>

            <a name="override"/>
            <subsection name="Overriding Superclass Field/Property MetaData">
                <p>
                    If you are using XML MetaData you can also override the MetaData for fields/properties of
                    superclasses. You do this by adding an entry for <i>{class-name}.fieldName</i>, like this
                </p>
                <source><![CDATA[
<class name="Hotel" detachable="true">
    ...
    <field name="HotelSuperclass.someField" default-fetch-group="false"/>
]]></source>
                <p>
                    so we have changed the field "someField" specified in the persistent superclass "HotelSuperclass"
                    to not be part of the DFG.
                </p>
                <br/>
            </subsection>

            <a name="columnposition"/>
            <subsection name="Field/Property positioning">
                <p>
                    With some datastores (notably spreadsheets) it is desirable to be able to specify the relative
                    position of a column. The default (for DataNucleus) is just to put them in ascending alphabetical order.
                    JDO allows definition of this using the <i>position</i> attribute on a <b>column</b>.
                    Here's an example, using XML metadata
                </p>
    
                <source><![CDATA[
<jdo>
    <package name="mydomain">
        <class name="Person" detachable="true" table="People">
            <field name="personNum">
                <column position="0"/>
            </field>
            <field name="firstName">
                <column position="1"/>
            </field>
            <field name="lastName">
                <column position="2"/>
            </field>
        </class>
    </package>
</jdo>]]></source>
                <p>
                    and with Annotations
                </p>
                <source>
@PersistenceCapable(table="People")
public class Person
{
    @Column(position=0)
    long personNum;

    @Column(position=1)
    String firstName;

    @Column(position=2)
    String lastName;
}</source>
                <br/>
            </subsection>
            
            <a name="readonly"/>
            <subsection name="Making a field/property read-only">
                <img src="../images/nucleus_extension.gif" border="0" alt=""/>
                <p>
                    If you want to make a member read-only you can do it like this.
                </p>
<source><![CDATA[
<jdo>
    <package name="mydomain">
        <class name="MyClass">
            <field name="myField">
                <extension vendor-name="datanucleus" key="insertable" value="false"/>
                <extension vendor-name="datanucleus" key="updateable" value="false"/>
            </field>
        </class>
    </package>
</jdo>]]></source>
                <p>
                    and with Annotations
                </p>
<source><![CDATA[
@PersistenceCapable
public class MyClass
{
    @Extension(vendorName="datanucleus", key="insertable", value="false")
    @Extension(vendorName="datanucleus", key="insertable", value="false")
    String myField;

}]]></source>
                <p>
                    alternatively using a DataNucleus convenience annotation
                </p>
<source><![CDATA[
import org.datanucleus.api.jdo.annotations.ReadOnly;

@PersistenceCapable
public class MyClass
{
    @ReadOnly
    String myField;

}]]></source>
                <br/>
            </subsection>
            
        </section>
    </body>
</document>