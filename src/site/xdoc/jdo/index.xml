<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JDO</title>
    </properties>

    <body>
        <section name="Java Data Objects (JDO)">
            <p>
                <img align="right" alt="jdo" src="../images/jdo.gif"/>
                JDO defines an interface (or API) to persist normal Java objects (or POJO's in some peoples 
                terminology) to a datastore. JDO doesn't define the type of datastore. It is <b>datastore-agnostic</b>.
                You would use the same interface to persist your Java object to RDBMS, or OODBMS, or XML, or whatever 
                form of data storage. JDO is a <i>standard</i>. JDO1 has been in existence since 2002, whilst 
                JDO2 was approved in early 2005 and there have been 2 revisions, and a major version since. 
                JDO defines the interface that an implementation has to implement.
                DataNucleus Data Access Platform is <i>an implementation</i> of the JDO interface specification(s) 
                (JDO1, JDO2, JDO2.1, JDO2.2, JDO3). There are other implementations. 
                The whole point of having a <i>standard</i> interface is that users can, in principle, swap between
                implementations of JDO without changing their code.
            </p>
            <p>
                JDO has the following principal areas.
            </p>
            <ul>
                <li>JDO categorises classes into <a href="http://db.apache.org/jdo/class_types.html">3 types</a>. 
                    The type of your class defines how it interacts with JDO. Some classes have no interaction with JDO, 
                    whilst others require you to define their behaviour under JDO. The first thing you do with
                    any JDO-enabled application is provide the <a href="class_mapping.html">Persistence Definition</a></li>
                <li>If your datastore is an RDBMS, you now need to define the 
                    <a href="orm/index.html">Object-Relational Mapping (ORM)</a></li>
                <li>Now you are ready to utilise the <a href="api.html">JDO API</a> for persisting and retrieving your 
                    objects. This is performed using a <a href="pmf.html">PersistenceManagerFactory</a>/
                    <a href="pm.html">PersistenceManager</a>.
                    The persistence of Java objects results in changes to the lifecycle state of the objects.</li>
                <li><a href="query.html">Querying your objects</a> in the datastore.</li>
            </ul>
            <p>
                <a href="http://db.apache.org/jdo">Apache JDO</a> is the project controlling the direction of the
                JDO standard and, as such, is the place to go for information specific to the standard API.
            </p>
            <p>
                You could also download a 
                <a href="http://www.orientechnologies.com/docs/JavaDataObjects-RobinRoos-1.0.pdf" target="_blank">Free JDO1 book</a>
                and do some reading.
            </p>
            <p>
                This release of DataNucleus AccessPlatform requires JDO2.3, which is not yet released. You can
                find a snapshot of this (built from Apache JDO SVN) included in the AccessPlatform download, or on 
                our Maven2 repository
            </p>
        </section>

    </body>
</document>