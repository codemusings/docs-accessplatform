<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>DataNucleus Auto-Start</title>
    </properties>

    <body>
        <section name="JDO : Automatic Startup">
            <img src="../images/nucleus_extension.gif" border="0" alt=""/>
            <p>
                By default with JDO implementations when you open a <i>PersistenceManagerFactory</i> and obtain a
                <i>PersistenceManager</i> DataNucleus knows nothing about which classes are to be persisted to 
                that datastore. JDO implementations only load the Meta-Data for any class when the class is first 
                enlisted in a <i>PersistenceManager</i> operation. For example you call <i>makePersistent</i> on 
                an object. The first time a particular class is encountered DataNucleus will dynamically load the 
                Meta-Data for that class. This typically works well since in an application in a particular 
                operation the <i>PersistenceManagerFactory</i> may well not encounter all classes that are 
                persistable to that datastore. The reason for this dynamic loading is that JDO implementations 
                can't be expected to scan through the whole Java CLASSPATH for classes that could be persisted 
                there. That would be inefficient.
            </p>
            <p>
                There are situations however where it is desirable for DataNucleus to have knowledge about what is to 
                be persisted, or what subclasses of a candidate are possible on executing a query, so that it can load 
                the Meta-Data at initialisation of the persistence factory and hence when the classes are encountered 
                for the first time nothing needs doing. There are several ways of achieving this
            </p>
            <ul>
                <li>Define your classes/MetaData in a <a href="pmf.html#persistenceunit">Persistence Unit</a>
                    and when the <i>PersistenceManagerFactory</i> is initialised it loads the persistence
                    unit, and hence the MetaData for the defined classes and mapping files.
                    This is described on the linked page</li>
                <li>Put the <i>package.jdo</i> at the root of the CLASSPATH, containing all classes, and when the 
                    first class is encountered it searches for its metadata, encounters and parses the root 
                    <i>package.jdo</i>, and consequently loads the metadata for all classes</li>
                <li>Use a DataNucleus extension known as <b>Auto-Start Mechanism</b>. 
                    This is set with the persistence property <b>datanucleus.autoStartMechanism</b>. 
                    This can be set to <i>None</i>, <i>XML</i>, <i>Classes</i>, <i>MetaData</i>. 
                    In addition we have <i>SchemaTable</i> for RDBMS datastores. These are described below.</li>
            </ul>
            <br/>

            <subsection name="AutoStartMechanism : None">
                <p>
                    With this property set to "None" DataNucleus will have no knowledge about classes that are to be 
                    persisted into that datastore and so will add the classes when the user utilises them in calls 
                    to the various <i>PersistenceManager</i> methods.
                </p>
                <br/>
            </subsection>

            <subsection name="AutoStartMechanism : XML">
                <p>
                    With <i>XML</i>, DataNucleus stores the information for starting up DataNucleus in an XML file. 
                    This is, by default, located in datanucleusAutoStart.xml in the current working directory. The file name 
                    can be configured using the persistence factory property <b>datanucleus.autoStartMechanismXmlFile</b>.
                    The file is read at startup and DataNucleus loads the classes using this information.
                </p>
                <p>
                    If the user changes their persistence definition a problem can occur when starting up DataNucleus. 
                    DataNucleus loads up its existing data from the XML configuration file and finds that a 
                    table/class required by the this file data no longer exists. There are 3 options for what 
                    DataNucleus will do in this situation. The property <b>datanucleus.autoStartMechanismMode</b> 
                    defines the behaviour of DataNucleus for this situation. 
                </p>
                <ul>
                    <li><b>Checked</b> will mean that DataNucleus will throw an exception and the user will be 
                        expected to manually fix their database mismatch (perhaps by removing the existing tables).</li>
                    <li><b>Quiet</b> (the default) will simply remove the entry from the XML file and continue 
                        without exception.</li>
                    <li><b>Ignored</b> will simply continue without doing anything.</li>
                </ul>
                <p>
                    See the DTD at <a href="http://datanucleus.svn.sourceforge.net/viewvc/datanucleus/platform/core/trunk/src/java/org/datanucleus/store/autostart/datanucleus_autostart_1_0.dtd?revision=10795">this link</a>.
                    A sample file would look something like
                </p>
<source><![CDATA[
<datanucleus_autostart>
    <class name="mydomain.MyClass" table="MY_TABLE_1" type="FCO" version="3.1.1"/>
</datanucleus_autostart>
]]></source>
                <br/>
            </subsection>

            <subsection name="AutoStartMechanism : Classes">
                <p>
                    With <i>Classes</i>, the user provides to the persistence factory the list of classes to 
                    use as the initial list of classes to be persisted. They specify this via the persistence 
                    property <i>datanucleus.autoStartClassNames</i>, specifying the list of classes as 
                    comma-separated. This gives DataNucleus a head start meaning that it will not need to 
                    "discover" these classes later.
                </p>
                <br/>
            </subsection>

            <subsection name="AutoStartMechanism : MetaData">
                <p>
                    With <i>MetaData</i>, the user provides to the persistence factory the list of metadata 
                    files to use as the initial list of classes to be persisted. They specify this via the 
                    persistence property <i>datanucleus.autoStartMetaDataFiles</i>, specifying the list of 
                    metadata files as comma-separated. This gives DataNucleus a head start meaning that it
                    will not need to "discover" these classes later.
                </p>
                <br/>
            </subsection>

            <subsection name="AutoStartMechanism : SchemaTable (RDBMS only)">
                <p>
                    <b>When using an RDBMS datastore</b> the <i>SchemaTable</i> auto-start mechanism stores the list 
                    of classes (and their tables, types and version of DataNucleus) in a datastore table 
                    <b>NUCLEUS_TABLES</b>. This table is read at startup of DataNucleus, and provides DataNucleus 
                    with the necessary knowledge it needs to continue persisting these classes. 
                    This table is continuously updated during a session of a DataNucleus-enabled application.
                </p>
                <p>
                    If the user changes their persistence definition a problem can occur when starting up DataNucleus. 
                    DataNucleus loads up its existing data from NUCLEUS_TABLES and finds that a table/class 
                    required by the NUCLEUS_TABLES data no longer exists. There are 3 options for what DataNucleus 
                    will do in this situation. The property <b>datanucleus.autoStartMechanismMode</b> defines the 
                    behaviour of DataNucleus for this situation. 
                </p>
                <ul>
                    <li><b>Checked</b> will mean that DataNucleus will throw an exception and the user will be 
                        expected to manually fix their database mismatch (perhaps by removing the existing tables).</li>
                    <li><b>Quiet</b> (the default) will simply remove the entry from NUCLEUS_TABLES and continue without exception.</li>
                    <li><b>Ignored</b> will simply continue without doing anything.</li>
                </ul>
                <p>
                    The default database schema used the <i>SchemaTable</i> is described below:
                </p>
<source>
TABLE : NUCLEUS_TABLES
(
    COLUMN : CLASS_NAME VARCHAR(128) PRIMARY KEY,  -- Fully qualified persistent Class name
    COLUMN : TABLE_NAME VARCHAR(128),              -- Table name
    COLUMN : TYPE VARCHAR(4),                      -- FCO | SCO
    COLUMN : OWNER VARCHAR(2),                     -- 1 | 0
    COLUMN : VERSION VARCHAR(20),                  -- DataNucleus version
    COLUMN : INTERFACE_NAME VARCHAR(255)           -- Fully qualified persistent Class type 
                                                   -- of the persistent Interface implemented
)</source>
                <p>
                    If you want to change the table name (from NUCLEUS_TABLES) you can set the persistence property
                    <i>datanucleus.rdbms.schemaTable.tableName</i>
                </p>
                <br/>
            </subsection>
        </section>
    </body>
</document>
