<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JDO Metadata Overview</title>
    </properties>
    <body>
        <section name="JDO : Metadata Overview">
            <p>
                JDO requires a definition of how to persist classes by way of Metadata. This Metadata can be provided in the following forms
            </p>
            <img src="../images/jdo/metadata.png" border="0"/>
            <p>
                So you can provide the metadata via <a href="annotations.html">annotations</a> solely, or via <a href="annotations.html">annotations</a> plus XML overrides for ORM, or
                via <a href="metadata_xml.html">JDO XML Metadata</a> solely, or via <a href="metadata_xml.html">JDO XML Metadata</a> plus XML overrides for ORM, or finally
                via a <a href="metadata_api.html">Metadata API</a>. If you are using XML overrides for ORM, this definition will be merged in to the 
                base definition (annotations or JDO XML Metadata). Note that you can utilise annotations for one class, and then JDO XML Metadata for another class should you so wish.
            </p>
            <table>
                <tr>
                    <td>When not using the MetaData API we recommend that you use either XML or annotations for the basic persistence information, but always use XML for 
                    ORM information. This is because it is liable to change at deployment time and hence is accessible when in XML form whereas in annotations you add an 
                    extra compile cycle (and also you may need to deploy to some other datastore at some point, hence needing a different deployment).</td>
                </tr>
            </table>

            <subsection name="JDO XML Metadata">
                <p> 
                    JDO expects the XML metadata to be specified in a file or files in particular locations in the CLASSPATH. 
                    For example, if you have a class <i>com.mycompany.sample.MyExample</i>, JDO will look for any of the following 
                    resources until it finds one (in the order stated) :-
                </p>
                <source>
META-INF/package.jdo
WEB-INF/package.jdo
package.jdo
com/package.jdo
com/mycompany/package.jdo
com/mycompany/sample/package.jdo
com/mycompany/sample/MyExample.jdo</source>
                <p>
                    In addition to the above, you can split your metadata definitions between JDO XML MetaData files. 
                    For example if you have the following classes
                </p>
                <source>
com/mycompany/A.java
com/mycompany/B.java
com/mycompany/C.java
com/mycompany/app1/D.java
com/mycompany/app1/E.java</source>
                <p> 
                    You could define the metadata for these 5 classes in many ways -- for example put all
                    class definitions in <b>com/mycompany/package.jdo</b>, or put the definitions for D and E in 
                    <b>com/mycompany/app1/package.jdo</b> and the definitions for A, B, C in 
                    <b>com/mycompany/package.jdo</b>, or have some in their class named MetaData files e.g 
                    <b>com/mycompany/app1/A.jdo</b>, or a mixture of the above. DataNucleus will always 
                    search for the metadata file containing the class definition for the class that it requires. 
                </p>
                <br/>
            </subsection>

            <subsection name="ORM XML Metadata">
                <p> 
                    You can use ORM XML metadata to override particular datastore-specific things like table and column names. 
                    JDO expects any ORM XML metadata to be specified in a file or files in particular locations in the CLASSPATH. 
                    These filenames depend on the <b>javax.jdo.option.mapping</b> persistence property.
                    For example, if you have a class <i>com.mycompany.sample.MyExample</i>, and the persistence property is set to "mysql" then JDO will look for any 
                    of the following resources until it finds one (in the order stated) :-
                </p>
                <source>
META-INF/package-mysql.orm
WEB-INF/package-mysql.orm
package-mysql.orm
com/package-mysql.orm
com/mycompany/package-mysql.orm
com/mycompany/sample/package-mysql.orm
com/mycompany/sample/MyExample-mysql.orm</source>
                <br/>
                <img src="../images/nucleus_extension.gif" border="0" alt=""/>
                <p> 
                    If your application doesn't make use of ORM metadata then you could turn off the searches for ORM Metadata files when a class is loaded up.
                    You do this with the persistence property <b>datanucleus.metadata.supportORM</b> setting it to false.
                </p>
                <br/>
            </subsection>

            <subsection name="XML Metadata validation">
                <img src="../images/nucleus_extension.gif" border="0" alt=""/>
                <p> 
                    By default any XML Metadata (JDO or ORM) will be validated for accuracy when loading it.
                    Obviously XML is defined by a DTD or XSD schema and so should follow that.
                    You can turn off such validations by setting the persistence property <b>datanucleus.metadata.xml.validate</b> to false when creating your PMF.
                    Note that this only turns off the XML strictness validation, and <i>not</i> the checks on inconsistency of specification of relations etc.
                </p>
                <br/>
            </subsection>

            <subsection name="Metadata discovery at class initialisation">
                <img src="../images/nucleus_extension.gif" border="0" alt=""/>
                <p>
                    JDO provides a mechanism whereby when a class is initialised (by the ClassLoader) any PersistenceManagerFactory is notified of its existence, 
                    and its Metadata can be loaded. This is enabled by the enhancement process. 
                    If you decided that you maybe only wanted some classes present in one PMF and other classes present in a different PMF then you can disable 
                    this and leave it to DataNucleus to discover the Metadata when operations are performed on that PMF. 
                    The persistence property to define to disable this is <b>datanucleus.metadata.autoregistration</b> (setting it to false).
                </p>
            </subsection>
        </section>
    </body>
</document>
