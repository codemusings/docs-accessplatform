<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Getting Started</title>
    </properties>

    <body>
        <section name="AccessPlatform : Getting Started">
            <p>
                DataNucleus AccessPlatform implements the JDO and JPA specifications. 
                These specifications define how Java classes can be persisted to a datastore and how they can 
                be queried. By choosing AccessPlatform you can select which of these APIs you feel most
                comfortable with. Time for you to get started and use AccessPlatform!
            </p>
            <subsection name="What is required?">
                <ol>
                    <li>Decide which <a href="datastores/index.html">datastore</a> your project will use, and then
                    <a href="http://www.datanucleus.org/download.html">download DataNucleus AccessPlatform</a></li>
                    <li>Depending on which ZIP you downloaded above, and what add-ons you'll be using you may
                        also need to download some <a href="dependencies.html">dependencies</a></li>
                </ol>
                <p>
                    You now have the necessary components to start investigating use of DataNucleus.
                </p>
            </subsection>

            <subsection name="Starting up">
                <p>
                    <b>Decide which persistence API you want to use.</b> 
                    If you're not familiar with these APIs then the next thing to do is to learn about 
                    <a href="jdo/api.html">JDO</a> and <a href="jpa/api.html">JPA</a>, or alternatively 
                    <a href="rest/api.html">REST</a>. 
                    You need to understand the basic concepts involved. There is plenty of reading on the internet, 
                    starting with the JDO or JPA specifications of course. 
                </p>
                <p>
                    The best thing to do after some reading is to <b>try the JDO Tutorial</b> (for
                    <a href="jdo/samples/tutorial_rdbms.html">RDBMS</a>,
                    <a href="jdo/samples/tutorial_hbase.html">HBase</a>,
                    <a href="jdo/samples/tutorial_mongodb.html">MongoDB</a>,
                    <a href="jdo/samples/tutorial_neo4j.html">Neo4j</a>,
                    <a href="jdo/samples/tutorial_odf.html">ODF</a>,
                    <a href="jdo/samples/tutorial_excel.html">Excel</a>)
                    or <b>try the JPA Tutorial</b> (for
                    <a href="jpa/samples/tutorial_rdbms.html">RDBMS</a>,
                    <a href="jpa/samples/tutorial_hbase.html">HBase</a>,
                    <a href="jpa/samples/tutorial_mongodb.html">MongoDB</a>,
                    <a href="jpa/samples/tutorial_neo4j.html">Neo4j</a>,
                    <a href="jpa/samples/tutorial_odf.html">ODF</a>,
                    <a href="jpa/samples/tutorial_excel.html">Excel</a>).
                    These explain the basic steps of applying JDO/JPA (and DataNucleus) to your own application. 
                    The source code from the tutorials is 
                    <a href="http://www.datanucleus.org/download.html">available for download</a>. 
                    Please download it and start up your development environment with the Tutorial classes and files.
                    Once you have completed the Tutorial you're in a position to <b>apply DataNucleus JDO/JPA to 
                    your own application</b>, and start benefiting from what it offers.
                </p>
                <img src="images/accessplatform_detail.png" border="0" alt="" usemap="#AccessPlatform_Map"/>
                <map name="AccessPlatform_Map" id="ACCESSPLATFORM_MAP">
                    <area href="jdo/api.html" alt="" shape="rect" coords="177,65,240,86"/>
                    <area href="jpa/api.html" alt="" shape="rect" coords="363,65,424,86"/>
                    <area href="rest/api.html" alt="" shape="rect" coords="549,65,610,86"/>
                    <area href="datastores/rdbms.html" alt="" shape="rect" coords="25,143,88,164"/>
                    <area href="datastores/hbase.html" alt="" shape="rect" coords="112,143,156,164"/>
                    <area href="datastores/appengine.html" alt="" shape="rect" coords="163,143,202,164"/>
                    <area href="datastores/neo4j.html" alt="" shape="rect" coords="241,143,285,164"/>
                    <area href="datastores/excel.html" alt="" shape="rect" coords="315,143,350,164"/>
                    <area href="datastores/odf.html" alt="" shape="rect" coords="356,143,384,164"/>
                    <area href="datastores/xml.html" alt="" shape="rect" coords="390,143,416,164"/>
                    <area href="datastores/json.html" alt="" shape="rect" coords="453,143,497,164"/>
                    <area href="datastores/mongodb.html" alt="" shape="rect" coords="552,143,615,164"/>
                    <area href="datastores/neodatis.html" alt="" shape="rect" coords="640,143,695,164"/>
                    <area href="datastores/ldap.html" alt="" shape="rect" coords="701,143,735,164"/>
                </map>
            </subsection>

            <subsection name="Key Points">
                <p>
                    There are some key points to bear in mind when starting using JDO/JPA for java persistence.
                </p>
                <ul>
                    <li>To persist objects of classes you firstly need to <b>define which classes are persistable,
                        and how they are persisted</b>. Start under the 
                        <a href="jdo/class_mapping.html">JDO Class Mapping</a> and 
                        <a href="jpa/class_mapping.html">JPA Class Mapping</a> sections</li>
                    <li>Use of JDO or JPA requires a datastore-controlling factory :
                        <a href="jdo/pmf.html">PersistenceManagerFactory</a> for JDO,
                        <a href="jpa/emf.html">EntityManagerFactory</a> for JPA. You can define many
                        <a href="persistence_properties.html">properties</a> to define the capabilities of this</li>
                    <li>The persistence of objects is controlled by an API. Look under 
                        <a href="jdo/api.html">JDO API</a> and <a href="jpa/api.html">JPA API</a>
                        for more details</li>
                    <li>During the persistence process objects are in different lifecycle states 
                        (<a href="jdo/object_lifecycle.html">JDO</a>, <a href="jpa/object_lifecycle.html">JPA</a>) 
                        and you ought to be aware of what they are</li>
                    <li>You retrieve objects either by their identity, or using a query. With JDO you can
                        use JDOQL, SQL or JPQL query languages. With JPA you can use JPQL or SQL query languages</li>
                </ul>
            </subsection>
        </section>

    </body>
</document>
