<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>AccessPlatform : Persistence Properties</title>
    </properties>

    <body>
        <section name="Persistence Properties">
            <p>
                JDO and JPA with DataNucleus are highly configurable using persistence properties. When
                defining your <i>PersistenceManagerFactory</i> or <i>EntityManagerFactory</i> you have the opportunity
                to control many aspects of the persistence process. DataNucleus is perhaps more configurable than
                any other JDO/JPA implementation in this respect. This section defines the properties available for
                use. Please bear in mind that these properties are only for use with DataNucleus and will not work 
                with other JDO/JPA implementations. <b>All persistence property names are case-insensitive</b>
            </p>
            <ul>
                <li><a href="#datastore">Datastore Definition</a> - datastore properties</li>
                <li><a href="#general">General</a> - general properties</li>
                <li><a href="#schema">Schema Control</a> - properties controlling the generation of the 
                    datastore schema.</li>
                <li><a href="#transaction">Transactions and Locking</a> - properties controlling how 
                    transactions operate</li>
                <li><a href="#cache">Caching</a> - properties controlling the behaviour of the cache(s)</li>
                <li><a href="#validation">Bean Validation</a> - properties controlling bean validation at persist</li>
                <li><a href="#identity">Value Generation</a> - properties controlling the generation of 
                    object identities and field values</li>
                <li><a href="#metadata">MetaData</a> - metadata properties</li>
                <li><a href="#autostart">Auto-Start</a> - Auto-Start Mechanism properties</li>
                <li><a href="#query">Query</a> - properties controlling the behaviour of queries</li>
                <li><a href="#datastorespecific">Datastore-Specific</a> - properties for particular datastores 
                    e.g RDBMS</li>
            </ul>

            <br/>

            <a name="datastore"/>
            <subsection name="Datastore Definition">
                <a name="ConnectionURL"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.ConnectionURL</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>URL specifying the datastore to use for persistence.
                        Note that this will define the <b>type of datastore</b> as well as the datastore
                        itself. Please refer to <a href="datastores/index.html">the datastores guides</a>
                        for the URL appropriate for the type of datastore you're using.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="ConnectionUserName"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.ConnectionUserName</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Username to use for connecting to the DB</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="ConnectionPassword"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.ConnectionPassword</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Password to use for connecting to the DB.
                            See <a href="#ConnectionPasswordDecrypter">datanucleus.ConnectionPasswordDecrypter</a>
                            for a way of providing an encrypted password here</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="ConnectionDriverName"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.ConnectionDriverName</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The name of the (JDBC) driver to use for the DB (for RDBMS only).</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="ConnectionFactory"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.ConnectionFactory</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Instance of a connection factory for <b>transactional</b> connections. 
                            This is an alternative to <b>datanucleus.ConnectionURL</b>.
                            For RDBMS, it must be an instance of javax.sql.DataSource. 
                            See <a href="jdo/datastore_connection.html#datasource">Data Sources</a>.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="ConnectionFactory2"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.ConnectionFactory2</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Instance of a connection factory for <b>nontransactional</b> connections. 
                            This is an alternative to <b>datanucleus.ConnectionURL</b>.
                            For RDBMS, it must be an instance of javax.sql.DataSource.
                            See <a href="jdo/datastore_connection.html#datasource">Data Sources</a>.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="ConnectionFactoryName"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.ConnectionFactoryName</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The JNDI name for a connection factory for <b>transactional</b> connections. 
                            For RBDMS, it must be a JNDI name that points to a javax.sql.DataSource object. 
                            See <a href="jdo/datastore_connection.html#datasource">Data Sources</a>.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="ConnectionFactory2Name"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.ConnectionFactory2Name</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The JNDI name for a connection factory for <b>nontransactional</b> connections. 
                            For RBDMS, it must be a JNDI name that points to a javax.sql.DataSource object. 
                            See <a href="jdo/datastore_connection.html#datasource">Data Sources</a>.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="ConnectionPasswordDecrypter"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.ConnectionPasswordDecrypter</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of a class that implements <i>org.datanucleus.store.connection.DecryptionProvider</i>
                            and should only be specified if the password is encrypted in the persistence properties</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <br/>
            </subsection>

            <a name="general"/>
            <subsection name="General">
                <a name="IgnoreCache"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.IgnoreCache</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to ignore the cache for queries. If the user sets this to <i>true</i> then 
                        the query will evaluate in the datastore, but the instances returned will be formed
                        from the datastore; this means that if an instance has been modified and its datastore
                        values match the query then the instance returned will <b>not</b> be the currently
                        cached (updated) instance, instead an instance formed using the datastore values.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <a name="Multithreaded"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.Multithreaded</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to run the PM/EM multithreaded.
                        <b>Note that this is a hint only to try to allow thread-safe operations on the PM/EM</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <a name="NontransactionalRead"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.NontransactionalRead</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to allow nontransactional reads</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>false | <b>true</b></td>
                    </tr>
                </table>
                <br/>
                <a name="NontransactionalWrite"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.NontransactionalWrite</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to allow nontransactional writes</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>false | <b>true</b></td>
                    </tr>
                </table>
                <br/>
                <a name="Optimistic"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.Optimistic</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to use optimistic transactions 
                            (<a href="jdo/transactions.html#optimistic">JDO</a>, 
                             <a href="jpa/transactions.html#optimistic">JPA</a>).
                        For JDO this defaults to <i>false</i> and for JPA it defaults to <i>true</i></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | false</td>
                    </tr>
                </table>
                <br/>
                <a name="RetainValues"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.RetainValues</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to suppress the clearing of values from persistent instances on transaction
                            completion. With JDO this defaults to false, whereas for JPA it is true</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | false</td>
                    </tr>
                </table>
                <br/>
                <a name="RestoreValues"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.RestoreValues</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether persistent object have transactional field values restored when transaction rollback 
                            occurs.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <a name="Mapping"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.Mapping</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name for the ORM MetaData mapping files to use with this PMF. For example if this is 
                            set to "mysql" then the implementation looks for MetaData mapping files called 
                            "{classname}-mysql.orm" or "package-mysql.orm". If this is not specified then the JDO 
                            implementation assumes that all is specified in the JDO MetaData file.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="Catalog"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.mapping.Catalog</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of the catalog to use by default for all classes persisted using this PMF/EMF.
                            This can be overridden in the MetaData where required, and is optional.
                            DataNucleus will prefix all table names with this catalog name if the RDBMS supports specification
                            of catalog names in DDL.
                            <i>RDBMS datastores only</i></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="Schema"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.mapping.Schema</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of the schema to use by default for all classes persisted using this PMF/EMF.
                            This can be overridden in the MetaData where required, and is optional.
                            DataNucleus will prefix all table names with this schema name if the RDBMS supports specification
                            of schema names in DDL.
                            <i>RDBMS datastores only</i></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="MultiTenancy"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.tenantId</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>String id to use as a discriminator on all persistable class tables to restrict data
                            for the tenant using this application instance 
                            (aka <a href="jdo/multitenancy.html">multi-tenancy via discriminator</a>).
                            <i>RDBMS, MongoDB datastores only</i></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="DetachAllOnCommit"/>
                <table>
                    <tr>
                        <th colspan="2"><b>datanucleus.DetachAllOnCommit</b></th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Allows the user to select that when a transaction is committed all objects enlisted in that
                            transaction will be automatically detached.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <a name="DetachAllOnRollback"/>
                <table>
                    <tr>
                        <th colspan="2"><b>datanucleus.detachAllOnRollback</b></th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Allows the user to select that when a transaction is rolled back all objects 
                            enlisted in that transaction will be automatically detached.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <a name="CopyOnAttach"/>
                <table>
                    <tr>
                        <th colspan="2"><b>datanucleus.CopyOnAttach</b></th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether, when attaching a detached object, we create an attached copy or simply
                            migrate the detached object to attached state</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <a name="AllowAttachOfTransient"/>
                <table>
                    <tr>
                        <th colspan="2"><b>datanucleus.allowAttachOfTransient</b></th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>When you call EM.merge with a transient object (with PK fields set), if you enable this 
							feature then it will first check for existence of an object in the datastore with the
						    same identity and, if present, will merge into that object (rather than just trying
						    to persist a new object).
						    The default for JDO is false, and for JPA is true.
						</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | false</td>
                    </tr>
                </table>
                <br/>
                <a name="attachSameDatastore"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.attachSameDatastore</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>When attaching an object DataNucleus by default assumes that you're attaching to the same
                        datastore as you detached from. DataNucleus does though allow you to attach to a different
                        datastore (for things like replication). Set this to <i>false</i> if you want to attach
                        to a different datastore to what you detached from.
                        This property is also useful if you are attaching and want it to check for existence of the object in the datastore
                        before attaching, and create it if not present (<i>true</i> assumes that the object exists).</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <a name="detachAsWrapped"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.detachAsWrapped</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>When detaching, any mutable second class objects (Collections, Maps, Dates etc)
                            are typically detached as the basic form (so you can use them on client-side
                            of your application). This property allows you to select to detach as
                            wrapped objects. It only works with "detachAllOnCommit" situations (not with
                            detachCopy) currently</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <a name="detachOnClose"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.DetachOnClose</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This allows the user to specify whether, when a PM/EM 
                            is closed, that all objects in the L1 cache are automatically detached.
                            <b>Users are recommended to use the <i>datanucleus.DetachAllOnCommit</i>
                            wherever possible</b>. This will not work in JCA mode.
                        </td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>false</b> | true</td>
                    </tr>
                </table>
                <br/>
                <a name="detachmentFields"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.detachmentFields</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>When detaching you can control what happens to loaded/unloaded fields of
                            the FetchPlan. The default for JDO is to load any unloaded fields of the
                            current FetchPlan before detaching. You can also unload any loaded fields
                            that are not in the current FetchPlan (so you only get the fields you require)
                            as well as a combination of both options</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>load-fields</b> | unload-fields | load-unload-fields</td>
                    </tr>
                </table>
                <br/>
                <a name="maxFetchDepth"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.maxFetchDepth</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Specifies the default maximum fetch depth to use for fetching operations.
                            The JDO spec defines a default of 1, meaning that only the first level of related 
                            objects will be fetched by default. The JPA spec doesn't provide fetch group control, just
                            a "default fetch group" type concept, consequently the default there is -1 currently.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>-1 | 1 | positive integer (non-zero)</td>
                    </tr>
                </table>
                <br/>
                <a name="detachedState"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.detachedState</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Allows control over which mechanism to use to determine the fields to be detached.
						By default DataNucleus uses the defined "fetch-groups". Obviously JPA1/JPA2 don't have
						that (although it is an option with DataNucleus), so we also allow <i>loaded</i>
						which will detach just the currently loaded fields, and <i>all</i> which will
						detach all fields of the object (<b>be careful with this option since it, when used with
						maxFetchDepth of -1 will detach a whole object graph!</b>)</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>fetch-groups</b> | all | loaded</td>
                    </tr>
                </table>
                <br/>
                <a name="TransactionType"/>
                <table>
                    <tr>
                        <th colspan="2"><b>datanucleus.TransactionType</b></th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Type of transaction to use. If running under JavaSE the default is RESOURCE_LOCAL, and
                            if running under JavaEE the default is JTA.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>RESOURCE_LOCAL | JTA</td>
                    </tr>
                </table>
                <br/>
                <a name="ServerTimeZoneID"/>
                <table>
                    <tr>
                        <th colspan="2"><b>datanucleus.ServerTimeZoneID</b></th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Id of the TimeZone under which the datastore server is running. If this is not specified
                            or is set to null it is assumed that the datastore server is running in the same timezone
                            as the JVM under which DataNucleus is running.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="PersistenceUnitName"/>
                <table>
                    <tr>
                        <th colspan="2"><b>datanucleus.PersistenceUnitName</b></th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of a <i>persistence-unit</i> to be found in a <i>persistence.xml</i>
                        file (under META-INF) that defines the persistence properties to use
                        and the classes to use within the persistence process.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="PersistenceUnitLoadClasses"/>
                <table>
                    <tr>
                        <th colspan="2"><b>datanucleus.PersistenceUnitLoadClasses</b></th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Used when we have specified the persistence-unit name for a PMF/EMF and where we
                        want the datastore "tables" for all classes of that persistence-unit loading up into the 
                        StoreManager. Defaults to false since some databases are slow so such an operation would
                        slow down the startup process.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <a name="persistenceXmlFilename"/>
                <table>
                    <tr>
                        <th colspan="2"><b>datanucleus.persistenceXmlFilename</b></th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>URL name of the <i>persistence.xml</i> file that should be used
                        instead of using "META-INF/persistence.xml".</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="DatastoreReadTimeoutMillis"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.datastoreReadTimeout</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The timeout to apply to all reads (millisecs). 
                            e.g by query or by PM.getObjectById().
                            <b>Only applies if the underlying datastore supports it</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>0</b> | A positive value (MILLISECONDS)</td>
                    </tr>
                </table>
                <br/>
                <a name="DatastoreWriteTimeoutMillis"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.datastoreWriteTimeout</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The timeout to apply to all writes (millisecs). 
                            e.g by makePersistent, or by an update.
                            <b>Only applies if the underlying datastore supports it</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>0</b> | A positive value (MILLISECONDS)</td>
                    </tr>
                </table>
                <br/>
                <br/>
                <br/>
                <a name="SingletonPMF"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.singletonPMFForName</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to only allow a singleton PMF for a particular name (the name can be either
                        the name of the PMF in jdoconfig.xml, or the name of the persistence-unit).
                        If a subsequent request is made for a PMF with a name that already exists then a 
                        warning will be logged and the original PMF returned.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <a name="SingletonEMF"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.singletonEMFForName</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to only allow a singleton EMF for persistence-unit.
                        If a subsequent request is made for an EMF with a name that already exists then a 
                        warning will be logged and the original EMF returned.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.allowListenerUpdateAfterInit</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether you want to be able to add/remove listeners on the JDO PMF after it is marked as
                        not configurable (when the first PM is created). The default matches the JDO spec, not allowing
                        changes to the listeners in use.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <a name="storeManagerType"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.storeManagerType</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Type of the StoreManager to use for this PMF/EMF. This has typical values of "rdbms", "mongodb".
                            If it isnt specified then it falls back to trying to find the StoreManager from the
                            connection URL. The associated DataNucleus plugin has to be in the CLASSPATH when selecting this.
                            When using data sources (as usually done in a JavaEE container), DataNucleus cannot find out the
                            correct type automatically and this option must be set.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>rdbms | mongodb | alternate StoreManager key</td>
                    </tr>
                </table>
                <br/>
                <a name="managedRuntime"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.jmxType</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Which JMX server to use when hooking into JMX.
						    Please refer to the <a href="jdo/monitoring.html">Monitoring Guide</a></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>default | mx4j</td>
                    </tr>
                </table>
                <br/>
                <a name="deletionPolicy"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.deletionPolicy</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Allows the user to decide the policy when deleting objects. The default is "JDO2" which firstly
                        checks if the field is dependent and if so deletes dependents, and then for others will null any
                        foreign keys out. The problem with this option is that it takes no account of whether the user has also
                        defined &lt;foreign-key&gt; elements, so we provide a "DataNucleus" mode that does the dependent field part first
                        and then if a FK element is defined will leave it to the FK in the datastore to perform any actions, and
                        otherwise does the nulling.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>JDO2</b> | DataNucleus</td>
                    </tr>
                </table>
                <br/>
                <a name="identityStringTranslator"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.identityStringTranslatorType</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>You can allow identities input to <i>pm.getObjectById(id)</i> be translated into
                            valid JDO ids if there is a suitable translator.
                            See <a href="extensions/identity_string_translator.html">Identity String Translator Plugin</a>
                        </td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <a name="identityKeyTranslator"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.identityKeyTranslatorType</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>You can allow identities input to <i>pm.getObjectById(cls, key)</i> be translated into
                            valid JDO ids if there is a suitable key translator.
                            See <a href="extensions/identity_key_translator.html">Identity Key Translator Plugin</a>
                        </td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.datastoreIdentityType</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Which "datastore-identity" class plugin to use to represent datastore identities.
                            Refer to <a href="extensions/datastoreidentity.html">Datastore Identity extensions</a> for details.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>datanucleus</b> | kodo | xcalia | {user-supplied plugin}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.executionContext.maxIdle</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Specifies the maximum number of ExecutionContext objects that are pooled ready for use</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>20</b> | integer value greater than 0</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.executionContext.reaperThread</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to start a reaper thread that continually monitors the pool of ExecutionContext
                            objects and frees them off after they have surpassed their expiration period</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>false</b> | true</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.executionContext.closeActiveTxAction</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Defines the action if a PM/EM is closed and there is an active transaction present.
                            JDO (3.2+) defaults to rollback, whereas JPA defaults to exception</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>rollback | exception</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.objectProvider.className</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Class name for the ObjectProvider to use when managing object state.
                            The default for RDBMS is ReferentialStateManagerImpl, and is StateManagerImpl for all other datastores.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>{user-provided class-name}</td>
                    </tr>
                </table>
                <br/>
                <!-- COMMENTED OUT UNTIL PROPERLY SUPPORTED -->
                <!--table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.objectProvider.maxIdle</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Specifies the maximum number of ObjectProvider objects that are pooled ready for use.
                            0 means no pooling</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>0</b> | integer value greater than 0</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.objectProvider.reaperThread</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to start a reaper thread that continually monitors the pool of ObjectProvider
                            objects and frees them off after they have surpassed their expiration period</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>false</b> | true</td>
                    </tr>
                </table>
                <br/-->
                <a name="ImplementationCreator"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.useImplementationCreator</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to allow use of the implementation-creator (feature of JDO to dynamically
                            create implementations of persistent interfaces). 
                            Defaults to true for JDO, and false for JPA</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | false</td>
                    </tr>
                </table>
                <br/>
                <a name="manageRelationships"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.manageRelationships</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This allows the user control over whether DataNucleus will try to manage bidirectional
                            relations, correcting the input objects so that all relations are consistent.
                            This process runs when flush()/commit() is called.
                            JDO defaults to <i>true</i> and JPA defaults to
                            <i>false</i>
                            You can set it to <i>false</i> if you
                            always set both sides of a relation when persisting/updating.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | false</td>
                    </tr>
                </table>
                <br/>
                <a name="manageRelationshipsChecks"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.manageRelationshipsChecks</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This allows the user control over whether DataNucleus will make consistency checks on
                            bidirectional relations. If "datanucleus.managedRelationships" is not selected then
                            no checks are performed. If a consistency check fails at flush()/commit() then
                            a JDOUserException is thrown.
                            You can set it to <i>false</i> if you want to omit all consistency checks.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <a name="persistenceByReachabilityAtCommit"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.persistenceByReachabilityAtCommit</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to run the "persistence-by-reachability" algorithm at commit() time.
                            This means that objects that were reachable at a call to makePersistent()
                            but that are no longer persistent will be removed from persistence.
                            For performance improvements, consider turning this off.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <a name="classLoaderResolverName"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.classLoaderResolverName</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of a ClassLoaderResolver to use in class loading. DataNucleus provides a default that 
                            loosely follows the JDO specification for class loading. This property allows the user to 
                            override this with their own class better suited to their own loading requirements.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>datanucleus</b> | {name of class-loader-resolver plugin}</td>
                    </tr>
                </table>
                <br/>
                <a name="primaryClassLoader"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.primaryClassLoader</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Sets a primary classloader for situations where a primary classloader is not accessible. This ClassLoader
                            is used when the class is not found in the default ClassLoader search path. As example, when the database
                            driver is loaded by a different ClassLoader not in the ClassLoader search path for JDO or JPA specifications.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>instance of java.lang.ClassLoader</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.plugin.pluginRegistryClassName</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of a class that acts as registry for plug-ins.
                            This defaults to <i>org.datanucleus.plugin.NonManagedPluginRegistry</i> (for when not using OSGi).
                            If you are within an OSGi environment you can set this to  <i>org.datanucleus.plugin.OSGiPluginRegistry</i></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>{fully-qualified class name}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.plugin.pluginRegistryBundleCheck</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Defines what happens when plugin bundles are found and are duplicated</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>EXCEPTION</b> | LOG | NONE</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.plugin.allowUserBundles</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Defines whether user-provided bundles providing DataNucleus extensions will be registered.
                            This is only respected if used in a non-Eclipse OSGi environment.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.plugin.validatePlugins</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Defines whether a validation step should be performed checking for plugin dependencies etc.
                            This is only respected if used in a non-Eclipse OSGi environment.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>false</b> | true</td>
                    </tr>
                </table>
                <br/>
                <a name="FindObjectValidateWhenCached"/>
                <table>
                    <tr>
                        <th colspan="2"><b>datanucleus.findObject.validateWhenCached</b></th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>When a user calls getObjectById (JDO) or findObject (JPA) and they request validation
                            this allows the turning off of validation when an object is found in the (L2) cache.
                            Can be useful for performance reasons, but should be used with care.
                            Defaults to <i>true</i> for JDO (to be consistent with the JDO spec), and
                            to <i>false</i> for JPA.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | false</td>
                    </tr>
                </table>
                <br/>
                <a name="FindObjectTypeConversion"/>
                <table>
                    <tr>
                        <th colspan="2"><b>datanucleus.findObject.typeConversion</b></th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>
                            When calling PM.getObjectById(Class, Object) or EM.find(Class, Object) the second argument really ought to be
                            the exact type of the primary-key field. This property enables conversion of basic numeric types (Long, Integer, Short)
                            to the appropriate numeric type (if the PK is a numeric type). Set this to <i>false</i> if you want strict JPA compliance.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <br/>
                <br/>
            </subsection>

            <a name="schema"/>
            <subsection name="Schema Control">
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.schema.autoCreateAll</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to automatically generate any schema, tables, columns, constraints that don't exist. 
                            Please refer to the <a href="jdo/schema.html">Schema Guide</a> for more details.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.schema.autoCreateSchema</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to automatically generate any schema that doesn't exist. This depends very much on whether the
                            datastore in question supports this operation. 
                            Please refer to the <a href="jdo/schema.html">Schema Guide</a> for more details.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>            
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.schema.autoCreateTables</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to automatically generate any tables that don't exist. 
                            Please refer to the <a href="jdo/schema.html">Schema Guide</a> for more details.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>            
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.schema.autoCreateColumns</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to automatically generate any columns that don't exist. 
                            Please refer to the <a href="jdo/schema.html">Schema Guide</a> for more details.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.schema.autoCreateConstraints</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to automatically generate any constraints that don't exist. 
                            Please refer to the <a href="jdo/schema.html">Schema Guide</a> for more details.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.autoCreateWarnOnError</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to only log a warning when errors occur during the auto-creation/validation process.
                            <b>Please use with care since if the schema is incorrect errors will likely come up later and this
                                will postpone those error checks til later, when it may be too late!!</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.schema.validateAll</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Alias for defining <b>datanucleus.schema.validateTables</b>, <b>datanucleus.schema.validateColumns</b>
                            and <b>datanucleus.schema.validateConstraints</b> as all true.
                            Please refer to the <a href="jdo/schema.html">Schema Guide</a> for more details.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.schema.validateTables</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to validate tables against the persistence definition. 
                            Please refer to the <a href="jdo/schema.html">Schema Guide</a> for more details.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.schema.validateColumns</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to validate columns against the persistence definition. This refers to the column 
                            detail structure and NOT to whether the column exists or not. 
                            Please refer to the <a href="jdo/schema.html">Schema Guide</a> for more details.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.schema.validateConstraints</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to validate table constraints against the persistence definition. 
                            Please refer to the <a href="jdo/schema.html">Schema Guide</a> for more details.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <a name="ReadOnlyDatastore"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.readOnlyDatastore</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether the datastore is read-only or not (fixed in structure and contents).</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.readOnlyDatastoreAction</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>What happens when a datastore is read-only and an object is attempted to
                        be persisted.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>EXCEPTION</b> | IGNORE</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.generateSchema.database.mode</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to perform any schema generation to the database at startup.
                            Will process the schema for all classes that have metadata loaded at startup (i.e the
                            classes specified in a persistence-unit).</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>create | drop | drop-and-create | <b>none</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.generateSchema.scripts.mode</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to perform any schema generation into scripts at startup.
                            Will process the schema for all classes that have metadata loaded at startup (i.e the
                            classes specified in a persistence-unit).</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>create | drop | drop-and-create | <b>none</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.generateSchema.scripts.create.target</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of the script file to write to if doing a "create" with the target as "scripts"</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>datanucleus-schema-create.ddl</b> | {filename}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.generateSchema.scripts.drop.target</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of the script file to write to if doing a "drop" with the target as "scripts"</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>datanucleus-schema-drop.ddl</b> | {filename}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.generateSchema.scripts.create.source</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of a script file to run to create tables. Can be absolute filename, or URL string</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>{filename}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.generateSchema.scripts.drop.source</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of a script file to run to drop tables. Can be absolute filename, or URL string</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>{filename}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.generateSchema.scripts.load</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of a script file to run to load data into the schema. Can be absolute filename, or URL string</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>{filename}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.identifierFactory</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of the identifier factory to use when generating table/column names etc (RDBMS datastores only). 
                            See also the <a href="jdo/orm/datastore_identifiers.html">JDO RDBMS Identifier Guide</a>.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>datanucleus1 | <b>datanucleus2</b> | jpox | jpa | {user-plugin-name}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.identifier.namingFactory</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of the identifier NamingFactory to use when generating table/column names etc (non-RDBMS datastores).
                            Defaults to "datanucleus2" for JDO and "jpa" for JPA usage.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>datanucleus2 | jpa | {user-plugin-name}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.identifier.case</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Which case to use in generated table/column identifier names. 
                            See also the <a href="jdo/orm/datastore_identifiers.html">Datastore Identifier Guide</a>.
                            RDBMS defaults to UPPERCASE. Cassandra defaults to lowercase</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>UPPERCASE | LowerCase | MixedCase</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.identifier.wordSeparator</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Separator character(s) to use between words in generated identifiers. Defaults to "_" (underscore)</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.identifier.tablePrefix</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Prefix to be prepended to all generated table names (if the identifier factory supports it)</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.identifier.tableSuffix</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Suffix to be appended to all generated table names (if the identifier factory supports it)</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.defaultInheritanceStrategy</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>How to choose the inheritance strategy default for classes where no strategy has been
                            specified. With <i>JDO2</i> this will be "new-table" for base classes and 
                            "superclass-table" for subclasses.
                            With <i>TABLE_PER_CLASS</i> this will be "new-table" for all classes.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>JDO2</b> | TABLE_PER_CLASS</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.store.allowReferencesWithNoImplementations</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether we permit a reference field (1-1 relation) or collection of references
                            where there are no defined implementations of the reference. False means that an
                            exception will be thrown during schema generation for the field</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <br/>
                <br/>
            </subsection>

            <a name="transaction"/>
            <subsection name="Transactions and Locking">
                <a name="TransactionIsolationLevel"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.transactionIsolation</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Select the default transaction isolation level for ALL PM/EM 
                            factories. Some databases do not support all isolation levels, refer to your 
                            database documentation. Please refer to the transaction guides for
                            <a href="jdo/transactions.html#isolation">JDO</a> and
                            <a href="jpa/transactions.html#isolation">JPA</a></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>read-uncommitted | <b>read-committed</b> | repeatable-read | serializable</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.SerializeRead</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>With datastore transactions you can apply locking to objects as they are
                            read from the datastore. This setting applies as the default for all
                            PM/EMs obtained. You can also specify this
                            on a per-transaction or per-query basis (which is often better to avoid
                            deadlocks etc)</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.jtaLocator</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Selects the locator to use when using JTA transactions so that DataNucleus can find the JTA TransactionManager.
                        If this isn't specified and using JTA transactions DataNucleus will search all available locators which could
                        have a performance impact.
                        See <a href="extensions/jta_locator.html">JTA Locator extension</a>.
                        If specifying "custom_jndi" please also specify "datanucleus.jtaJndiLocation"</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>jboss | jonas | jotm | oc4j | orion | resin | sap | sun | weblogic | websphere | 
                            custom_jndi | alias of a JTA transaction locator</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.jtaJndiLocation</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of a JNDI location to find the JTA transaction manager from (when using
                        JTA transactions). This is for the case where you know where it is located. If not
                        used DataNucleus will try certain well-known locations</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>JNDI location</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.datastoreTransactionFlushLimit</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>For use when using datastore transactions and is the limit on number of dirty
                            objects before a flush to the datastore will be performed.</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>1</b> | positive integer</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.flush.mode</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Sets when persistence operations are flushed to the datastore.
                        <i>MANUAL</i> means that operations will be sent only on flush()/commit().
                        <i>AUTO</i> means that operations will be sent immediately.</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td>MANUAL | AUTO</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.flush.optimised</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to use an "optimised" flush process, changing the order of persists for
                        referential integrity (as used by RDBMS typically), or whether to just build a 
                        list of deletes, inserts and updates and do them in batches. RDBMS defaults to true, whereas
                        other datastores default to false (due to not having referential integrity, so gaining from 
                        batching</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td>true | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.nontx.atomic</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>When a user invokes a nontransactional operation they can choose for these changes to go 
                            straight to the datastore (atomically) or to wait until either the next transaction commit, 
                            or close of the PM/EM. Disable this if you want operations to be processed with the next
                            real transaction. This defaults to <i>true</i> for JDO, and <i>false</i> for JPA</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.connectionPoolingType</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This property allows you to utilise a 3rd party software package for enabling connection pooling.
                            When using RDBMS you can select from DBCP, C3P0, Proxool, BoneCP, etc. 
                            You must have the 3rd party jars in the CLASSPATH to use these options.
                            Please refer to the <a href="jdo/datastore_connection.html#pooling">Connection Pooling guide</a> for details.
                        </td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>None | DBCP | DBCP2 | C3P0 | Proxool | BoneCP | HikariCP | Tomcat | dbcp-builtin | {others}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.connectionPoolingType.nontx</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This property allows you to utilise a 3rd party software package for enabling connection
                            pooling <b>for nontransactional connections</b> using a DataNucleus plugin.
                            If you don't specify this value but do define the above value then that is taken by default.
                            Refer to the above property for more details.
                        </td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>None | DBCP | DBCP2 | C3P0 | Proxool | BoneCP | HikariCP | Tomcat | dbcp-builtin | {others}</td>
                    </tr>
                </table>
                <br/>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.connection.nontx.releaseAfterUse</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>
                            Applies only to non-transactional connections and refers to whether to re-use (pool)
                            the connection internally for later use. The default behaviour is to close any such
                            non-transactional connection after use. If doing significant non-transactional processing
                            in your application then this may provide performance benefits, but be careful about the
                            number of connections being held open (if one is held open per PM/EM).
                        </td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.connection.singleConnectionPerExecutionContext</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>
                            With an ExecutionContext (PM/EM) we normally allocate one connection for a transaction and close it after the transaction, then a different
                            connection for nontransactional ops. This flag acts as a hint to the store plugin to obtain and retain a single connection throughout
                            the lifetime of the PM/EM.
                        </td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.connection.resourceType</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Resource Type for connection ???</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>JTA | RESOURCE_LOCAL</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.connection.resourceType2</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Resource Type for connection 2</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>JTA | RESOURCE_LOCAL</td>
                    </tr>
                </table>
                <br/>
                <br/>
                <br/>
            </subsection>

            <a name="cache"/>
            <subsection name="Caching">
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.collections</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>SCO collections can be used in 2 modes in DataNucleus. You can allow DataNucleus to cache the collections contents, or 
                            you can tell DataNucleus to access the datastore for every access of the SCO collection. The default is to use 
                            the cached collection.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.collections.lazy</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>When using cached collections/maps, the elements/keys/values can be loaded when the object is
                            initialised, or can be loaded when accessed (lazy loading). The default is to use lazy loading
                            when the field is not in the current fetch group, and to not use lazy loading when the field
                            is in the current fetch group.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level1.type</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of the type of Level 1 cache to use. Defines the backing map.
                            See also Cache docs <a href="jdo/cache.html#level1">for JDO</a>, and 
                            <a href="jpa/cache.html#level1">for JPA</a></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>soft</b> | weak | strong | {your-plugin-name}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.type</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of the type of Level 2 Cache to use. Can be used to interface with external 
                            caching products. Use "none" to turn off L2 caching.
                            See also Cache docs <a href="jdo/cache.html#level2">for JDO</a>, and 
                            <a href="jpa/cache.html#level2">for JPA</a></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>none | <b>soft</b> | weak | coherence | ehcache | ehcacheclassbased | cacheonix |
                            oscache | swarmcache | javax.cache | spymemcached | xmemcached | {your-plugin-name}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.mode</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The mode of operation of the L2 cache, deciding which entities are cached.
                            The default (UNSPECIFIED) is the same as DISABLE_SELECTIVE.
                            See also Cache docs <a href="jdo/cache.html#level2">for JDO</a>, and 
                            <a href="jpa/cache.html#level2">for JPA</a></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>NONE | ALL | ENABLE_SELECTIVE | DISABLE_SELECTIVE | <b>UNSPECIFIED</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.storeMode</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to use the L2 cache for storing values (set to "bypass" to not store within the
                            context of the operation)</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>use</b> | bypass</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.retrieveMode</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to use the L2 cache for retrieving values (set to "bypass" to not retrieve from L2
                            cache within the context of the operation, i.e go to the datastore)</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>use</b> | bypass</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.updateMode</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>When the objects in the L2 cache should be updated. Defaults to updating at commit AND
                            when fields are read from a datastore object</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>commit-and-datastore-read</b> | commit</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.cacheName</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of the cache. This is for use with plugins such as the Tangosol cache plugin 
                            for accessing the particular cache. Please refer to the Cache Guide for
                            <a href="jdo/cache.html">JDO</a> or <a href="jpa/cache.html">JPA</a></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>your cache name</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.maxSize</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Max size for the L2 cache (supported by weak, soft, coherence, ehcache,
                            ehcacheclassbased, javax.cache)</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>-1</b> | integer value</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.clearAtClose</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether the close of the L2 cache (when the PMF/EMF closes) should also clear out
                            any objects from the underlying cache mechanism. By default it will clear objects out
                            but if the user has configured an external cache product and wants to share objects
                            across multiple PMF/EMFs then this can be set to false.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.batchSize</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>When objects are added to the L2 cache at commit they are typically batched. This property
                            sets the max size of the batch.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>100</b> | integer value</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.timeout</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Some caches (Cacheonix, javax.cache) allow specification of an expiration time for objects
                            in the cache. This property is the timeout in milliseconds (will be unset meaning use cache
                            default).</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>-1</b> | integer value</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.readThrough</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>With javax.cache L2 caches you can configure the cache to allow read-through</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.writeThrough</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>With javax.cache L2 caches you can configure the cache to allow write-through</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.storeByValue</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>With javax.cache L2 caches you can configure the cache to store by value 
                            (as opposed to by reference)</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.level2.statisticsEnabled</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>With javax.cache L2 caches you can configure the cache to enable statistics gathering
                            (accessible via JMX)</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>false</b> | true</td>
                    </tr>
                </table>
                <br/>
                <a name="QueryCache"/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.queryCompilation.type</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Type of cache to use for caching of generic query compilations</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>none | <b>soft</b> | weak | strong | {your-plugin-name}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.queryCompilationDatastore.type</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Type of cache to use for caching of datastore query compilations</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>none | <b>soft</b> | weak | strong | {your-plugin-name}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.queryResults.type</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Type of cache to use for caching query results.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>none | <b>soft</b> | weak | strong | javax.cache | spymemcached | xmemcached | cacheonix | 
                            {your-plugin-name}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.queryResults.cacheName</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of cache for caching the query results.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>datanucleus-query</b> | {your-name}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cache.queryResults.maxSize</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Max size for the query results cache (supported by weak, soft, strong)</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>-1</b> | integer value</td>
                    </tr>
                </table>
                <br/>
                <br/>
                <br/>
            </subsection>

            <a name="validation"/>
            <subsection name="Validation">
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.validation.mode</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Determines whether the automatic lifecycle event validation is in effect.
                            Defaults to <i>auto</i> for JPA and <i>none</i> for JDO</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>auto | callback | none</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.validation.group.pre-persist</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The classes to validation on pre-persist callback</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.validation.group.pre-update</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The classes to validation on pre-update callback</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.validation.group.pre-remove</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The classes to validation on pre-remove callback</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.validation.factory</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The validation factory to use in validation</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <br/>
                <br/>
            </subsection>
 
            <a name="identity"/>
            <subsection name="Value Generation">
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.valuegeneration.transactionAttribute</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to use the PM connection or open a new connection. 
                            Only used by value generators that require a connection to the datastore.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>New</b> | UsePM</td>
                    </tr>
                </table>                
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.valuegeneration.transactionIsolation</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Select the default transaction isolation level for identity generation.
                            Must have <i>datanucleus.valuegeneration.transactionAttribute</i> set to <i>New</i>
                            Some databases do not support all isolation levels, refer to your 
                            database documentation. Please refer to the transaction guides for
                            <a href="jdo/transactions.html#isolation">JDO</a> and
                            <a href="jpa/transactions.html#isolation">JPA</a></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>read-uncommitted | <b>read-committed</b> | repeatable-read | serializable</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.valuegeneration.sequence.allocationSize</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>If using JDO3.0 still and not specifying the size of your sequence, this acts 
                            as the default allocation size.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>10 | (integer value)</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.valuegeneration.increment.allocationSize</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Sets the default allocation size for any "increment" value strategy. 
                            You can configure each member strategy individually but they fall back to this value 
                            if not set</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>10 | (integer value)</td>
                    </tr>
                </table>
                <br/>
                <br/>
                <br/>
            </subsection>

            <a name="metadata"/>
            <subsection name="MetaData">
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.metadata.jdoFileExtension</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Suffix for JDO MetaData files. Provides the ability to override the default suffix and also 
                            to have one PMF with one suffix and another with a different suffix, hence allowing 
                            differing persistence of the same classes using different PMF's.</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>jdo</b> | {file suffix}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.metadata.ormFileExtension</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Suffix for ORM MetaData files. Provides the ability to override the default suffix and also 
                            to have one PMF with one suffix and another with a different suffix, hence allowing 
                            differing persistence of the same classes using different PMF's.</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>orm</b> | {file suffix}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.metadata.jdoqueryFileExtension</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Suffix for JDO Query MetaData files. Provides the ability to override the default suffix and also 
                            to have one PMF with one suffix and another with a different suffix, hence allowing 
                            differing persistence of the same classes using different PMF's.</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>jdoquery</b> | {file suffix}</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.metadata.alwaysDetachable</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to treat all classes as detachable irrespective of input metadata.
                            See also "alwaysDetachable" enhancer option.</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>false</b> | true</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.metadata.xml.validate</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to validate the MetaData file(s) for XML correctness (against the DTD) when parsing.</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.metadata.xml.namespaceAware</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to allow for XML namespaces in metadata files. The vast majority of sane people
                            should not need this at all, but it's enabled by default to allow for those that do (since v3.2.3)</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.metadata.allowXML</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to allow XML metadata. Turn this off if not using any, for performance.
                            From v3.0.4 onwards</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.metadata.allowAnnotations</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to allow annotations metadata. Turn this off if not using any, for performance.
                            From v3.0.4 onwards</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.metadata.allowLoadAtRuntime</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to allow load of metadata at runtime. This is intended for the situation
						    where you are handling persistence of a persistence-unit and only want the
						    classes explicitly specified in the persistence-unit.</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.metadata.autoregistration</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to use the JDO auto-registration of metadata. Turned on by default</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.metadata.supportORM</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to support "orm" mapping files. By default we use what the datastore plugin
                        supports. This can be used to turn it off when the datastore supports it but we dont
                        plan on using it (for performance)</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.metadata.defaultNullable</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether the default nullability for the fields should be nullable or non-nullable 
                        when no metadata regarding field nullability is specified at field level. The default is nullable i.e. to allow null values.
                        (since v5.0.0)</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <br/>
            </subsection>

            <a name="autostart"/>
            <subsection name="Auto-Start">
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.autoStartMechanism</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>How to initialise DataNucleus at startup. This allows DataNucleus to read in from 
                            some source the classes that it was persisting for this data store the previous 
                            time. 
                            <i>XML</i> stores the information in an XML file for this purpose.
                            <i>SchemaTable</i> (only for RDBMS) stores a table in the RDBMS for this purpose. 
                            <i>Classes</i> looks at the property <i>datanucleus.autoStartClassNames</i> for a list of classes.
                            <i>MetaData</i> looks at the property <i>datanucleus.autoStartMetaDataFiles</i> for a list of metadata files
                            The other option (default) is <i>None</i> (start from scratch each time). 
                            Please refer to the <a href="jdo/autostart.html">Auto-Start Mechanism Guide</a> for more details.
                            <b>Alternatively just use <i>persistence.xml</i> to specify the classes and/or mapping files to load at startup.</b>
                            Note also that "Auto-Start" is for RUNTIME use only (not during SchemaTool).
                        </td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>None</b> | XML | Classes | MetaData | SchemaTable</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.autoStartMechanismMode</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The mode of operation of the auto start mode. Currently there are 3 values. "Quiet" means that at startup if any errors are 
                            encountered, they are fixed quietly. "Ignored" means that at startup if any errors are encountered they are just ignored. 
                            "Checked" means that at startup if any errors are encountered they are thrown as exceptions.</td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td>Checked | Ignored | <b>Quiet</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.autoStartMechanismXmlFile</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Filename used for the XML file for AutoStart when using "XML" Auto-Start Mechanism</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.autoStartClassNames</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This property specifies a list of classes (comma-separated) that are loaded at 
                            startup when using the "Classes" Auto-Start Mechanism.</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.autoStartMetaDataFiles</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This property specifies a list of metadata files (comma-separated) that are 
                            loaded at startup when using the "MetaData" Auto-Start Mechanism.</td>
                    </tr>
                </table>
                <br/>
                <br/>
                <br/>
            </subsection>

            <a name="query"/>
            <subsection name="Query control">
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.query.flushBeforeExecution</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This property can enforce a flush to the datastore of any outstanding changes just
                        before executing all queries. If using optimistic transactions any updates are typically
                        held back until flush/commit and so the query would otherwise not take them into account.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.query.useFetchPlan</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to use the FetchPlan when executing a JDOQL query. The default is to use it which means that
                            the relevant fields of the object will be retrieved. This allows the option of just retrieving the
                            identity columns.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.query.compileOptimised</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The generic query compilation process has a simple "optimiser" to try to iron out potential
                        problems in users queries. It isn't very advanced yet, but currently will detect and try to fix
                        a query clause like "var == this" (which is pointless). This will be extended in the future to
                        handle other common situations</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.query.jdoql.allowAll</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>javax.jdo.query.JDOQL queries are allowed by JDO only to run SELECT queries.
                            This extension permits to bypass this limitation so that DataNucleus extension
                            bulk "update" and bulk "delete" can be run.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>false</b> | true</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.query.sql.allowAll</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>javax.jdo.query.SQL queries are allowed by JDO2 only to run SELECT queries.
                            This extension permits to bypass this limitation (so for example can execute stored procedures).</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>false</b> | true</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.query.checkUnusedParameters</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to check for unused input parameters and throw an exception if found.
                            The JDO and JPA specs require this check and is a good guide to having misnamed
                            a parameter name in the query for example.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <br/>
            </subsection>

            <a name="datastorespecific"/>
            <subsection name="Datastore Specific">
                <p>
                    Properties below here are for particular datastores only.
                </p>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.datastoreAdapterClassName</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This property allows you to supply the class name of the adapter to use for your 
                            datastore.
                            The default is not to specify this property and DataNucleus will autodetect the 
                            datastore type and use its own internal datastore adapter classes. This allows you 
                            to override the default behaviour where there maybe is some issue with the default 
                            adapter class.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>(valid class name on the CLASSPATH)</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.useLegacyNativeValueStrategy</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This property changes the process for deciding the value strategy to use when the user has
                            selected "native"(JDO)/"auto"(JPA) to be like it was with version 3.0 and earlier, so using
                            "increment" and "uuid-hex".
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.statementBatchLimit</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Maximum number of statements that can be batched. The default is 50 and also applies to delete of objects.
                            Please refer to the <a href="datastores/rdbms.html#statement_batching">Statement Batching guide</a>
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>integer value (0 = no batching)</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.checkExistTablesOrViews</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to check if the table/view exists. If false, it disables the automatic generation of tables that don't exist.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.useDefaultSqlType</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This property applies for schema generation in terms of setting the default column "sql-type" (when you haven't defined it) and where
                            the JDBC driver has multiple possible "sql-type" for a "jdbc-type".
                            If the property is set to false, it will take the first provided "sql-type" from the JDBC driver.
                            If the property is set to true, it will take the "sql-type" that matches what the DataNucleus "plugin.xml" implies.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.initializeColumnInfo</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Allows control over what column information is initialised when a table is loaded for the 
                            first time. By default info for all columns will be loaded. Unfortunately some RDBMS are 
                            particularly poor at returning this information so we allow reduced forms to just load the 
                            primary key column info, or not to load any.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>ALL</b> | PK | NONE</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.classAdditionMaxRetries</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The maximum number of retries when trying to find a class to persist or when validating a class.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>3</b> | A positive integer</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.constraintCreateMode</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>How to determine the RDBMS constraints to be created. 
                            <b>DataNucleus</b> will automatically add foreign-keys/indices to handle all relationships, and will
                            utilise the specified MetaData foreign-key information.
                            <b>JDO2</b> will only use the information in the MetaData file(s).
                            <b>Applicable for RDBMS only</b>
                        </td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>DataNucleus</b> | JDO2</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.uniqueConstraints.mapInverse</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to add unique constraints to the element table for a map inverse field.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.discriminatorPerSubclassTable</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Property that controls if only the base class where the discriminator is defined will have a discriminator column
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of values</td>
                        <td><b>false</b> | true</td>
                    </tr>
                </table>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.stringDefaultLength</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The default (max) length to use for all strings that don't have their column length defined in MetaData.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>255</b> | A valid length</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.stringLengthExceededAction</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Defines what happens when persisting a String field and its length exceeds the length of the
                            underlying datastore column. The default is to throw an Exception. The other option is to
                            truncate the String to the length of the datastore column.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>EXCEPTION</b> | TRUNCATE</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.persistEmptyStringAsNull</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>When persisting an empty string, should it be persisted as null in the datastore?
                            This is to allow for datastores such as Oracle that dont differentiate between null and empty string. 
                            If it is set to false and the datastore doesnt differentiate then a special character will be saved when storing an empty string (and interpreted when reading in).
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.query.fetchDirection</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>The direction in which the query results will be navigated.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>forward</b> | reverse | unknown</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.query.resultSetType</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Type of ResultSet to create. Note 1) Not all JDBC drivers accept all options. The values correspond directly to the ResultSet options. 
                            Note 2) Not all java.util.List operations are available for scrolling result sets. 
                            An Exception is raised when unsupported operations are invoked.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>forward-only</b> | scroll-sensitive | scroll-insensitive</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.query.resultSetConcurrency</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether the ResultSet is readonly or can be updated. Not all JDBC drivers support all options.
                            The values correspond directly to the ResultSet options.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>read-only</b> | updateable</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.query.multivaluedFetch</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>How any multi-valued field should be fetched in a query. 'exists' means use an EXISTS statement hence retrieving all elements for the
                            queried objects in one SQL with EXISTS to select the affected owner objects. 'none' means don't fetch container elements.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>exists</b> | none</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.oracleNlsSortOrder</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Sort order for Oracle String fields in queries (BINARY disables native language sorting)
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>LATIN</b> | See Oracle documentation</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.mysql.engineType</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Specify the default engine for any tables created in MySQL.
                            <b>Applicable to MySQL only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>InnoDB</b> | valid engine for MySQL</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.mysql.collation</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Specify the default collation for any tables created in MySQL.
                            <b>Applicable to MySQL only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>valid collation for MySQL</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.mysql.characterSet</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Specify the default charset for any tables created in MySQL.
                            <b>Applicable to MySQL only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>valid charset for MySQL</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.schemaTable.tableName</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of the table to use when using auto-start mechanism of "SchemaTable"
                            Please refer to the <a href="jdo/autostart.html">JDO Auto-Start guide</a>
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>NUCLEUS_TABLES | Valid table name</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.connectionProviderName</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of the connection provider to use to allow failover
                            Please refer to the <a href="datastores/rdbms.html#failover">Failover guide</a>
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>PriorityList</b> | Name of a provider</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.connectionProviderFailOnError</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to fail if an error occurs, or try to continue and log warnings
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.dynamicSchemaUpdates</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to allow dynamic updates to the schema. This means that upon each insert/update
                            the types of objects will be tested and any previously unknown implementations of
                            interfaces will be added to the existing schema.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.omitDatabaseMetaDataGetColumns</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether to bypass all calls to DatabaseMetaData.getColumns(). This JDBC method
                            is called to get schema information, but on some JDBC drivers (e.g Derby) it can
                            take an inordinate amout of time. Setting this to true means that your datastore
                            schema has to be correct and no checks will be performed.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.sqlTableNamingStrategy</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Name of the plugin to use for defining the names of the aliases of tables in SQL statements.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>alpha-scheme</b> | t-scheme</td>
                    </tr>
                </table>
                <br/>
    
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.tableColumnOrder</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>How we should order the columns in a table. The default is to put the fields of
                            the owning class first, followed by superclasses, then subclasses. An alternative
                            is to start from the base superclass first, working down to the owner, then the subclasses
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>owner-first</b> | superclass-first</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.allowColumnReuse</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This property allows you to reuse columns for more than 1 field of a class.
                            It is <i>false</i> by default to protect the user from erroneously typing in a
                            column name. Additionally, if a column is reused, the user ought to think about
                            how to determine which field is written to that column ... all reuse ought to imply
                            the same value in those fields so it doesn't matter which field is written there, or
                            retrieved from there.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.statementLogging</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>How to log SQL statements. The default is to log the statement and replace any parameters
                            with the value provided in angle brackets. Alternatively you can log the statement with any
                            parameters replaced by just the values (no brackets). The final option is to log the
                            raw JDBC statement (with ? for parameters).
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>values-in-brackets</b> | values | jdbc</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.fetchUnloadedAutomatically</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>If enabled will, upon a request to load a field, check for any unloaded fields
                            that are non-relation fields or 1-1/N-1 fields and will load them in the same
                            SQL call.
                            <b>Applicable for RDBMS only</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.rdbms.adapter.informixUseSerialForIdentity</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether we are using SERIAL for identity columns (instead of SERIAL8).
                            <b>Applicable for RDBMS only.</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cloud.storage.bucket</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This is a mandatory property that allows you to supply the bucket name to store your data.
                            <b>Applicable for Google Storage, and AmazonS3 only.</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>Any valid string</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.hbase.relationUsesPersistableId</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>This defines how relations will be persisted. The legacy method would be just to store the "id" of the object.
                            The default method is to use "persistableId" which is a form of the id but catering for datastore id and application id, and including
                            the class of the target object to avoid subsequent lookups.
                            <b>Applicable for HBase only.</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.hbase.enforceUniquenessInApplication</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Setting this property to true means that when a new object is persisted (and its identity
                            is assigned), no check will be made as to whether it exists in the datastore and that the
                            user takes responsibility for such checks.
                            <b>Applicable for HBase only.</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cassandra.compression</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Type of compression to use for the Cassandra cluster.
                            <b>Applicable for Cassandra only.</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>none</b> | snappy</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cassandra.metrics</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether metrics are enabled for the Cassandra cluster.
                            <b>Applicable for Cassandra only.</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cassandra.ssl</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Whether SSL is enabled for the Cassandra cluster.
                            <b>Applicable for Cassandra only.</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>true | <b>false</b></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cassandra.socket.readTimeoutMillis</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Socket read timeout for the Cassandra cluster.
                            <b>Applicable for Cassandra only.</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.cassandra.socket.connectTimeoutMillis</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>Socket connect timeout for the Cassandra cluster.
                            <b>Applicable for Cassandra only.</b></td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td></td>
                    </tr>
                </table>
            </subsection>
        </section>
    </body>
</document>
