<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>AccessPlatform : Migration</title>
    </properties>

    <body>
        <section name="AccessPlatform : Migration between versions">
            <p>
                This version of DataNucleus AccessPlatform builds on the v4 series of releases, adding future flexibility.
                All releases are checked regularly against the JDO/JPA TCKs, meaning that DataNucleus is always stable in terms of functionality.
                Occasionally, due to unknown bugs, or due to new functionality being introduced we need to change some aspects of DataNucleus. 
                As a result sometimes users will have to make some changes to move between versions of DataNucleus. We aim to keep this to a minimum.
            </p>

            <a name="5_0_3_FROM_5_0_2"/>
            <subsection name="Migration from 5.0.2 to 5.0.3">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>The JPA spec implies that when you specify SINGLE-TABLE inheritance for a tree then a discriminator will be used. DataNucleus previously
                        left it to a user to define the discriminator, but now adds it for them. See persistence property <b>datanucleus.metadata.useDiscriminatorForSingleTable</b>
                        (set to <i>false</i>) to get old behaviour</li>
                    <li>The JPA spec implies that if no discriminator value(s) are provided then the provider should use entity-name. DataNucleus has not done this thus far, instead
                        using class-name. We now swap to entity-name, but allow a persistence property <b>datanucleus.metadata.useDiscriminatorClassNameByDefault</b> that you
                        can set to <i>true</i> to get old behaviour.</li>
                    <li>DatastoreAdapter method <i>getRangeByLimitEndOfStatementClause</i> now has an extra argument added, for people who are overriding an adapter</li>
                    <li>The builtin DBCP connection pool has been removed and replaced by a builtin DBCP2 connection pool. DBCP2 is recommended over DBCP for all JRE's 1.7+ so
                        this switch was long overdue.</li>
                    <li>SchemaTool was changed to have options "createDatabase"/"deleteDatabase" instead of "createSchema"/"deleteSchema", and to accept the catalog as input.</li>
                </ul>
            </subsection>

            <a name="5_0_2_FROM_5_0_1"/>
            <subsection name="Migration from 5.0.1 to 5.0.2">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>When mapping a field of type Map&lt;PC,?&gt; with the key being embedded into a join table, this would previously have added an extra column to
                    be part of the PK of the join table (certainly for JPA). It no longer does this, and instead uses all fields of the key in the PK. You can get previous handling
                    by specifying extension <i>surrogate-pk-column</i> to <i>true</i> on the metadata for the field.</li>
                </ul>
            </subsection>

            <a name="5_0_1_FROM_5_0_0_REL"/>
            <subsection name="Migration from 5.0.0.RELEASE to 5.0.1">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>Persistence property <i>datanucleus.query.compileOptimiser</i> renamed to <b>datanucleus.query.compileOptimiseVarThis</b></li>
                </ul>
            </subsection>

            <a name="5_0_0_REL_FROM_5_0_0_M5"/>
            <subsection name="Migration from 5.0.0.M5 to 5.0.0.RELEASE">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>"JCache" (javax.cache v0.1) is no longer supported. Use "javax.cache" instead.</li>
                    <li>Persistence property <i>datanucleus.rdbms.adapter.informixUseSerialForIdentity</i> renamed to <b>datanucleus.rdbms.informix.useSerialForIdentity</b></li>
                    <li>Persistence property <i>datanucleus.rdbms.oracleNlsSortOrder</i> renamed to <b>datanucleus.rdbms.oracle.nlsSortOrder</b></li>
                </ul>
            </subsection>

            <a name="5_0_0_M5_FROM_5_0_0_M4"/>
            <subsection name="Migration from 5.0.0.M4 to 5.0.0.M5">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>Cassandra : requires Datastax v3.0+ now.</li>
                    <li>Refactor org.datanucleus.query.cache -> org.datanucleus.query.compiler</li>
                    <li>Refactor org.datanucleus.query.symbol -> org.datanucleus.query.compiler</li>
                    <li>Refactor org.datanucleus.store.encryption -> org.datanucleus.store</li>
                    <li>Refactor org.datanucleus.store.scostore -> org.datanucleus.store.types.scostore</li>
                    <li>Refactor org.datanucleus.store.exceptions -> org.datanucleus.exceptions</li>
                </ul>
            </subsection>

            <a name="5_0_0_M3_FROM_5_0_0_M2"/>
            <subsection name="Migration from 5.0.0.M2 to 5.0.0.M3">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>HBase : changed default storage of relations to use "persistableId" to be consistent with Cassandra, Neo4j, MongoDB, Excel, ODF, JSON etc.
                        Use persistence property <b>datanucleus.hbase.relationUsesPersistableId</b> as <i>false</i> to get old storage method.</li>
                </ul>
            </subsection>

            <a name="5_0_0_M2_FROM_5_0_0_M1"/>
            <subsection name="Migration from 5.0.0.M1 to 5.0.0.M2">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>The internal conversion mechanism for some java.time types has changed to improve timezone handling. If this causes issues with existing
                        data, then extract the internal TypeConverter for DN 5.0.0.M1 and use that in your application.</li>
                    <li>JPQL "MONTH" function was changed to return (1, 12) rather than (0, 11). To obtain previous handling use the JPQL function "MONTH_JAVA".</li>
                    <li>REST : "/jdoql" URL now takes parameter "query={the_query}" rather than assuming the query string starts with it.</li>
                    <li>REST : "/jpql" URL now takes parameter "query={the_query}" rather than assuming the query string starts with it.</li>
                    <li>REST : "/query" URL is no longer supported, use /jdoql or /jpql.</li>
                </ul>
            </subsection>

            <a name="5_0_0_M1_FROM_4_2_0_REL"/>
            <subsection name="Migration from 4.2.0.RELEASE to 5.0.0.M1">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>JDK : The JDK must be 1.8 or above now.</li>
                    <li>Use <i>javax.persistence</i> v2.1.2+ if having problems with signatures of JPA EntityGraph "addAttributeNodes" method, 
                        since this fixes a bug in JPA2.1 (that should be fixed in JPA 2.2 one day).</li>
                </ul>
            </subsection>

            <a name="4_2_0_REL_FROM_4_2_0_M2"/>
            <subsection name="Migration from 4.2.0.M2 to 4.2.0.RELEASE">
                <p>
                    Migrating will require no changes.
                </p>
            </subsection>

            <a name="4_2_0_M2_FROM_4_2_0_M1"/>
            <subsection name="Migration from 4.2.0.M1 to 4.2.0.M2">
                <p>
                    Migrating will require no changes.
                </p>
            </subsection>

            <a name="4_2_0_M1_FROM_4_1_1"/>
            <subsection name="Migration from 4.1.1 to 4.2.0.M1">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>JDO : Removed support for DataNucleus JDO "Typesafe" Query. This is replaced by <a href="jdo/jdoql_typesafe.html">JDO 3.2 JDOQLTypedQuery</a></li>
                </ul>
            </subsection>

            <a name="4_1_2_FROM_4_1_1"/>
            <subsection name="Migration from 4.1.1 to 4.1.2">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>JPA : The JPA extension annotation @DatastoreIdentity is renamed @DatastoreId</li>
                </ul>
            </subsection>

            <a name="4_1_0_REL_FROM_4_1_0_M4"/>
            <subsection name="Migration from 4.1.0.M4 to 4.1.0.RELEASE">
                <p>
                    Migrating will require no changes.
                </p>
            </subsection>

            <a name="4_1_0_M4_FROM_4_1_0_M3"/>
            <subsection name="Migration from 4.1.0.M3 to 4.1.0.M4">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>RDBMS : if persisting java.sql.Timestamp field as VARCHAR, the conversion method has changed slightly to pass a String to JDBC and not rely on JDBC drivers</li>
                    <li>RDBMS : new persistence property added "datanucleus.rdbms.useDefaultSqlType" with default value of <i>true</i>. This could impact on schema generation
                        if your JDBC driver has multiple possible "sql-type" for a specific "jdbc-type". Set it to <i>false</i> if you want the previous (4.0, 4.1) behaviour.</li>
                </ul>
            </subsection>

            <a name="4_1_0_M3_FROM_4_1_0_M2"/>
            <subsection name="Migration from 4.1.0.M2 to 4.1.0.M3">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>HikariCP : requires HikariCP v2.3.5+ if using that connection pool</li>
                </ul>
            </subsection>

            <a name="4_1_0_M2_FROM_4_1_0_M1"/>
            <subsection name="Migration from 4.1.0.M1 to 4.1.0.M2">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>The query hint "datanucleus.multivaluedFetch" is renamed to <b>datanucleus.rdbms.query.multivaluedFetch</b> and also can be specified as a persistence property.
                        It also now defaults to 'EXISTS' (meaning perform an EXISTS query for single SQL retrieval of a container field).</li>
                    <li>The metadata extension "adapter-column-name" for overriding the order column name in join tables has been removed - just use the column name within "order"</li>
                    <li>MongoDB : any fields of type java.sql.Time/java.sql.Date were previously defaulted to storing as String, yet now default to the internal MongoDB date type. Set
                        "jdbcType" to "varchar" on all fields that need to be stored as String for backwards compatibility.</li>
                    <li>MongoDB : now require Mongo driver v2.13 or above (including v3)</li>
                    <li>Jodatime : now requires Jodatime v2.0+ (if using LocalDateTime support)</li>
                </ul>
            </subsection>

            <a name="4_1_0_M1_FROM_4_0_4"/>
            <subsection name="Migration from 4.0.4 to 4.1.0.M1">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>The bytecode enhancement contract has been revised slightly, so all classes will need re-enhancement for use with this release.</li>
                    <li>A query hint has been added "datanucleus.useIsNullWhenEqualsNullParameter" for particular use by JPA for compatibility. It defaults to false.</li>
                </ul>
            </subsection>

            <a name="4_0_4_FROM_4_0_3"/>
            <subsection name="Migration from 4.0.3 to 4.0.4">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>The default naming for JPA "element collection" tables has changed to make it consistent with the spec. If you had a table generated using the earlier
                    default naming and want to keep that name then you should explicitly specify the table name in annoations/XML to avoid problems.</li>
                </ul>
            </subsection>

            <a name="4_0_3_FROM_4_0_2"/>
            <subsection name="Migration from 4.0.2 to 4.0.3">
                <p>
                    Migrating should require no changes.
                </p>
            </subsection>

            <a name="4_0_2_FROM_4_0_1"/>
            <subsection name="Migration from 4.0.1 to 4.0.2">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>JPA plugin handling of nulls allowed was not very predictable before and the code has been changed to work simpler. If you get a field that is now 
                    different to 4.0.1 or earlier then you should explicitly specify "allows-null".</li>
                </ul>
            </subsection>

            <a name="4_0_1_FROM_4_0_0_REL"/>
            <subsection name="Migration from 4.0.0.RELEASE to 4.0.1">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>For the Cassandra plugin, the default data type for UUID fields has changed from "text" to "uuid". If you have used UUID fields on v4.0.0-release you should
                    specify jdbc-type as "varchar" in column metadata when migrating to 4.0.1.</li>
                </ul>
            </subsection>

            <a name="4_0_0_REL_FROM_4_0_0_M4"/>
            <subsection name="Migration from 4.0.0.M4 to 4.0.0.RELEASE">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>For MongoDB, JSON, Neo4J, HBase the process for table/column naming has changed, particularly for embedded fields. This may result in slightly
                    different default table/column names (for example, the case of the name). To avoid problems use the metadata to explicitly set the column names (or
                    check that the new behaviour matches your expectations).</li>
                </ul>
            </subsection>

            <a name="4_0_0_M4_FROM_4_0_0_M3"/>
            <subsection name="Migration from 4.0.0.M3 to 4.0.0.M4">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li>Fields of type Calendar were previously persisted using 2 columns (millisecs, timezone) by default. The default is now changed to
                    use a single column (Timestamp). If you want 2 columns then either specify 2 column metadata for the field, or set the extension metadata
                    <b>calendar-one-column</b> as <i>false</i></li>
                    <li>The persistence properties <i>datanucleus.localisation.language</i> and <i>datanucleus.localisation.messageCodes</i> are removed.
                        You can now specify either of these as Java system properties since they apply for the JVM as a whole.</li>
                    <li>All 'boolean' fields with JPA (when using annotations) were previously defaulted to use <i>jdbc-type</i> of SMALLINT for some reason. This is now changed to
                        just use the DataNucleus default, and you can get the old behaviour by either specifying @JdbcType or by setting the persistence property
                        <b>datanucleus.jpa.legacy.mapBooleanToSmallint</b> to <i>true</i></li>
                </ul>
            </subsection>

            <a name="4_0_0_M3_FROM_4_0_0_M2"/>
            <subsection name="Migration from 4.0.0.M2 to 4.0.0.M3">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li>The EclipsePluginRegistry is now removed, and anyone using OSGi should use OSGiPluginRegistry. Should this not provide for your requirements
                        the EclipsePluginRegistry class is in DataNucleus GitHub for earlier releases so you could simply include it.</li>
                    <li>The bytecode enhancement contract has changed, so you should re-enhance any classes for use with this version of DataNucleus</li>
                    <li>The previously supported JDO metadata <i>vendor-name="jpox"</i> is now no longer supported. Set the vendor-name to <i>datanucleus</i></li>
                </ul>
            </subsection>

            <a name="4_0_0_M2_FROM_4_0_0_M1"/>
            <subsection name="Migration from 4.0.0.M1 to 4.0.0.M2">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li>Persistence property <b>datanucleus.identifier.case</b> value <i>PreserveCase</i> is now <b>MixedCase</b></li>
                    <li>User mapping extensions are now not needed if there is a TypeConverter that does the conversion. Also the
                        helper mapping classes ObjectAsStringMapping etc are now removed.</li>
                    <li>DataNucleus now uses ASM v5 so should, in principle, be JDK1.8-ready (as well as backwards compatible). 
                        Report any problems in the normal way</li>
                    <li>ODF/Excel : The previously permitted extension of specifying the column "name" to be the position of that column is now
                        no longer supported; specify the column 'position' attribute if wanting to specify the position.</li>
                </ul>
            </subsection>

            <a name="4_0_0_M1_FROM_3_3_7"/>
            <subsection name="Migration from 3.3.7 to 4.0.0.M1">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li>Persistence property <b>datanucleus.allowAttachOfTransient</b> now defaults to <i>true</i> for JPA usage; set it explicitly to get old behaviour</li>
                    <li>Persistence property <i>datanucleus.metadata.validate</i> was removed (replaced by <b>datanucleus.metadata.xml.validate</b> some time back)</li>
                    <li>Persistence property <i>datanucleus.defaultInheritanceStrategy</i> is renamed to <b>datanucleus.metadata.defaultInheritanceStrategy</b></li>
                    <li>Persistence property <i>datanucleus.autoCreateSchema</i> is renamed to <b>datanucleus.schema.autoCreateAll</b></li>
                    <li>Persistence property <i>datanucleus.autoCreateTables</i> is renamed to <b>datanucleus.schema.autoCreateTables</b></li>
                    <li>Persistence property <i>datanucleus.autoCreateColumns</i> is renamed to <b>datanucleus.schema.autoCreateColumns</b></li>
                    <li>Persistence property <i>datanucleus.autoCreateConstraints</i> is renamed to <b>datanucleus.schema.autoCreateConstraints</b></li>
                    <li>Persistence property <i>datanucleus.validateSchema</i> is renamed to <b>datanucleus.schema.validateAll</b></li>
                    <li>Persistence property <i>datanucleus.validateTables</i> is renamed to <b>datanucleus.schema.validateTables</b></li>
                    <li>Persistence property <i>datanucleus.validateColumns</i> is renamed to <b>datanucleus.schema.validateColumns</b></li>
                    <li>Persistence property <i>datanucleus.validateConstraints</i> is renamed to <b>datanucleus.schema.validateConstraints</b></li>
                    <li>Persistence property <i>datanucleus.fixedDatastore</i> is now removed, since it only equated to setting the "autoCreate" properties to false.</li>
                </ul>
            </subsection>

            <a name="3_3_7_FROM_3_3_6"/>
            <subsection name="Migration from 3.3.6 to 3.3.7">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li>Persistence property <b>datanucleus.jpa.findTypeConversion</b> is now removed and replaced with
                        <b>datanucleus.findObject.typeConversion</b>, defaulting to <i>true</i></li>
                </ul>
            </subsection>

            <a name="3_3_6_FROM_3_3_5"/>
            <subsection name="Migration from 3.3.5 to 3.3.6">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li>The <i>spatial</i> and <i>awtgeom</i> plugins have been merged, to be <i>datanucleus-geospatial</i></li>
                </ul>
            </subsection>

            <a name="3_3_5_FROM_3_3_4"/>
            <subsection name="Migration from 3.3.4 to 3.3.5">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li>RDBMS : where you have a query that has a collection member in the FetchPlan it previously would 
                    have been ignored. Now it is used to attempt a bulk-fetch of the collection. Since this is new functionality
                    there may be cases where the syntax is not optimal; remove the collection field from the query FetchPlan to
                    get the previous behaviour.</li>
                </ul>
            </subsection>

            <a name="3_3_4_FROM_3_3_3"/>
            <subsection name="Migration from 3.3.3 to 3.3.4">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li>RDBMS : default mapping for Boolean/boolean java types is now JDBC type BOOLEAN for H2 database; previously
                    this was unspecified so most likely fell back to CHAR for that database. Specify the jdbc-type explicitly if you
                    want to have CHAR</li>
                </ul>
            </subsection>

            <a name="3_3_3_FROM_3_3_2"/>
            <subsection name="Migration from 3.3.2 to 3.3.3">
                <p>
                    Migrating from AccessPlatform 3.3.2 to 3.3.3 will require the following changes
                </p>
                <ul>
                    <li><i>datanucleus-googlecollections</i> plugin is now renamed to <i>datanucleus-guava</i></li>
                </ul>
            </subsection>

            <a name="3_3_2_FROM_3_3_1"/>
            <subsection name="Migration from 3.3.1 to 3.3.2">
                <p>
                    Migrating will require no changes except to internal API(s).
                </p>
            </subsection>

            <a name="3_3_1_FROM_3_3_0_REL"/>
            <subsection name="Migration from 3.3.0.RELEASE to 3.3.1">
                <p>
                    Migrating will require no changes except to internal API(s).
                </p>
            </subsection>

            <a name="3_3_0_REL_FROM_3_3_0_M1"/>
            <subsection name="Migration from 3.3.0.M1 to 3.3.0.RELEASE">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li>DataNucleus @FetchGroup extension annotation for JPA is now dropped and people should use
                    the official JPA 2.1 @NamedEntityGraph annotation instead (or XML equivalent of course)</li>
                </ul>
            </subsection>

            <a name="3_3_0_M1_FROM_3_2_3"/>
            <subsection name="Migration from 3.2.3 to 3.3.0.M1">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li><b>Now requires a compliant JPA 2.1 API jar</b>. An official JPA 2.1 API jar is
                    not yet available, but as a stopgap there is a Eclipse javax.persistence v2.1.0 jar.
                    If using the Maven plugin with JPA, note that you also require v3.3.0.m1 of that plugin</li>
                    <li>DataNucleus @Index extension annotation for JPA is now dropped and people should use
                    the official JPA 2.1 @Index annotation instead (or XML equivalent of course)</li>
                </ul>
            </subsection>

            <a name="3_2_9_FROM_3_2_8"/>
            <subsection name="Migration from 3.2.8 to 3.2.9">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li>RDBMS : where you have a query that has a collection member in the FetchPlan it previously would 
                    have been ignored. Now it is used to attempt a bulk-fetch of the collection. Since this is new functionality
                    there may be cases where the syntax is not optimal; remove the collection field from the query FetchPlan to
                    get the previous behaviour.</li>
                </ul>
            </subsection>

            <a name="3_2_8_FROM_3_2_7"/>
            <subsection name="Migration from 3.2.7 to 3.2.8">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li>RDBMS : default mapping for Boolean/boolean java types is now JDBC type BOOLEAN for H2 database; previously
                    this was unspecified so most likely fell back to CHAR for that database. Specify the jdbc-type explicitly if you
                    want to have CHAR</li>
                </ul>
            </subsection>

            <a name="3_2_7_FROM_3_2_6"/>
            <subsection name="Migration from 3.2.6 to 3.2.7">
                <p>
                    Migrating from AccessPlatform 3.2.6 to 3.2.7 will require the following changes
                </p>
                <ul>
                    <li><i>datanucleus-googlecollections</i> plugin is now renamed to <i>datanucleus-guava</i></li>
                </ul>
            </subsection>

            <a name="3_2_3_FROM_3_2_2"/>
            <subsection name="Migration from 3.2.2 to 3.2.3">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li>The persistence property <i>datanucleus.metadata.validate</i> is renamed to
                        <b>datanucleus.metadata.xml.validate</b> to better describe its usage. The original
                        name is still supported but you are advised to move to this new naming as the old one
                        can be removed in a future release.</li>
                </ul>
            </subsection>

            <a name="3_2_2_FROM_3_2_1"/>
            <subsection name="Migration from 3.2.1 to 3.2.2">
                <p>
                    Migrating will require no changes.
                </p>
            </subsection>

            <a name="3_2_1_FROM_3_2_0_REL"/>
            <subsection name="Migration from 3.2.0.RELEASE to 3.2.1">
                <p>
                    Migrating will require the following changes
                </p>
                <ul>
                    <li>The persistence property <i>datanucleus.attachSameDatastore</i> defaults to <i>true</i>
                        with <i>datanucleus-core</i> version 3.2.1 and later.
                        Set it to <i>false</i> if you require replicating objects into other datastores</li>
                    <li>The JDOQL method <i>Date.getDay</i> is now deprecated and <i>Date.getDate</i> should be
                        used instead (day of the month). <i>Date.getDay</i> is likely to be converted to return
                        the day of the week in a later release, so fixing any use of this now makes sense</li>
                    <li>PreparedStatement pooling is turned now turned OFF by default due to the fact that
                        DBCP has a bug where it isn't closing ResultSets correctly when this is enabled.</li>
                </ul>
            </subsection>

            <a name="3_2_0_REL_FROM_3_2_0_M4"/>
            <subsection name="Migration from 3.2.0.M4 to 3.2.0.RELEASE">
                <p>
                    Migrating will require no changes.
                </p>
            </subsection>

            <a name="3_2_0_M4_FROM_3_2_0_m3"/>
            <subsection name="Migration from 3.2.0.M3 to 3.2.0.M4">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>The RDBMS persistence property <i>datanucleus.rdbms.sqlParamValuesInBrackets</i> is now
                        removed, and replaced by <b>datanucleus.rdbms.statementLogging</b> (see the docs)</li>
                    <li>The persistence property <i>datanucleus.rdbms.useUpdateLock</i> is now removed (was
                        deprecated many releases back). Use standard JDO/JPA locking mechanisms instead.</li>
                    <li>Any user-defined RDBMS mapping plugins will need updating to match some minor type
                        changes to the "datanucleus-rdbms" plugin API.</li>
                </ul>
            </subsection>

            <a name="3_2_0_M3_FROM_3_2_0_M2"/>
            <subsection name="Migration from 3.2.0.M2 to 3.2.0.M3">
                <p>
                    Migrating will require no changes.
                </p>
            </subsection>

            <a name="3_2_0_M2_FROM_3_2_0_M1"/>
            <subsection name="Migration from 3.2.0.M1 to 3.2.0.M2">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>The Maven plugin has been renamed to <b>datanucleus-maven-plugin</b> from
                        <i>maven-datanucleus-plugin</i> to match Maven3 naming policies.</li>
                    <li>You no longer require to include <b>asm.jar</b> since version 4.1 of ASM is now repackaged 
                        into <i>datanucleus-core.jar</i></li>
                    <li>Added persistence property "datanucleus.useImplementationCreator" to allow turning off
                        the persistent interface implementation creator.</li>
                    <li>All java type mappings used by the RDBMS plugin are now moved
                        from <i>org.datanucleus.store.mapped.mapping</i> in the core plugin, 
                        to <i>org.datanucleus.store.rdbms.mapping.java</i> in the RDBMS plugin. Related
                        classes only for "mapped" datastores are also now in the RDBMS plugin</li>
                </ul>
                <br/>
            </subsection>

            <a name="3_2_0_M1_FROM_3_1"/>
            <subsection name="Migration from 3.1.x to 3.2.0.M1">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>The Enhancer plugin is now merged into "datanucleus-core".
                        Note also that the "pre-compilation" enhancement process is now discontinued.</li>
                    <li>The Enhancer Ant task is now moved to <i>org.datanucleus.enhancer.EnhancerTask</i></li>
                    <li>Various DataNucleus internal classes have been refactored. Please refer to 
                        <a href="http://www.datanucleus.org/documentation/plugin_migration.html">this guide</a>
                        for details of upgrading DataNucleus internal API calls</li>
                    <li>Many "simple" Java field types now default to persistent (all supported types are now set
                        to default persistent). Additionally many "simple" types default to being in the DFG whereas 
                        they used not to (i.e you had to enable the persistence of them, e.g java.sql.Date)</li>
                </ul>
                <br/>
            </subsection>

            <a name="3_1_2_FROM_3_1_1"/>
            <subsection name="Migration from 3.1.1 to 3.1.2">
                <p>
                    Migrating will require no changes.
                </p>
                <br/>
            </subsection>

            <a name="3_1_1_FROM_3_1_0_REL"/>
            <subsection name="Migration from 3.1.0.RELEASE to 3.1.1">
                <p>
                    Migrating will require no changes.
                </p>
                <br/>
            </subsection>

            <a name="3_1_0_REL_FROM_3_1_0_M5"/>
            <subsection name="Migration from 3.1.0.M5 to 3.1.0.RELEASE">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>You no longer are required to specify the persistence property 
                        <b>datanucleus.rdbms.stringDefaultLength</b> as 255 for JDO; this is its new default</li>
                </ul>
                <br/>
            </subsection>

            <a name="3_1_0_M5_FROM_3_1_0_M4"/>
            <subsection name="Migration from 3.1.0.M4 to 3.1.0.M5">
                <p>
                    Migrating will require no changes.
                </p>
                <br/>
            </subsection>

            <a name="3_1_0_M4_FROM_3_1_0_M3"/>
            <subsection name="Migration from 3.1.0.M3 to 3.1.0.M4">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>The enhancer (v3.1) is now upgraded and requires ASM v4.0+. You can continue to use
                    the v3.0 enhancer with ASM v3.x but that will not work completely with JDK1.7</li>
                    <li>The RDBMS plugin now requires JDK1.6+ to run. Use v3.0 if you are still using JDK1.5</li>
                </ul>
                <br/>
            </subsection>

            <a name="3_1_0_M3_FROM_3_1_0_M2"/>
            <subsection name="Migration from 3.1.0.M2 to 3.1.0.M3">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>Persistence property <i>datanucleus.managedRuntime</i> replaced by <b>datanucleus.jmxType</b> 
                    defining the JMX server to use.</li>
                    <li>Persistence property <i>datanucleus.datastoreTransactionDelayOperations</i> is removed and
                    replaced by <b>datanucleus.flush.mode</b> with values of MANUAL and AUTO. MANUAL means that operations
                    will only go to the datastore on flush/commit, whereas AUTO will send them immediately.</li>
                    <li>The persistence property <b>datanucleus.nontx.atomic</b> previously only included persists and
                    deletes. It now also encompasses field updates. Bear this in mind when considering behaviour</li>
                    <li>The value strategy chosen when "native"(JDO)/"auto"(JPA) is specified has changed. It will now
                    take "identity"/"sequence"/"increment" when numeric-based (first that is supported for that datastore)
                    and "uuid-hex" when string-based. For RDBMS, use persistence property
                    <b>datanucleus.rdbms.useLegacyNativeValueStrategy</b> as <i>true</i> if wanting the old process.</li>
                </ul>
                <br/>
            </subsection>

            <a name="3_1_0_M2_FROM_3_1_0_M1"/>
            <subsection name="Migration from 3.1.0.M1 to 3.1.0.M2">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>"javax.cache" is now split into "jcache" (old API) and "javax.cache" (standard API) and
                    the standard API is now supported in <i>datanucleus-core</i></li>
                    <li><i>datanucleus-management</i> plugin is now merged into <i>datanucleus-core</i></li>
                </ul>
                <br/>
            </subsection>

            <a name="3_1_0_M1_FROM_3_0"/>
            <subsection name="Migration from 3.0.x to 3.1.0.M1">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>Excel, ODF, MongoDB and HBase plugins now respect JDO/JPA table/column naming strategies. 
                        Make sure that you set the table/column names explicitly if requiring some other naming that 
                        was default with v3.0 and earlier plugins</li>
                    <li>If you have any "type" plugins using the ObjectStringConverter or ObjectLongConverter interface
                        please rewrite them to use the new TypeConverter interface (minimal changes).</li>
                </ul>
                <br/>
            </subsection>

            <a name="3_0_4_FROM_3_0_3"/>
            <subsection name="Migration from 3.0.3 to 3.0.4">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>Move java.awt geometric type support into <b>datanucleus-awtgeom</b> plugin</li>
                </ul>
                <br/>
            </subsection>

            <a name="3_0_3_FROM_3_0_3"/>
            <subsection name="Migration from 3.0.2 to 3.0.3">
                <p>
                    Migrating will require no changes.
                </p>
                <br/>
            </subsection>

            <a name="3_0_2_FROM_3_0_1"/>
            <subsection name="Migration from 3.0.1 to 3.0.2">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>HBase : Default behaviour was to use Java serialisation to get the bytes of the PK
                    of objects. This is changed to now use HBase Bytes.toBytes resulting in cleaner PK ROW ID. To get
                    the old behaviour set the persistence property <i>datanucleus.hbase.serialisePK</i></li>
                    <li>HBase : default behaviour used to be to persist primitive wrapper fields as serialized.
                    They are now persisted as serialised if specified in metadata, otherwise using HBase Bytes handler</li>
                </ul>
                <br/>
            </subsection>

            <a name="3_0_0_REL_FROM_3_0_0_M6"/>
            <subsection name="Migration from 3.0.0 M6 to 3.0.0 RELEASE">
                <p>
                    Migrating will require no changes.
                </p>
                <br/>
            </subsection>

            <a name="3_0_0_M6_FROM_3_0_0_M5"/>
            <subsection name="Migration from 3.0.0 M5 to 3.0.0 M6">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>The plugin attribute "override" utilised by "java_type", "store_mapping" and "rdbms_mapping" is
					now removed, and users should make use of the attribute "priority" (specify a number and the higher
					the number the higher the priority that plugin extension gets.</li>
					<li>JPA usage now defaults to use "datanucleus.RetainValues". This means that when an object
					leaves a transaction it will not move to HOLLOW state, but instead to PERSISTENT NONTRANSACTIONAL
					and has its field values intact.</li>
                    <li>If using an identity string translator, note that this is now a IdentityStringTranslator and the
                    persistence property is now "datanucleus.identityStringTranslatorType"</li>
                </ul>
                <br/>
            </subsection>

            <a name="3_0_0_M5_FROM_3_0_0_M4"/>
            <subsection name="Migration from 3.0.0 M4 to 3.0.0 M5">
                <p>
                    Migrating should require no changes.
                </p>
                <br/>
            </subsection>

            <a name="3_0_0_M4_FROM_3_0_0_M3"/>
            <subsection name="Migration from 3.0.0 M3 to 3.0.0 M4">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>Maven2 plugin option "outputFile" is renamed to "ddlFile" for consistency with all docs/tools</li>
                </ul>
                <br/>
            </subsection>

            <a name="3_0_0_M3_FROM_3_0_0_M2"/>
            <subsection name="Migration from 3.0.0 M2 to 3.0.0 M3">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>Anyone using "memcache" cache provider should rename it to "spymemcached". This renaming
                        is to clarify which implementation of "memcached" is actually being used. Similarly the
                        persistence properties are now spelt "memcached" instead of "memcache". Also the former property
                        <i>datanucleus.cache.level2.memcached.keyprefix</i> is dropped and users should use
                        <i>datanucleus.cache.level2.cacheName</i> instead</li>
                    <li>HBase : previously all primitives were stored serialised. Set the metadata 'serialized'
                        flag on the field/property to continue doing that.</li>
                    <li>Queries are no longer run in a separate thread (which was the previous way of supporting
                        query cancellation, now reworked for RDBMS to use SQL error codes).</li>
                    <li>Persistence properties for schema validation <b>datanucleus.validateXXX</b> now default to false</li>
                </ul>
                <br/>
            </subsection>

            <a name="3_0_0_M2_FROM_3_0_0_M1"/>
            <subsection name="Migration from 3.0.0 M1 to 3.0.0 M2">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>The connection password decryption interface has been repackaged/renamed to
                        <i>org.datanucleus.store.encryption.ConnectionEncryptionProvider</i> so if you were
                        providing your own decryption of passwords then rebuild to this</li>
                    <li>If using your own DataNucleus plugins, make sure you specify the persistence property
                        <b>datanucleus.plugin.allowUserBundles</b> as <i>true</i> since the default is now to just
                        use official DataNucleus plugins.</li>
                    <li>The identifier naming strategy <b>datanucleus</b> has been renamed to <i>datanucleus1</i>
                        to make it clearer that it was used as the default for DataNucleus v1.x but no longer</li>
                </ul>
                <br/>
            </subsection>

            <a name="3_0_0_M1_FROM_2_2_x"/>
            <subsection name="Migration from 2.2.x to 3.0.0 M1">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>JDO API has been moved into its own plugin "datanucleus-api-jdo" and you will need this
                        if using the JDO API. JDO classes have been repackaged to <i>org.datanucleus.api.jdo</i>
                        and this is of particular importance for your PMF class 
                        (<b>org.datanucleus.api.jdo.JDOPersistenceManagerFactory</b>)</li>
                    <li>"datanucleus-jpa" jar has been repackaged as "datanucleus-api-jpa" and the classes within
                        repackaged to "org.datanucleus.api.jpa". In particular your JPA persistence provider
                        class should reference this new package name 
                        (<b>org.datanucleus.api.jpa.PersistenceProviderImpl</b>)</li>
                    <li>"datanucleus-rest" jar has been repackaged as "datanucleus-api-rest".</li>
                    <li>SchemaTool (and its Ant task) has been moved in package to <i>org.datanucleus.store.schema</i></li>
                    <li>HBase : generation of "family name" has changed when previously specifying a column name
                        without a colon; previously used that as family name and qualifier name, but now uses
                        the table name as the family name in that situation.</li>
                    <li>HBase : previously all relationships were stored serialised. Set the metadata 'serialized'
                        flag on the field/property to continue doing that.</li>
                </ul>
                <br/>
            </subsection>

            <a name="2_2_1_FROM_2_2_0_REL"/>
            <subsection name="Migration from 2.2.0 RELEASE to 2.2.1">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>JDO 3.1 changes the return type of JDOQL "AVG" to be double or BigDecimal depending
                    on the type being averaged (previously just returned the same type as the averaged type).</li>
                </ul>
                <br/>
            </subsection>

            <a name="2_2_0_REL_FROM_2_2_0_M3"/>
            <subsection name="Migration from 2.2.0 Milestone3 to 2.2.0 RELEASE">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li><b>datanucleus-connectionpool</b> is no longer provided/needed, and is included within 
                        <b>datanucleus-rdbms</b>. In addition, if using JDK1.6 you can use a builtin DBCP connection pool.
                        You still need to include the relevant connection pool (e.g DBCP) in your CLASSPATH if using
                        JDK1.5</li>
                    <li>If you experience different behaviour with delete of objects with Excel or ODF, this is
                    because they now support cascade-delete</li>
                    <li>Major changes have been made to the use of the L2 cache (so that fields are used from there
                    rather than from the datastore wherever possible) and also to Managed Relations. Please report
                    any problems</li>
                </ul>
                <br/>
            </subsection>

            <a name="2_2_0_M3_FROM_2_2_0_M2"/>
            <subsection name="Migration from 2.2.0 Milestone2 to 2.2.0 Milestone3">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>Persistence property <b>datanucleus.attachPolicy</b> was removed since no longer
                    needed - the default attach handler copes with all situations.</li>
                    <li>Much improved support for collections/arrays/maps containing nulls is now present
                        to better match the Java spec for types. If any problems come up, make use of the 
                        "allow-nulls" extension metadata</li>
                    <li>JPA Criteria query annotation processor is now in its own plugin jar known as
                        <b>datanucleus-jpa-query</b></li>
                    <li>JDO Typesafe query annotation processor is now in its own plugin jar known as
                        <b>datanucleus-jdo-query</b></li>
                </ul>
                <br/>
            </subsection>

            <a name="2_2_0_M2_FROM_2_2_0_M1"/>
            <subsection name="Migration from 2.2.0 Milestone1 to 2.2.0 Milestone2">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>NucleusJDOHelper methods for getting dirty/loaded fields have been improved.
                    Check the docs for the new method names.</li>
                    <li>JDO3.1 sequence changes allow specification of "allocationSize" and "initialValue".
                        These default to 50 and 1 respectively. Set them for your sequences as required.
                        The persistence properties now become only fallback values</li>
                </ul>
                <br/>
            </subsection>

            <a name="2_2_0_M1_FROM_2_1_x"/>
            <subsection name="Migration from 2.1.x to 2.2.0 Milestone1">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>Legacy JDOQL implementation for RDBMS is now dropped. Use AccessPlatform 2.1 if you 
                        require it</li>
                </ul>
                <br/>
            </subsection>

            <a name="2_1_3_FROM_2_1_2"/>
            <subsection name="Migration from 2.1.2 to 2.1.3">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>Persistence property <b>datanucleus.attachPolicy</b> is now removed, and
					the default handling should work fine</li>
                </ul>
                <br/>
            </subsection>

            <a name="2_1_2_FROM_2_1_1"/>
            <subsection name="Migration from 2.1.1 to 2.1.2">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>The metadata extension <i>index</i> that is used to specify a column position (in table)
                        was previously required under "field" for Excel/ODF plugins. 
                        It should be under "column" now</li>
                </ul>
                <br/>
            </subsection>

            <a name="2_1_1_FROM_2_1_0_REL"/>
            <subsection name="Migration from 2.1.0 RELEASE to 2.1.1">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>Default allocation size for <i>increment</i> and <i>sequence</i> value strategies have
                        been changed for JDO usage to 10 and 10 respectively (from 5 and 1). You can configure
                        the global defaults via persistence properties</li>
                </ul>
                <br/>
            </subsection>

            <a name="2_1_0_REL_FROM_2_1_0_M3"/>
            <subsection name="Migration from 2.1.0 Milestone3 to 2.1.0 RELEASE">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>Move to using JDO3 jar instead of JDO 2.3 "ec"</li>
                    <li>Dropped support for class-level metadata extension "cacheable"; use standardised
                        <i>cacheable</i> attribute (or annotation) instead.</li>
                </ul>
                <br/>
            </subsection>

            <a name="2_1_0_M3_FROM_2_1_0_M2"/>
            <subsection name="Migration from 2.1.0 Milestone2 to 2.1.0 Milestone3">
                <p>
                    Migrating will require no changes.
                </p>
            </subsection>

            <a name="2_1_0_M2_FROM_2_1_0_M1"/>
            <subsection name="Migration from 2.1.0 Milestone1 to 2.1.0 Milestone2">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>JPQL "CASE" statements are now supported</li>
                    <li>JPA2 static metamodel is now supported, and so can be used with criteria queries
                        alongside the string-based field specification method</li>
                    <li>Runtime enhancement is now turned off by default even when you use JDK1.6+ and have
                        the enhancer/core jars in the CLASSPATH. Specify the compiler argument <b>processor</b>
                        to enable it (see <a href="jdo/enhancer.html">docs</a>)</li>
                </ul>
                <br/>
            </subsection>

            <a name="2_1_0_M1_FROM_2_0_x"/>
            <subsection name="Migration from 2.0.x to 2.1.0 Milestone1">
                <p>
                    Migrating will require the following changes.
                </p>
                <ul>
                    <li>The JDOQL implementation used for RDBMS is now the rewritten "generic" implementation.
                        To use the old implementation, set the JDOQL implementation as "JDOQL-Legacy"</li>
                    <li>Use of JPA should be run against the JPA2 "final" jar (or its Apache Geronimo specs equivalent)</li>
                    <li>Heavy refactoring has been done internally so if relying on DataNucleus APIs you
                        should check against SVN for changes. In particular, plugins should be using ObjectProvider
                        instead of StateManager, and ExecutionContext in place of ObjectManager.</li>
                </ul>
                <br/>
            </subsection>

        </section>
    </body>
</document>
