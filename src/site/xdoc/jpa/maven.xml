<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>DataNucleus JPA and Maven</title>
    </properties>

    <body>
        <section name="DataNucleus JPA and Maven">
            <p>
                <a href="http://maven.apache.org" target="_blank">Apache Maven</a> is a project management and 
                build tool that is quite common in organisations. Using DataNucleus and JPA with Maven is simple since 
                the DataNucleus jars, JPA API jar, JDO API jar and Maven plugin are present in the Maven central 
                repository, so you don't need to define any repository to find the artifacts. 
            </p>
            <p>
                The only remaining thing to do is identify which artifacts are required for your project, 
                updating your <i>pom.xml</i> accordingly.
            </p>
            <source><![CDATA[
<project>
    ...
    <dependencies>
        <dependency>
            <groupId>javax.jdo</groupId>
            <artifactId>jdo-api</artifactId>
            <version>3.0.1</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>javax.persistence</artifactId>
            <version>2.1.0</version>
        </dependency>
    </dependencies>
    ...
</project>
]]></source>
            <p>
                The only distinction to make here is that the above is for <i>compile time</i> since your
                persistence code (if implementation independent) will only depend on the basic persistence API.
                At runtime you will need the DataNucleus artifacts present also, so this becomes
            </p>
            <source><![CDATA[
<project>
    ...
    <dependencies>
        ...
        <dependency>
            <groupId>javax.jdo</groupId>
            <artifactId>jdo-api</artifactId>
            <version>3.0.1</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>javax.persistence</artifactId>
            <version>2.1.0</version>
        </dependency>
        <dependency>
            <groupId>org.datanucleus</groupId>
            <artifactId>datanucleus-core</artifactId>
            <version>[3.2.0, 3.2.99)</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.datanucleus</groupId>
            <artifactId>datanucleus-api-jpa</artifactId>
            <version>[3.3.0-release, 3.3.99)</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.datanucleus</groupId>
            <artifactId>datanucleus-rdbms</artifactId>
            <version>[3.2.0, 3.2.99)</version>
            <scope>runtime</scope>
        </dependency>
    </dependencies>
    ...
</project>
]]></source>
            <p>
                Obviously replace the <b>datanucleus-rdbms</b> jar with the jar for whichever datastore you are using.
                If you are running the Maven "exec" plugin you may not need the "runtime" specifications.
            </p>
            <p>
                Please note that you can alternatively use the convenience artifact for JPA+RDBMS (when using RDBMS).
            </p>
            <source><![CDATA[
<project>
    ...
    <dependencies>
        ...
        <dependency>
            <groupId>org.datanucleus</groupId>
            <artifactId>datanucleus-accessplatform-jpa-rdbms</artifactId>
            <version>3.3.0-release</version>
            <type>pom</type>
        </dependency>
    </dependencies>
    ...
</project>
]]></source>
            <br/>

            <subsection name="Maven2 Plugin : Enhancement and SchemaTool">
                <p>
                    Now that you have the DataNucleus jars available to you, via the repositories, you
                    want to perform DataNucleus operations. The primary operations are enhancement
                    and SchemaTool. If you want to use the DataNucleus Maven plugin for enhancement or
                    SchemaTool add the following to your <i>pom.xml</i>
                </p>
                <source><![CDATA[
<project>
    ...
    <build>
        <plugins>
            <plugin>
                <groupId>org.datanucleus</groupId>
                <artifactId>datanucleus-maven-plugin</artifactId>
                <version>3.3.0-release</version>
                <configuration>
                    <api>JPA</api>
                    <persistenceUnitName>MyUnit</persistenceUnitName>
                    <log4jConfiguration>${basedir}/log4j.properties</log4jConfiguration>
                    <verbose>true</verbose>
                </configuration>
                <executions>
                    <execution>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>enhance</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>]]></source>
                <p>
                    Note that this plugin step will automatically try to bring in the latest applicable version
                    of <i>datanucleus-core</i> for use by the enhancer. It does this since you don't need to have
                    <i>datanucleus-core</i> in your POM for compilation/enhancement. If you want to use an earlier version
                    then you need to add exclusions to the <i>maven-datanucleus-plugin</i>
                </p>
                <p>
                    The <i>executions</i> part of that will make enhancement be performed immediately after compile,
                    so automatic. See also <a href="enhancer.html">the Enhancer docs</a>
                </p>
                <p>
                    To run the enhancer manually you do
                </p>
                <source>
mvn datanucleus:enhance
                </source>
                <p>
                    <a href="schema.html#schematool">DataNucleus SchemaTool</a> is achieved similarly, via
                </p>
                <source>
mvn datanucleus:schema-create
                </source>
                <br/>
            </subsection>
        </section>
    </body>
</document>