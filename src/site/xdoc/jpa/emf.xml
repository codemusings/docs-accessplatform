<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Entity Manager Factory</title>
    </properties>

    <body>
        <section name="JPA : Entity Manager Factory">
            <p>
                Any JPA-enabled application will require at least one <i>EntityManagerFactory</i>. Typically applications
                create one per datastore being utilised. An <i>EntityManagerFactory</i> provides access to <i>EntityManager</i>s
                which allow objects to be persisted, and retrieved. The <i>EntityManagerFactory</i> can be configured to
                provide particular behaviour.
            </p>
            <p>
                <b>Important : an <i>EntityManagerFactory</i> is designed to be thread-safe. An <i>EntityManager</i> is not</b>
            </p>

            <a name="javase"/>
            <subsection name="Create an EMF in JavaSE">
                <p>
                    The simplest way of creating an <i>EntityManagerFactory</i> 
                    <a href="http://docs.oracle.com/javaee/7/api/javax/persistence/EntityManagerFactory.html" target="_blank"><img src="../images/javadoc.gif" alt=""/></a>
                    in a JavaSE environment is as follows
                </p>
<source>
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

...

EntityManagerFactory emf = Persistence.createEntityManagerFactory("myPU");</source>
                <p>
                    So you simply provide the name of the <a href="#persistenceunit">persistence-unit</a> which 
                    defines the properties, classes, meta-data etc to be used. An alternative is to specify the 
                    properties to use along with the <i>persistence-unit</i> name. In that case the passed properties 
                    will override any that are specified for the persistence unit itself.
                </p>
<source>
EntityManagerFactory emf = Persistence.createEntityManagerFactory("myPU", overridingProps);</source>
            </subsection>

            <a name="javaee"/>
            <subsection name="Create an EMF in JavaEE">
                <p>
                    If you want an <b>application-managed</b> EMF then you create it by injection like this,
                    providing the name of the required <a href="#persistenceunit">persistence-unit</a>
                </p>
<source><![CDATA[
@PersistenceUnit(unitName="myPU")
EntityManagerFactory emf;
]]></source>
                <p>
                    If you want a <b>container-managed</b> EM then you create it by injection like this,
                    providing the name of the required <a href="#persistenceunit">persistence-unit</a>
                </p>
<source><![CDATA[
@PersistenceContext(unitName="myPU")
EntityManager em;
]]></source>
                <p>
                    Please refer to the docs for your JavaEE server for more details.
                </p>
            </subsection>
        </section>

        <section name="Persistence Unit">
            <a name="persistenceunit"/>
            <p>
                When designing an application you can usually nicely separate your persistable objects into independent
                groupings that can be treated separately, perhaps within a different DAO object, if using DAOs. 
                JPA introduces the idea of a <i>persistence-unit</i>. A <i>persistence-unit</i> provides a 
                convenient way of specifying a set of metadata files, and classes, and jars that contain all classes to 
                be persisted in a grouping. The persistence-unit is named, and the name is used for identifying it.
                Consequently this name can then be used when defining what classes are to be enhanced, for example.
            </p>
            <p>
                To define a <i>persistence-unit</i> you first need to add a file <b>persistence.xml</b> to the 
                <i>META-INF/</i> directory of your application jar. This file will be used 
                to define your <i>persistence-unit</i>s. Let's show an example
            </p>
            <source><![CDATA[
<?xml version="1.0" encoding="UTF-8" ?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
        http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd" version="2.1">

    <!-- Online Store -->
    <persistence-unit name="OnlineStore">
        <provider>org.datanucleus.api.jpa.PersistenceProviderImpl</provider>
        <class>org.datanucleus.samples.metadata.store.Product</class>
        <class>org.datanucleus.samples.metadata.store.Book</class>
        <class>org.datanucleus.samples.metadata.store.CompactDisc</class>
        <class>org.datanucleus.samples.metadata.store.Customer</class>
        <class>org.datanucleus.samples.metadata.store.Supplier</class>
        <exclude-unlisted-classes/>
        <properties>
            <property name="javax.persistence.jdbc.url" value="jdbc:h2:datanucleus"/>
            <property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
            <property name="javax.persistence.jdbc.user" value="sa"/>
            <property name="javax.persistence.jdbc.password" value=""/>
        </properties>
    </persistence-unit>

    <!-- Accounting -->
    <persistence-unit name="Accounting">
        <provider>org.datanucleus.api.jpa.PersistenceProviderImpl</provider>
        <mapping-file>com/datanucleus/samples/metadata/accounts/orm.xml</mapping-file>
        <properties>
            <property name="javax.persistence.jdbc.url" value="jdbc:h2:datanucleus"/>
            <property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
            <property name="javax.persistence.jdbc.user" value="sa"/>
            <property name="javax.persistence.jdbc.password" value=""/>
        </properties>
    </persistence-unit>

</persistence>]]></source>
            <p>
                In this example we have defined 2 <i>persistence-unit</i>s. The first has the name "OnlineStore" and 
                contains 5 classes (annotated). The second has the name "Accounting" and contains a metadata file called 
                "orm.xml" in a particular package (which will define the classes being part of that unit). This means
                that once we have defined this we can reference these <i>persistence-unit</i>s in our persistence 
                operations. You can find the XSD for <i>persistence.xml</i>
                <a href="http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">here</a>.
            </p>
            <p>There are several sub-elements of this <i>persistence.xml</i> file</p>
            <ul>
                <li><b>provider</b> - the JPA persistence provider to be used.
                    The JPA persistence "provider" for DataNucleus is 
                    <b>org.datanucleus.api.jpa.PersistenceProviderImpl</b></li>
                <li><b>jta-data-source</b> - JNDI name for JTA connections</li>
                <li><b>non-jta-data-source</b> - JNDI name for non-JTA connections.
                    Note that if using a JTA datasource as the primary connection, you ought to provide a
                    <i>non-jta-data-source</i> also since any schema generation and/or sequence handling will
                    need to use that.
                </li>
                <li><b>jar-file</b> - name of a JAR file to scan for annotated classes to include in this
                    persistence-unit.</li>
                <li><b>mapping-file</b> - name of an XML "mapping" file containing persistence information
                to be included in this persistence-unit.</li>
                <li><b>class</b> - name of an annotated class to include in this persistence-unit</li>
                <li><b>properties</b> - properties defining the persistence factory to be used.
                    Please refer to 
                    <a href="../persistence_properties.html">Persistence Properties Guide</a> 
                    for details</li>
            </ul>
            <br/>

            <subsection name="Specifying the datastore properties">
                <p>
                    With a persistence-unit you have 2 ways of specifying the datastore to use
                </p>
                <ul>
                    <li><b>Specify the connection URL/driverName/userName/password</b> and it will internally
                    create a DataSource for this URL (with optional connection pooling). This is achieved by
                    specifying <b>javax.persistence.jdbc.url</b>, <b>javax.persistence.jdbc.driver</b>,
                    <b>javax.persistence.jdbc.user</b>, and <b>javax.persistence.jdbc.password</b> properties</li>
                    <li><b>Specify the JNDI name of the connectionFactory</b> This is achieved by specifying
                    <b>javax.persistence.jtaDataSource</b>, and <b>javax.persistence.nonJtaDataSource</b> (for secondary operations) or
                    by specifying the element(s) <i>jta-data-source</i>/<i>non-jta-data-source</i></li>
                </ul>
            </subsection>

            <subsection name="Restricting to specific classes">
                <p>
                    If you want to just have specific classes in the <i>persistence-unit</i> you can specify
                    them using the <b>class</b> element, and then add <b>exclude-unlisted-classes</b>, like this
                </p>
                <source><![CDATA[
    <persistence-unit name="Store">
        <provider>org.datanucleus.api.jpa.PersistenceProviderImpl</provider>
        <class>org.datanucleus.samples.metadata.store.Product</class>
        <class>org.datanucleus.samples.metadata.store.Book</class>
        <class>org.datanucleus.samples.metadata.store.CompactDisc</class>
        <exclude-unlisted-classes/>
        ...
    </persistence-unit>]]></source>
                <br/>
                <p>
                    If you don't include the <b>exclude-unlisted-classes</b> then DataNucleus will search
                    for annotated classes starting at the <i>root</i> of the <i>persistence-unit</i> (the
                    root directory in the CLASSPATH that contains the "META-INF/persistence.xml" file).
                </p>
            </subsection>

            <a name="persistenceunit_dynamic"/>
            <subsection name="Dynamically generated Persistence-Unit">
                <img src="../images/nucleus_extension.gif" border="0" alt=""/>
                <p>
                    DataNucleus allows an extension to JPA to dynamically create persistence-units at runtime.
                    Use the following code sample as a guide. Obviously any classes defined in the persistence-unit
                    need to have been enhanced.
                </p>
                <source><![CDATA[
import org.datanucleus.metadata.PersistenceUnitMetaData;
import org.datanucleus.api.jpa.JPAEntityManagerFactory;
 
PersistenceUnitMetaData pumd = new PersistenceUnitMetaData("dynamic-unit", "RESOURCE_LOCAL", null);
pumd.addClassName("org.datanucleus.test.A");
pumd.setExcludeUnlistedClasses();
pumd.addProperty("javax.persistence.jdbc.url", "jdbc:h2:mem:nucleus");
pumd.addProperty("javax.persistence.jdbc.driver", "org.h2.Driver");
pumd.addProperty("javax.persistence.jdbc.user", "sa");
pumd.addProperty("javax.persistence.jdbc.password", "");
pumd.addProperty("datanucleus.autoCreateSchema", "true");

EntityManagerFactory emf = new JPAEntityManagerFactory(pumd, null);]]></source>
                <p>
                    It should be noted that if you call <i>pumd.toString();</i> then this returns the text that
                    would have been found in a <i>persistence.xml</i> file.
                </p>
            </subsection>

            <subsection name="Standard JPA Properties">
                <table>
                    <tr>
                        <th>Parameter</th>
                        <th>Values</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                        <td>javax.persistence.provider</td>
                        <td></td>
                        <td>Class name of the provider to use. 
                            DataNucleus has a provider name of <b>org.datanucleus.api.jpa.PersistenceProviderImpl</b>
                            If you only have 1 persistence provider in the CLASSPATH then this doesn't need specifying.</td>
                    </tr>
                    <tr>
                        <td>javax.persistence.transactionType</td>
                        <td>RESOURCE_LOCAL | JTA</td>
                        <td>Type of transactions to use. In Java SE the default is RESOURCE_LOCAL. 
                            In Java EE the default is JTA. 
                            Note that if using a JTA datasource as the primary connection, you ought to provide a
                            <i>non-jta-data-source</i> also since any schema generation and/or sequence handling will
                            need to use that.</td>
                    </tr>
                    <tr>
                        <td>javax.persistence.jtaDataSource</td>
                        <td></td>
                        <td>JNDI name of a (transactional) JTA data source.
                            Note that if using a JTA datasource as the primary connection, you ought to provide a
                            <i>non-jta-data-source</i> also since any schema generation and/or sequence handling will
                            need to use that.</td>
                    </tr>
                    <tr>
                        <td>javax.persistence.nonJtaDataSource</td>
                        <td></td>
                        <td>JNDI name of a (non-transactional) data source.</td>
                    </tr>
                    <tr>
                        <td>javax.persistence.jdbc.url</td>
                        <td></td>
                        <td>Alias for <a href="../persistence_properties.html#ConnectionURL">datanucleus.ConnectionURL</a>.
                        Note that this is (also) used to define which type of datastore is being used</td>
                    </tr>
                    <tr>
                        <td>javax.persistence.jdbc.driver</td>
                        <td></td>
                        <td>Alias for <a href="../persistence_properties.html#ConnectionDriverName">datanucleus.ConnectionDriverName</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.jdbc.user</td>
                        <td></td>
                        <td>Alias for <a href="../persistence_properties.html#ConnectionUserName">datanucleus.ConnectionUserName</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.jdbc.password</td>
                        <td></td>
                        <td>Alias for <a href="../persistence_properties.html#ConnectionPassword">datanucleus.ConnectionPassword</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.query.timeout</td>
                        <td></td>
                        <td>Alias for <a href="../persistence_properties.html#QueryTimeout">datanucleus.query.timeout</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.sharedCache.mode</td>
                        <td></td>
                        <td>Alias for <a href="../persistence_properties.html#cache">datanucleus.cache.level2.mode</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.validation.mode</td>
                        <td></td>
                        <td>Alias for <a href="../persistence_properties.html#validation">datanucleus.validation.mode</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.validation.group.pre-persist</td>
                        <td></td>
                        <td>Alias for <a href="../persistence_properties.html#validation">datanucleus.validation.group.pre-persist</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.validation.group.pre-update</td>
                        <td></td>
                        <td>Alias for <a href="../persistence_properties.html#validation">datanucleus.validation.group.pre-update</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.validation.group.pre-remove</td>
                        <td></td>
                        <td>Alias for <a href="../persistence_properties.html#validation">datanucleus.validation.group.pre-remove</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.validation.factory</td>
                        <td></td>
                        <td>Alias for <a href="../persistence_properties.html#validation">datanucleus.validation.factory</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.schema-generation.database.action</td>
                        <td>create | drop | drop-and-create | <b>none</b></td>
                        <td>Alias for <a href="../persistence_properties.html#schema">datanucleus.generateSchema.database.mode</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.schema-generation.scripts.action</td>
                        <td>create | drop | drop-and-create | <b>none</b></td>
                        <td>Alias for <a href="../persistence_properties.html#schema">datanucleus.generateSchema.scripts.mode</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.schema-generation.scripts.create-target</td>
                        <td>{filename}</td>
                        <td>Alias for <a href="../persistence_properties.html#schema">datanucleus.generateSchema.scripts.create.target</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.schema-generation.scripts.drop-target</td>
                        <td>{filename}</td>
                        <td>Alias for <a href="../persistence_properties.html#schema">datanucleus.generateSchema.scripts.drop.target</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.schema-generation.scripts.create-script-source</td>
                        <td>{filename}</td>
                        <td>Alias for <a href="../persistence_properties.html#schema">datanucleus.generateSchema.scripts.create.source</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.schema-generation.scripts.drop-script-source</td>
                        <td>{filename}</td>
                        <td>Alias for <a href="../persistence_properties.html#schema">datanucleus.generateSchema.scripts.drop.source</a></td>
                    </tr>
                    <tr>
                        <td>javax.persistence.sql.load-script-source</td>
                        <td>{filename}</td>
                        <td>Alias for <a href="../persistence_properties.html#schema">datanucleus.generateSchema.scripts.load</a></td>
                    </tr>
                </table>
                <br/>
            </subsection>

            <subsection name="Extension DataNucleus Properties">
                <img src="../images/nucleus_extension.gif" border="0" alt=""/>
                <p>
                    DataNucleus provides many properties to extend the control that JPA gives you.
                    These can be used alongside the above standard JPA properties, but will only work with 
                    DataNucleus. Please consult the 
                    <a href="../persistence_properties.html">Persistence Properties Guide</a> for full details.
                    In addition we have the following properties explicitly for JPA.
                </p>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.jpa.addClassTransformer</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>
                            When running with JPA in a JavaEE environment if you wish to have your classes enhanced 
                            at runtime you can enable this by setting this property to <i>true</i>. 
                            The default is to bytecode enhance your classes before deployment.
                        </td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>false</b> | true</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.jpa.persistenceContextType</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>JPA defines two lifecycle options. JavaEE usage defaults to "transaction" where
                        objects are detached when a transaction is committed. JavaSE usage defaults to "extended"
                        where objects are detached when the EntityManager is closed. This property allows control</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td>transaction | extended</td>
                    </tr>
                </table>
                <br/>
                <table>
                    <tr>
                        <th colspan="2">
                            <b>datanucleus.jpa.txnMarkForRollbackOnException</b>
                        </th>
                    </tr>
                    <tr>
                        <td width="120">Description</td>
                        <td>JPA requires that any persistence exception should mark the current transaction for
                        rollback. This persistence property allows that inflexible behaviour to be turned off leaving
                        it to the user to decide when a transaction is needing to be rolled back.</td>
                    </tr>
                    <tr>
                        <td>Range of Values</td>
                        <td><b>true</b> | false</td>
                    </tr>
                </table>
                <br/>
            </subsection>
        </section>
    </body>
</document>