<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JPA Cascading Relations</title>
    </properties>

    <body>
        <section name="JPA : Cascading Fields">
            <p> When defining your objects to be persisted and the relationships between them, it is often required 
                to define dependencies between these related objects. When persisting an object should we also persist
                any related objects? What should happen to a related object when an object is deleted ? 
                Can the related object exist in its own right beyond the lifecycle of the other object, or should 
                it be deleted along with the other object ? 
                This behaviour can be defined with JPA and with DataNucleus. Lets take an example</p>
            <source>
@Entity
public class Owner
{
    @OneToOne
    private DrivingLicense license;

    @OneToMany(mappedBy="owner")
    private Collection cars;
    
    ...
}

@Entity
public class DrivingLicense
{
    private String serialNumber;
    
    ...
}

@Entity
public class Car
{
    private String registrationNumber;

    @ManyToOne
    private Owner owner;
    
    ...
}</source>
            <p>
                So we have an <b>Owner</b> of a collection of vintage <b>Car</b>'s, and the <b>Owner</b> has a 
                <b>DrivingLicense</b>. We want to define lifecycle dependencies to match the relationships that we 
                have between these objects. So in our example what we are going to do is
            </p>
            <ul>
                <li>When an object is persisted/updated its related objects are also persisted/updated.</li>
                <li>When an <b>Owner</b> object is deleted, its <b>DrivingLicense</b> is deleted too (since it
                    cant exist without the person!</li>
                <li>When an <b>Owner</b> object is deleted, the <b>Car</b>s continue to exist (since someone will
                    buy them)</li>
                <li>When a <b>Car</b> object is deleted, the <b>Owner</b> continues to exist (unless he/she dies
                    in the Car, but that will be handled by a different mechanism in our application).</li>
            </ul>
            <p>
                So we update our class to reflect this
            </p>
            <source>
@Entity
public class Owner
{
    @OneToOne(cascade=CascadeType.ALL)
    private DrivingLicense license;

    @OneToMany(mappedBy="owner", cascade={CascadeType.PERSIST, CascadeType.MERGE})
    private Collection cars;
    
    ...
}

@Entity
public class DrivingLicense
{
    private String serialNumber;
    
    ...
}

@Entity
public class Car
{
    private String registrationNumber;

    @ManyToOne(cascade={CascadeType.PERSIST, CascadeType.MERGE})
    private Owner owner;
    
    ...
}</source>
            <p>
                So we make use of the <i>cascade</i> attribute of the relation annotations. We could express this
                similarly in XML
            </p>
            <source><![CDATA[
<entity-mappings>
    <entity class="mydomain.Owner">
        <attributes>
            <one-to-many name="cars">
                <cascade>
                    <cascade-persist/>
                    <cascade-merge/>
                </cascade>
            </one-to-many>
            <one-to-one name="license">
                <cascade>
                    <cascade-all/>
                </cascade>
            </one-to-one>
            ...
        </attributes>
    </entity>

    <entity class="mydomain.DrivingLicense">
        ...
    </entity>

    <entity class="mydomain.Car">
        <attributes>
            <many-to-one name="owner">
                <cascade>
                    <cascade-persist/>
                    <cascade-merge/>
                </cascade>
            </many-to-one>
            ...
        </attributes>
    </entity>
</entity-mappings>]]></source>
            <br/>

            <subsection name="Orphans">
                <p>
                    When an element is removed from a collection, or when a 1-1 relation is nulled, sometimes it is
                    desirable to delete the other object. JPA2 defines a facility of removing "orphans" by specifying
                    metadata for a 1-1 or 1-N relation. Let's take an example. In the above relation between
                    <b>Owner</b> and <b>DrivingLicense</b> if we set the owners license field to null, this should
                    mean that the license is deleted. So we could change it to be
                </p>
            <source><![CDATA[
@Entity
public class Owner
{
    @OneToOne(cascade={CascadeType.PERSIST, CascadeType.MERGE}, orphanRemoval=true)
    private DrivingLicense license;

    ...
}

@Entity
public class DrivingLicense
{
    private String serialNumber;
    
    ...
}]]></source>
                <p>
                    So from now on, if we delete the <b>Owner</b> we delete the <b>DrivingLicense</b>, and if we set
                    the <i>license</i> field of <b>DrivingLicense</b> to null then we also delete the
                    <b>DrivingLicense</b>.
                </p>
            </subsection>
		</section>

    </body>
</document>