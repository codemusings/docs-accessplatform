<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JPA Relationships</title>
    </properties>

    <body>
        <section name="JPA : Managing Relationships">
            <p>
                The power of a Java persistence solution like DataNucleus is demonstrated when persisting relationships between objects.
                There are many types of relationships.
            </p>
            <ul>
                <li><a href="one_to_one.html">1-1 relationships</a> - this is where you have an object A relates to a second
                    object B. 
                    The relation can be <i>unidirectional</i> where A knows about B, but B doesnt know about A.
                    The relation can be <i>bidirectional</i> where A knows about B and B knows about A.</li>
                <li><a href="one_to_many_collection.html">1-N relationships</a> - this is where you have an object A that
                    has a collection of other objects of type B. 
                    The relation can be <i>unidirectional</i> where A knows about the objects B but the Bs dont know about A. 
                    The relation can be <i>bidirectional</i> where A knows about the objects B and the Bs know about A</li>
                <li><a href="many_to_one.html">N-1 relationships</a> - this is where you have an object B1 that relates
                    to an object A, and an object B2 that relates to A also etc.
                    The relation can be <i>unidirectional</i> where the A doesnt know about the Bs.
                    The relation can be <i>bidirectional</i> where the A has a collection of the Bs.
                    [i.e a 1-N relationship but from the point of view of the element]</li>
                <li><a href="many_to_many.html">M-N relationships</a> - this is where you have objects of type A that
                    have a collection of objects of type B and the objects of type B also have a collection of objects of type A.
                    The relation is always <i>bidirectional</i> by definition</li>
                <li><a href="compound_identity.html">Compound Identity relationships</a> when you have a relation and part of the
                    primary key of the related object is the other persistent object.</li>
            </ul>

            <subsection name="Assigning Relationships">
                <p>
                    When the relation is <i>unidirectional</i> you simply set the related field to refer to the other object.
                    For example we have classes A and B and the class A has a field of type B. So we set it like this
                </p>
                <source>
A a = new A();
B b = new B();
a.setB(b); // "a" knows about "b"</source>
                <p>
                    When the relation is <i>bidirectional</i> you <b>have to set both sides</b> of the relation.
                    For example, we have classes A and B and the class A has a collection of elements of type B, and B has a
                    field of type A. So we set it like this
                </p>
                <source>
A a = new A();
B b1 = new B();
a.addElement(b1); // "a" knows about "b1"
b1.setA(a); // "b1" knows about "a"</source>

                <table class="infoTable"><tr>
                    <td><img src="../../images/lightbulb.png" border="0"/></td>
                    <td><b>With a <i>bidirectional</i> relation you must set both sides of the relation</b></td>
                </tr></table>
                <br/>
            </subsection>

            <subsection name="Persisting Relationships - Reachability">
                <p>
                    To persist an object with JPA you call the <i>EntityManager</i> method <i>persist</i> (or <i>merge</i> if wanting to update a detached object).
                    The object passed in will be persisted. By default all related objects will <b>not</b> be persisted with that object. 
                    You can however change this by specifying the <i>cascade</i> PERSIST (and/or MERGE) property for that field. 
                    With this the related object(s) would also be persisted (or updated with any new values if they are already persistent).
                    This process is called <b>persistence-by-reachability</b>.
                    For example we have classes A and B and class A has a field of type B and this field has the <i>cascade</i> property PERSIST set.
                    To persist them we could do
                </p>
<source>
A a = new A();
B b = new B();
a.setB(b);
em.persist(a); // "a" and "b" are provisionally persistent</source>
                <p>
                    A further example where you don't have the <i>cascade</i> PERSIST set, but still want to persist both ends of a relation.
                </p>
<source>
A a = new A();
B b = new B();
a.setB(b);
em.persist(a); // "a" is provisionally persistent
em.persist(b); // "b" is provisionally persistent</source>
                <br/>
            </subsection>

            <subsection name="Managed Relationships">
                <p>
                    As we have mentioned above, it is for the user to set both sides of a bidirectional relation.
                    If they don't and object A knows about B, but B doesnt know about A then what is the persistence solution to do ? 
                    It doesn't know which side of the relation is correct. JPA doesn't define the behaviour for this situation.
					DataNucleus has two ways of handling this situation. 
					If you have the persistence property <b>datanucleus.manageRelationships</b> set to true then it will make sure that 
					the other side of the relation is set correctly, correcting obvious omissions, and giving exceptions for obvious errors.
                    If you set that persistence property to false then it will assume that your
                    objects have their bidirectional relationships consistent and will just persist what it finds.
                </p>
                <table class="infoTable"><tr>
                    <td><img src="../../images/lightbulb.png" border="0"/></td>
                    <td>
                        When performing management of relations there are some checks implemented to spot typical errors in user operations 
                        e.g add an element to a collection and then remove it (why?!).
                        You can disable these checks using <b>datanucleus.manageRelationshipsChecks</b>, set to false.
                    </td>
                </tr></table>
            </subsection>
        </section>

    </body>
</document>