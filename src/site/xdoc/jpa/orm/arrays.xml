<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JPA Arrays</title>
    </properties>

    <body>
        <section name="JPA : Array Fields">
            <p>
                JPA defines support the persistence of arrays but only arrays of byte[], Byte[], char[], Character[].
                DataNucleus supports all types of arrays, as follows
            </p>
            <ul>
                <li><a href="#singlecolumn">Single Column</a> - the array is byte-streamed into a single column in the table of the containing object.</li>
                <li><a href="#join_nonpc">JoinTable (Non-Entity)</a> - the array is stored in a "join" table, with a column in that table storing each element of the array</li>
                <li><a href="#join">JoinTable (Entity)</a> - the array is stored via a "join" table, with FK across to the element Entity.</li>
                <li><a href="#fk">ForeignKey (Entity)</a> - the array is stored via a FK in the element Entity.</li>
            </ul>
            <br/>

            <a name="singlecolumn"/>
            <subsection name="Single Column Arrays (serialised)">
                <p>
                    Let's suppose you have a class something like this
                </p>
                <img src="../../images/orm/array_serialised_class.gif" border="0" alt=""/>
                <p>
                    So we have an <b>Account</b> and it has a number of permissions, each expressed as a byte. We want to persist the
                    permissions in a single-column into the table of the account. We then define MetaData something like this
                </p>
<source><![CDATA[
<entity class="Account">
    <table name="ACCOUNT"/>
    <attributes>
        ...
        <basic name="permissions">
            <column name="PERMISSIONS"/>
            <lob/>
        </basic>
        ...
    </attributes>
</entity>]]></source>
                <p>
                    This results in a datastore schema as follows
                </p>
                <img src="../../images/orm/array_serialised_db.gif" border="0" alt=""/>
                <p>See also :-</p>
                <ul>
                    <li><a href="../metadata_xml.html#basic">MetaData reference for &lt;basic&gt; element</a></li>
                    <li><a href="../annotations.html#Basic">Annotations reference for @Basic</a></li>
                </ul>
                <br/>
            </subsection>

            <a name="join_nonpc"/>
            <subsection name="Arrays stored in join table">
                <p>
                    If you want an array of non-persistable objects be stored in a "join" table, you can follow this example.
                    We have an <b>Account</b> that stores a Collection of addresses. These addresses are simply Strings. We define the annotations like this
                </p>
<source><![CDATA[
@Entity
public class Account
{
    ...

    @ElementCollection
    @CollectionTable(name="ACCOUNT_ADDRESSES")
    String[] addresses;
}]]></source>
                <p>or using XML metadata</p>
<source><![CDATA[
<entity class="mydomain.Account">
    <attributes>
        ...
        <element-collection name="addresses">
            <collection-table name="ACCOUNT_ADDRESSES"/>
        </element-collection>
    </attributes>
</entity>]]></source>
                <p>
                    In the datastore the following is created
                </p>
                <img src="../../images/orm/relationship_1_N_primitive_collection_db.gif" border="0" alt=""/>
                <p>
                    Use @Column on the field/method to define the column details of the element in the join table.
                </p>
            </subsection>

            <a name="join"/>
            <subsection name="Arrays of Entity persisted into Join Tables">
                <p>
                    DataNucleus will support arrays persisted into a join table. Let's take the example of a class Account with an array of Permission objects, so we have
                </p>
                <img src="../../images/orm/array_jointable_class.gif" border="0" alt=""/>
                <p>
                    So an <b>Account</b> has an array of <b>Permission</b>s, and both of these objects are entities. We want to persist the relationship using a join table. We define 
                    the MetaData as follows
                </p>
<source><![CDATA[
@Entity
public class Account
{
    ...

    @OneToMany
    @JoinTable(name="ACCOUNT_PERMISSIONS", joinColumns={@Column(name="ACCOUNT_ID")}, inverseJoinColumns={@Column(name="PERMISSION_ID")})
    @OrderColumn(name="PERMISSION_ORDER_IDX")
    String[] addresses;
}

@Entity
public class Permission
{
    ...
}]]></source>
                <p>or using XML metadata</p>
<source><![CDATA[
<entity class="mydomain.Account">
    <attributes>
        ...
        <one-to-many name="permissions">
            <join-table name="ACCOUNT_PERMISSIONS">
                <join-column name="ACCOUNT_ID"/>
                <inverse-join-column name="PERMISSION_ID"/>
            </join-table>
            <order-column name="PERMISSION_ORDER_IDX"/>
        </one-to-many>
    </attributes>
</entity>
<entity name="Permission" table="PERMISSION">
</entity>]]></source>
                <p>
                    This results in a datastore schema as follows
                </p>
                <img src="../../images/orm/array_jointable_db.gif" border="0" alt=""/>
                <br/>
            </subsection>

            <a name="fk"/>
            <subsection name="Arrays of Entity persisted using Foreign-Keys">
                <p>
                    DataNucleus will support arrays persisted via a foreign-key in the element table. This is only 
                    applicable when the array is of a <i>persistable</i> type. Let's take the same example above. So we have
                </p>
                <img src="../../images/orm/array_foreignkey_class.gif" border="0" alt=""/>
                <p>
                    So an <b>Account</b> has an array of <b>Permission</b>s, and both of these objects are 
                    <i>persistable</i>. We want to persist the relationship using a foreign-key in the table 
                    for the Permission class. We define the MetaData as follows
                </p>
<source><![CDATA[
@Entity
public class Account
{
    ...

    @OneToMany
    @JoinColumn(name="ACCOUNT_ID")
    @OrderColumn(name="PERMISSION_ORDER_IDX")
    String[] addresses;
}

@Entity
public class Permission
{
    ...
}]]></source>
                <p>or using XML metadata</p>
<source><![CDATA[
<entity class="mydomain.Account">
    <attributes>
        ...
        <one-to-many name="permissions">
            <join-column name="ACCOUNT_ID"/>
            <order-column name="PERMISSION_ORDER_IDX"/>
        </one-to-many>
    </attributes>
</entity>
<entity name="Permission" table="PERMISSION">
</entity>]]></source>
                <p>
                    This results in a datastore schema as follows
                </p>
                <img src="../../images/orm/array_foreignkey_db.gif" border="0" alt=""/>
                <br/>
            </subsection>
        </section>

    </body>
</document>