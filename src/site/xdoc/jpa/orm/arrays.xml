<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JPA Arrays</title>
    </properties>

    <body>
        <section name="JPA : Array Fields">
            <p>
                JPA defines support the persistence of arrays but only arrays of byte[], Byte[], char[], Character[].
                DataNucleus supports the following persistence strategies for non-persistable arrays.
            </p>
            <ul>
                <li><a href="#singlecolumn">Single Column</a> - the array is byte-streamed into a single column in the table of the containing object.</li>
                <li><a href="#join_nonpc">Join Table</a> - the array is stored in a "join" table, with a column in that table storing each element of the array</li>
            </ul>
            <br/>

            <a name="singlecolumn"/>
            <subsection name="Single Column Arrays">
                <p>
                    Let's suppose you have a class something like this
                </p>
                <img src="../../images/orm/array_serialised_class.gif" border="0" alt=""/>
                <p>
                    So we have an <b>Account</b> and it has a number of permissions, each expressed as a byte. We want to persist the
                    permissions in a single-column into the table of the account (but we don't want them serialised). We then define 
                    MetaData something like this
                </p>
                <source><![CDATA[
<entity class="Account">
    <table name="ACCOUNT"/>
    <attributes>
        ...
        <basic name="permissions">
            <column name="PERMISSIONS"/>
            <lob/>
        </basic>
        ...
    </attributes>
</entity>]]></source>
                <p>
                    This results in a datastore schema as follows
                </p>
                <img src="../../images/orm/array_serialised_db.gif" border="0" alt=""/>
                <p>See also :-</p>
                <ul>
                    <li><a href="../metadata_xml.html#basic">MetaData reference for &lt;basic&gt; element</a></li>
                    <li><a href="../annotations.html#Basic">Annotations reference for @Basic</a></li>
                </ul>
                <br/>
            </subsection>

            <a name="join_nonpc"/>
            <subsection name="Arrays stored in join table">
            <p>
                If you want an array of non-persistable objects be stored in a "join" table, you can follow this example.
                If you want the element to be primitive or Object types then follow this section. For example, when you have a Collection of Strings. 
                This will be persisted in the same way as the "Join Table" examples above. A join table is created to hold the collection elements. 
                Let's take our example. We have an <b>Account</b> that stores a Collection of addresses. 
                These addresses are simply Strings. We define the annotations like this
            </p>
<source><![CDATA[
@Entity
public class Account
{
    ...

    @ElementCollection
    @CollectionTable(name="ACCOUNT_ADDRESSES")
    String[] addresses;
}]]></source>
            <p>or using XML metadata</p>
<source><![CDATA[
    <entity class="mydomain.Account">
        <attributes>
            ...
            <element-collection name="addresses">
                <collection-table name="ACCOUNT_ADDRESSES"/>
            </element-collection>
        </attributes>
    </entity>
]]></source>
            <p>
                In the datastore the following is created
            </p>
            <img src="../../images/orm/relationship_1_N_primitive_collection_db.gif" border="0" alt=""/>
            <p>
                Use @Column on the field/method to define the column details of the element in the join table.
            </p>
        </section>

        </section>

    </body>
</document>