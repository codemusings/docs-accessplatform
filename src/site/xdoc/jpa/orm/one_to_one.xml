<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JPA 1-1 Relationships</title>
    </properties>

    <body>
        <section name="JPA : 1-1 Relationships">
            <p>
                You have a 1-to-1 relationship when an object of a class has an associated object of another class (only 
                one associated object). It could also be between an object of a class and another object of the same class 
                (obviously). You can create the relationship in 2 ways depending on whether the 2 classes know about each 
                other (bidirectional), or whether only one of the classes knows about the other class (unidirectional). 
                These are described below.
            </p>
            <table class="infoTable"><tr>
                <td><img src="../../images/lightbulb.png" border="0"/></td>
                <td>
                    For RDBMS a 1-1 relation is stored as a foreign-key column(s).
                    For non-RDBMS it is stored as a String "column" storing the 'id' (possibly with the class-name included in the string) of the related object.
                </td>
            </tr></table>
            <br/>

            <a name="uni"/>
            <subsection name="Unidirectional">
                <p>
                    For this case you could have 2 classes, <b>User</b> and <b>Account</b>, as below.
                    <br/>
                    <img src="../../images/orm/relationship_1_1_uni_class.jpg" border="0" alt=""/>
                    <br/>
                    so the <b>Account</b> class knows about the <b>User</b> class, but not vice-versa. If you define the 
                    XML metadata for these classes as follows
                </p>
                <source><![CDATA[
<entity-mappings>
    <entity class="User">
        <table name="USER"/>
        <attributes>
            <id name="id">
                <column name="USER_ID"/>
            </id>
            ...
    </entity>

    <entity class="Account">
        <table name="ACCOUNT"/>
        <attributes>
            <id name="id">
                <column name="ACCOUNT_ID"/>
            </id>
            ...
            <one-to-one name="user">
                <join-column name="USER_ID"/>
            </one-to-one>
        </attributes>
    </entity>
</entity-mappings>]]></source>
                <p>
                    or alternatively using annotations
                </p>
                <source><![CDATA[
public class Account
{
    ...

    @OneToOne
    @JoinColumn(name="USER_ID")
    User user;
}

public class User
{
    ...
}]]></source>
                <p>
                    This will create 2 tables in the database, one for <b>User</b> (with name <i>USER</i>), and one for 
                    <b>Account</b> (with name <i>ACCOUNT</i> and a column <i>USER_ID</i>), as shown below.
                    <br/>
                    <img src="../../images/orm/relationship_1_1_uni_db.gif" border="0" alt=""/>
                    <br/>
                </p>
                <p>
                    Things to note :-
                </p>
                <ul>
                    <li><b>Account</b> has the object reference to <b>User</b> (and so is the "owner" of the relation) and
                        so its table holds the foreign-key</li>
                    <li>If you call <i>EntityManager.remove()</i> on the end of a 1-1 unidirectional relation without the 
                        relation and that object is related to another object, an exception will typically be thrown
                        (assuming the RDBMS supports foreign keys). To delete this record you should remove the other
                        objects association first.</li>
                </ul>
                <br/>
            </subsection>

            <a name="bi"/>
            <subsection name="Bidirectional">
                <p>
                    For this case you could have 2 classes, <b>User</b> and <b>Account</b> again, but this time as below. 
                    Here the <b>Account</b> class knows about the <b>User</b> class, and also vice-versa.
                </p>
                <img src="../../images/orm/relationship_1_1_bi_class.jpg" border="0" alt=""/>
                <br/>
                <p>
                    We create the 1-1 relationship with a single foreign-key. To do this you define the XML metadata as
                </p>
                <source><![CDATA[
<entity-mappings>
    <entity class="User">
        <table name="USER"/>
        <attributes>
            <id name="id">
                <column name="USER_ID"/>
            </id>
            ...
            <one-to-one name="account" mapped-by="user"/>
        </attributes>
    </entity>

    <entity class="Account">
        <table name="ACCOUNT"/>
        <attributes>
            <id name="id">
                <column name="ACCOUNT_ID"/>
            </id>
            ...
            <one-to-one name="user">
                <join-column name="USER_ID"/>
            </one-to-one>
        </attributes>
    </entity>
</entity-mappings>]]></source>
                <p>
                    or alternatively using annotations
                </p>
                <source><![CDATA[
public class Account
{
    ...

    @OneToOne
    @JoinColumn(name="USER_ID")
    User user;
}

public class User
{
    ...

    @OneToOne(mappedBy="user")
    Account account;

    ...
}]]></source>
                <table>
                    <tr>
                        <td>The difference is that we added <i>mapped-by</i> to the field of <b>User</b>
                        making it bidirectional (and putting the FK at the other side for RDBMS)</td>
                    </tr>
                </table>
                <p>
                    This will create 2 tables in the database, one for <b>User</b> (with name <i>USER</i>), 
                    and one for <b>Account</b> (with name <i>ACCOUNT</i>). For RDBMS it includes a <i>USER_ID</i>
                    column in the <i>ACCOUNT</i> table, like this
                </p>
                <img src="../../images/orm/relationship_1_1_bi_db_singlefk.gif" border="0" alt=""/><br/>
                <p>
                    For other types of datastore it will have a <i>USER_ID</i> column in the <i>ACCOUNT</i> table 
                    and a <i>ACCOUNT</i> column in the <i>USER</i> table.
                </p>
                <p>
                    Things to note :-
                </p>
                <ul>
                    <li>When forming the relation please make sure that <b>you set the relation at BOTH sides</b> since DataNucleus
					would have no way of knowing which end is correct if you only set one end.</li>
                </ul>
                <br/>
            </subsection>
        </section>

    </body>
</document>