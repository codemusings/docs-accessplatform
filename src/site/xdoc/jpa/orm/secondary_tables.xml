<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JPA Secondary Tables</title>
    </properties>

    <body>
        <section name="JPA : Secondary Tables">
            <table><tr><td>Applicable to RDBMS</td></tr></table>
            <p>
                The standard JPA persistence strategy is to persist an object of a class into its own table. In some 
                situations you may wish to map the class to a primary table as well as one or more secondary tables. 
                For example when you have a Java class that could have been split up into 2 separate classes yet, for 
                whatever reason, has been written as a single class, however you have a legacy datastore and you need to 
                map objects of this class into 2 tables. JPA allows persistence of fields of a class into <i>secondary</i>
                tables.
            </p>
            <p>
                The process for managing this situation is best demonstrated with an example. Let's suppose we have a class
                that represents a <b>Printer</b>. The <b>Printer</b> class contains within it various attributes of the
                toner cartridge. So we have
            </p>
            <source><![CDATA[
package com.mydomain.samples.secondarytable;

public class Printer
{
    long id;
    String make;
    String model;

    String tonerModel;
    int tonerLifetime;

    /**
     * Constructor.
     * @param make Make of printer (e.g Hewlett-Packard)
     * @param model Model of Printer (e.g LaserJet 1200L)
     * @param tonerModel Model of toner cartridge
     * @param tonerLifetime lifetime of toner (number of prints)
     */
    public Printer(String make, String model, String tonerModel, int tonerLifetime)
    {
        this.make = make;
        this.model = model;
        this.tonerModel = tonerModel;
        this.tonerLifetime = tonerLifetime;
    }

}]]></source>
            <p>
                Now we have a database schema that has 2 tables (PRINTER and PRINTER_TONER) in which to store objects of this class.
                So we need to tell DataNucleus to perform this mapping. So we define the MetaData for the <b>Printer</b> class like this
            </p>
            <source><![CDATA[
<entity class="Printer">
    <table name="PRINTER"/>
    <secondary-table name="PRINTER_TONER">
        <primary-key-join-column name="PRINTER_REFID"/>
    </secondary-table>

    <attributes>
        <id name="id">
            <column name="PRINTER_ID"/>
        </id>
        <basic name="make">
            <column name="MAKE" length="40"/>
        </basic>
        <basic name="model">
            <column name="MODEL" length="100"/>
        </basic>
        <basic name="tonerModel">
            <column name="MODEL" table="PRINTER_TONER"/>
        </basic>
        <basic name="tonerLifetime">
            <column name="LIFETIME" table="PRINTER_TONER"/>
        </basic>
    </attributes>
</entity>]]></source>
            <p>
                So here we have defined that objects of the <b>Printer</b> class will be stored in the primary table 
                PRINTER. In addition we have defined that some fields are stored in the table PRINTER_TONER.
            </p>
            <ul>
                <li>We declare the "secondary-table"(s) that we will be using at the start of the definition.</li>
                <li>We define <i>tonerModel</i> and <i>tonerLifetime</i> to use columns in the table PRINTER_TONER. 
                    This uses the "table" attribute of &lt;column&gt;</li>
                <li>Whilst defining the secondary table(s) we will be using, we also define the join column to be
                    called "PRINTER_REFID".</li>
            </ul>
            <p>
                This results in the following database tables :-
            </p>
            <img src="../../images/orm/secondarytables_db.gif" border="0" alt=""/><br/>
            <p>
                So we now have our primary and secondary database tables. The primary key of the PRINTER_TONER table serves
                as a foreign key to the primary class. Whenever we persist a <b>Printer</b> object a row will be inserted 
                into <u>both</u> of these tables.
            </p>

            <p>See also :-</p>
            <ul>
                <li><a href="../metadata_xml.html#secondary-table">MetaData reference for &lt;secondary-table&gt; element</a></li>
                <li><a href="../metadata_xml.html#column">MetaData reference for &lt;column&gt; element</a></li>
                <li><a href="../annotations.html#SecondaryTable">Annotations reference for @SecondaryTable</a></li>
                <li><a href="../annotations.html#Column">Annotations reference for @Column</a></li>
            </ul>
        </section>

    </body>
</document>