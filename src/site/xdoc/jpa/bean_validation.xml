<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JPA Bean Validation</title>
    </properties>

    <body>
        <section name="JPA : Bean Validation">
            <p>
                The <a href="http://beanvalidation.org/">Bean Validation API (JSR0303/JSR0349)</a> can be hooked up with JPA so that you have validation
                of an objects values prior to persistence, update and deletion. To do this
            </p>
            <ul>
                <li>Put the <b>javax.validation</b> "validation-api" jar in your CLASSPATH, along with the
                    Bean Validation implementation jar of your choice</li>
                <li>Set the persistence property <i>javax.persistence.validation.mode</i> to one
                    of <i>auto</i> (default), <i>none</i>, or <i>callback</i></li>
                <li>Optionally set the persistence property(s)
                    <i>javax.persistence.validation.group.pre-persist</i>,
                    <i>javax.persistence.validation.group.pre-update</i>,
                    <i>javax.persistence.validation.group.pre-remove</i> to fine tune the behaviour (the default is
                    to run validation on pre-persist and pre-update if you don't specify these).</li>
                <li>Use JPA as you normally would for persisting objects</li>
            </ul>
            <p>
                To give a simple example of what you can do with the Bean Validation API
            </p>
            <source><![CDATA[
@Entity
public class Person 
{
    @Id
    @NotNull
    private Long id;

    @NotNull
    @Size(min = 3, max = 80)
    private String name;

    ...
}]]></source>
            <p>
                So we are validating that instances of the <i>Person</i> class will have an "id" that is not null
                and that the "name" field is not null and between 3 and 80 characters. If it doesn't validate then
                at persist/update an exception will be thrown.
                You can add bean validation annotations to classes marked as @Entity, @MappedSuperclass or
                @Embeddable.
            </p>
            <p>
                A further use of the Bean Validation annotations @Size(max=...) and @NotNull is that if you specify these
                then you have no need to specify the equivalent JPA attributes since they equate to the same thing.
            </p>
        </section>
    </body>
</document>