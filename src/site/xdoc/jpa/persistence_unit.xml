<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Persistence Unit</title>
    </properties>
    <body>
        <section name="JPA : Persistence Unit">
            <p>
                When designing an application you can usually nicely separate your persistable objects into independent
                groupings that can be treated separately, perhaps within a different DAO object, if using DAOs. 
                JPA introduces the idea of a <i>persistence-unit</i>. A <i>persistence-unit</i> provides a 
                convenient way of specifying a set of metadata files, and classes, and jars that contain all classes to 
                be persisted in a grouping. The persistence-unit is named, and the name is used for identifying it.
                Consequently this name can then be used when defining what classes are to be enhanced, for example.
            </p>
            <p>
                To define a <i>persistence-unit</i> you first need to add a file <b>persistence.xml</b> to the 
                <i>META-INF/</i> directory of your application jar. This file will be used 
                to define your <i>persistence-unit</i>s. Let's show an example
            </p>
            <source><![CDATA[
<?xml version="1.0" encoding="UTF-8" ?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence 
        http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd" version="2.0">

    <!-- Online Store -->
    <persistence-unit name="OnlineStore">
        <provider>org.datanucleus.api.jpa.PersistenceProviderImpl</provider>
        <class>org.datanucleus.samples.metadata.store.Product</class>
        <class>org.datanucleus.samples.metadata.store.Book</class>
        <class>org.datanucleus.samples.metadata.store.CompactDisc</class>
        <class>org.datanucleus.samples.metadata.store.Customer</class>
        <class>org.datanucleus.samples.metadata.store.Supplier</class>
        <exclude-unlisted-classes/>
        <properties>
            <property name="javax.persistence.jdbc.url" value="jdbc:h2:datanucleus"/>
            <property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
            <property name="javax.persistence.jdbc.user" value="sa"/>
            <property name="javax.persistence.jdbc.password" value=""/>
        </properties>
    </persistence-unit>

    <!-- Accounting -->
    <persistence-unit name="Accounting">
        <provider>org.datanucleus.api.jpa.PersistenceProviderImpl</provider>
        <mapping-file>com/datanucleus/samples/metadata/accounts/orm.xml</mapping-file>
        <properties>
            <property name="javax.persistence.jdbc.url" value="jdbc:h2:datanucleus"/>
            <property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
            <property name="javax.persistence.jdbc.user" value="sa"/>
            <property name="javax.persistence.jdbc.password" value=""/>
        </properties>
    </persistence-unit>

</persistence>]]></source>
            <p>
                In this example we have defined 2 <i>persistence-unit</i>s. The first has the name "OnlineStore" and 
                contains 5 classes (annotated). The second has the name "Accounting" and contains a metadata file called 
                "orm.xml" in a particular package (which will define the classes being part of that unit). This means
                that once we have defined this we can reference these <i>persistence-unit</i>s in our persistence 
                operations. You can find the XSD for <i>persistence.xml</i>
                <a href="http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">here</a>.
            </p>
            <p>There are several sub-elements of this <i>persistence.xml</i> file</p>
            <ul>
                <li><b>provider</b> - the JPA persistence provider to be used.
                    The JPA persistence "provider" for DataNucleus is 
                    <b>org.datanucleus.api.jpa.PersistenceProviderImpl</b></li>
                <li><b>jta-data-source</b> - JNDI name for JTA connections</li>
                <li><b>non-jta-data-source</b> - JNDI name for non-JTA connections.
                    Note that if using a JTA datasource as the primary connection, you ought to provide a
                    <i>non-jta-data-source</i> also since any schema generation and/or sequence handling will
                    need to use that.
                </li>
                <li><b>jar-file</b> - name of a JAR file to scan for annotated classes to include in this
                    persistence-unit.</li>
                <li><b>mapping-file</b> - name of an XML "mapping" file containing persistence information
                to be included in this persistence-unit.</li>
                <li><b>class</b> - name of an annotated class to include in this persistence-unit</li>
                <li><b>properties</b> - properties defining the persistence factory to be used.
                    Please refer to 
                    <a href="../persistence_properties.html">Persistence Properties Guide</a> 
                    for details</li>
            </ul>
            <br/>

            <subsection name="Use with JPA">
                <p>
                    JPA requires the "persistence-unit" name to be specified at runtime when creating the
                    <i>EntityManagerFactory</i>, like this
                </p>
<source>EntityManagerFactory emf = Persistence.createEntityManagerFactory("MyPersistenceUnit");</source>
                <br/>
            </subsection>

            <subsection name="Restricting to specific classes">
                <p>
                    If you want to just have specific classes in the <i>persistence-unit</i> you can specify
                    them using the <b>class</b> element, and then add <b>exclude-unlisted-classes</b>, like this
                </p>
                <source><![CDATA[
    <persistence-unit name="Store">
        <provider>org.datanucleus.api.jpa.PersistenceProviderImpl</provider>
        <class>org.datanucleus.samples.metadata.store.Product</class>
        <class>org.datanucleus.samples.metadata.store.Book</class>
        <class>org.datanucleus.samples.metadata.store.CompactDisc</class>
        <exclude-unlisted-classes/>
        <properties>
            <property name="javax.persistence.jdbc.url" value="jdbc:h2:datanucleus"/>
            <property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
            <property name="javax.persistence.jdbc.user" value="sa"/>
            <property name="javax.persistence.jdbc.password" value=""/>
        </properties>
    </persistence-unit>]]></source>
                <br/>
                <p>
                    If you don't include the <b>exclude-unlisted-classes</b> then DataNucleus will search
                    for annotated classes starting at the <i>root</i> of the <i>persistence-unit</i> (the
                    root directory in the CLASSPATH that contains the "META-INF/persistence.xml" file).
                </p>
            </subsection>

            <a name="dynamic"/>
            <subsection name="Dynamically generated Persistence-Unit">
                <img src="../images/nucleus_extension.gif" border="0" alt=""/>
                <p>
                    DataNucleus allows an extension to JPA to dynamically create persistence-units at runtime.
                    Use the following code sample as a guide. Obviously any classes defined in the persistence-unit
                    need to have been enhanced.
                </p>
                <source><![CDATA[
import org.datanucleus.metadata.PersistenceUnitMetaData;
import org.datanucleus.api.jpa.JPAEntityManagerFactory;
 
PersistenceUnitMetaData pumd = new PersistenceUnitMetaData("dynamic-unit", "RESOURCE_LOCAL", null);
pumd.addClassName("org.datanucleus.test.A");
pumd.setExcludeUnlistedClasses();
pumd.addProperty("javax.persistence.jdbc.url", "jdbc:h2:mem:nucleus");
pumd.addProperty("javax.persistence.jdbc.driver", "org.h2.Driver");
pumd.addProperty("javax.persistence.jdbc.user", "sa");
pumd.addProperty("javax.persistence.jdbc.password", "");
pumd.addProperty("datanucleus.schema.autoCreateAll", "true");

EntityManagerFactory emf = new JPAEntityManagerFactory(pumd, null);]]></source>
                <p>
                    It should be noted that if you call <i>pumd.toString();</i> then this returns the text that
                    would have been found in a <i>persistence.xml</i> file.
                </p>
            </subsection>
        </section>
    </body>
</document>