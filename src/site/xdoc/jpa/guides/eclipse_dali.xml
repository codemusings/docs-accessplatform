<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>DataNucleus - Eclipse Dali Tutorial</title>
    </properties>

    <body>
        <section name="DataNucleus, Eclipse Dali, JPA">
            <p>
                The Eclipse Dali project provides a powerful development environment for Java Persistence. 
                DataNucleus does not stay behind, and permits the powerful DataNucleus persistence engine to be combined with 
                Eclipse Dali for development.
            </p>
            <p>
                In this (5 mins) tutorial, we use Eclipse Dali to reverse engineer a database table (ACCOUNT) and 
                generate a persistent class (Account). The DataNucleus Eclipse plug-in is used to enhance the persistent 
                class before running the application.
            </p>
            <subsection name="Requirements">
                <p>
                    For using the IDE, you must install Eclipse 3.2, 
                    <a href="http://www.eclipse.org/dali/">Eclipse Dali</a> and the DataNucleus Eclipse plug-in. 
                    For using the DataNucleus runtime, see <a href="../annotations.html">JPA annotations</a>.
                </p>
            </subsection>

            <subsection name="Demo">
                <center>
                <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="800" height="620"
                     codebase="http://active.macromedia.com/flash5/cabs/swflash.cab#version=5,0,0,0">
                <param name="movie" value="dali.swf"/>
                <param name="play" value="true"/>
                <param name="loop" value="false"/>
                <param name="quality" value="low"/>
                <!--embed src="dali.swf" width="800" height="620" quality="low" loop="false"
                     TYPE="application/x-shockwave-flash"
                     PLUGINSPAGE="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash"/-->
                </object>
                </center>
                <br/>
            </subsection>

            <subsection name="Source Code">
                <p>
                    The source code for <i>org.jpox.demo.Account</i> class.
                </p>
<source>
package org.jpox.demo;

import java.io.Serializable;
import java.math.BigDecimal;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Account implements Serializable {
    @Id
    @Column(name="ACCOUNT_ID")
    private BigDecimal accountId;

    private String username;

    private BigDecimal enabled;

    private static final long serialVersionUID = 1L;

    public Account() {
        super();
    }

    public BigDecimal getAccountId() {
        return this.accountId;
    }

    public void setAccountId(BigDecimal accountId) {
        this.accountId = accountId;
    }

    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public BigDecimal getEnabled() {
        return this.enabled;
    }

    public void setEnabled(BigDecimal enabled) {
        this.enabled = enabled;
    }
}</source>
                <p>
                    The source code for <i>org.jpox.demo.Main</i> class.
                </p>
<source>
package org.jpox.demo;

import java.math.BigDecimal;
import java.util.Random;

import javax.jdo.JDOHelper;
import javax.jdo.PersistenceManager;
import javax.jdo.PersistenceManagerFactory;

public class Main
{
    public static void main(String[] args)
    {
        java.io.InputStream is = Main.class.getClassLoader().getResourceAsStream("PMFProperties.properties");
        PersistenceManagerFactory pmf = JDOHelper.getPersistenceManagerFactory(is);
        PersistenceManager pm = pmf.getPersistenceManager();
        try
        {
            pm.currentTransaction().begin();
            Account acc = new Account();
            BigDecimal dec = new BigDecimal(new Random().nextInt());
            acc.setAccountId(dec);
            acc.setEnabled(BigDecimal.ONE);
            pm.makePersistent(acc);
            pm.currentTransaction().commit();
            System.out.println("Account "+dec+" was persisted.");
        }
        finally
        {
            if( pm.currentTransaction().isActive() )
            {
                pm.currentTransaction().rollback();
            }
            pm.close();
        }
    }
}</source>                
                <p>
                    The source code for <i>PMFProperties.properties</i> file.
                </p>
<source>
javax.jdo.PersistenceManagerFactoryClass=org.jpox.PersistenceManagerFactoryImpl
javax.jdo.option.ConnectionDriverName=oracle.jdbc.driver.OracleDriver
javax.jdo.option.ConnectionURL=jdbc:oracle:thin:@127.0.0.1:1521:XE
javax.jdo.option.ConnectionUserName=test
javax.jdo.option.ConnectionPassword=password

org.jpox.autoCreateSchema=true
org.jpox.metadata.validate=false
org.jpox.autoStartMechanism=XML
org.jpox.autoCreateTables=true
org.jpox.validateTables=false
org.jpox.autoCreateColumns=true
org.jpox.autoCreateConstraints=true
org.jpox.validateConstraints=false
org.jpox.autoCreateSchema=true
org.jpox.rdbms.stringDefaultLength=255</source>
                <p>
                    The database schema model.
                </p>
<source>
CREATE TABLE Account (
        ACCOUNT_ID NUMBER NOT NULL,
        username VARCHAR2(255),
        enabled NUMBER(1 , 0) NOT NULL
    );

ALTER TABLE Account ADD CONSTRAINT Account_PK PRIMARY KEY (ACCOUNT_ID);</source>                
            </subsection>

		</section>
	</body>
</document>