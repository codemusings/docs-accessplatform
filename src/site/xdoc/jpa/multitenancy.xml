<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JPA Multitenancy</title>
    </properties>

    <body>
        <section name="JPA : Multitenancy">
            <p>
                On occasion you need to share a data model with other user-groups or other applications and where the model is persisted to the same structure of datastore. 
                There are three ways of handling this with DataNucleus.
            </p>
            <ul>
                <li><b>Separate Database per Tenant</b> - have a different database per user-group/application.</li>
                <li><b>Separate Schema per Tenant</b> - as the first option, except use different schemas.</li>
                <li><b>Same Database/Schema but with a Discriminator in affected Table(s)</b> - this is described below.</li>
            </ul>

            <subsection name="Multitenancy via Discriminator in Table">
                <table class="datastoreTable"><tr><td>Applicable to RDBMS, HBase, MongoDB, Neo4j, Cassandra</td></tr></table>
                <p>
                    If you specify the persistence property <i>datanucleus.tenantId</i> as an identifier
                    for your user-group/application then DataNucleus will know that it needs to provide
                    a tenancy discriminator to all primary tables of persisted classes. This discriminator
                    is then used to separate the data of the different user-groups.
                </p>
                <p>
                    By default this will add a column <b>TENANT_ID</b> to each primary table, of String-based type.
                    You can control this by specifying extension metadata for each persistable class
                </p>
<source><![CDATA[
<class name="MyClass">
     <extension vendor-name="datanucleus" key="multitenancy-column-name" value="TENANT"/>
     <extension vendor-name="datanucleus" key="multitenancy-column-length" value="24"/>
     ...
</class>]]></source>
                <p>or using annotations</p>
<source><![CDATA[
@Entity
@MultiTenant(column="TENANT", columnLength=24)
public class MyClass
{
    ...
}]]></source>
                <p>
                    In all subsequent use of DataNucleus, any "insert" to the primary "table"(s) will also include the TENANT column value. 
                    Additionally any query will apply a WHERE clause restricting to a particular value of TENANT column.
                </p>
                <p>
                    If you have enabled multi-tenancy as above but want to disable multitenancy on a class, just specify the following metadata
                </p>
<source><![CDATA[
<class name="MyClass">
     <extension vendor-name="datanucleus" key="multitenancy-disable" value="true"/>
     ...
</class>]]></source>
                <p>or using annotations</p>
<source><![CDATA[
@PersistenceCapable
@MultiTenant(disable=true)
public class MyClass
{
    ...
}]]></source>
                <p>
                    Note that the <b>Tenant ID</b> can be set in one of three ways.
                </p>
                <ul>
                    <li>Per EMF : just set the persistence property <i>datanucleus.tenantId</i> when you start up the EMF and all access for this EMF will use this Tenant ID</li>
                    <li>Per EM : set the persistence property <i>datanucleus.tenantId</i> when you start up the PMF as the default Tenant ID and set a property on any EntityManager
                        that you want a different Tenant ID specifying for. Like this
<source><![CDATA[
EntityManager em = emf.createEntityManager();
... // All operations will apply to default tenant specified in persistence property for EMF
em.close();

EntityManager em1 = emf.createEntityManager();
em1.setProperty("datanucleus.tenantId", "John");
... // All operations will apply to tenant "John"
em1.close();

EntityManager em2 = emf.createEntityManager();
em2.setProperty("datanucleus.tenantId", "Chris");
... // All operations will apply to tenant "Chris"
em2.close();]]></source>
                    </li>
                    <li>Per datastore access : When creating the EMF set the persistence property <i>datanucleus.tenantProvider</i> and set it to an instance of
                        <i>org.datanucleus.store.schema.MultiTenancyProvider</i>.
                        <source><![CDATA[
public interface MultiTenancyProvider
{
    String getTenantId(ExecutionContext ec);
}
                        ]]></source>
                        Now the programmer can set a different Tenant ID for each datastore access, maybe based on some session variable for example?.
                    </li>
                </ul>
            </subsection>

        </section>
    </body>
</document>