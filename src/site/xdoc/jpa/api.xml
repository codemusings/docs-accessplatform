<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JPA API</title>
    </properties>

    <body>
        <section name="JPA : API">
            <p>
                JPA defines an interface (or API) to persist normal Java objects (or POJO's in some peoples terminology) to an <b>RDBMS datastore</b>. 
                The JPA API itself is provided by the <i>persistence-api</i> (or <i>javax.persistence</i>) JAR.
                DataNucleus provides an implementation of JPA, embodied in the <i>datanucleus-api-jpa</i> JAR.
                While DataNucleus allows you to use JPA against any of its supported datastores <b>if you are intent on using JPA for persistence 
                to a non-RDBMS datastore we highly recommend that you think deeply about that decision, and consider <a href="../jdo/api.html">JDO</a> 
                instead</b> since the design of JPA and in particular JPQL force assumptions to be made in how the persistence/query process operates.
            </p>
            <p><b>Note that this version of DataNucleus requires the JPA 2.1 API</b></p>
            <p>
                JPA uses a definition of how the users Java objects map to the chosen datastore structure. This mapping 
                can be provided by way of XML metadata, or alternatively by having Java annotations in the code.
                The whole point of having a <i>standard</i> mapping and API is that users can, in principle, swap between
                implementations of JPA without changing their code.
                Make sure you have <i>datanucleus-api-jpa.jar</i> in your CLASSPATH for this API.
                The process of mapping a class can be split into the following areas
            </p>
            <ul>
                <li>The first thing to do is to 
                        <a href="class_mapping.html">mark the classes that are to be persisted</a> as such</li>
                <li>JPA allows fields/properties to be defined for persistence, and you can control 
                        <a href="fields_properties.html">which of these are persisted</a>, and how they are persisted.</li>
                <li>Since JPA is oriented to RDBMS datastores only you now need to define the 
                        <a href="orm/index.html">Object-Relational Mapping (ORM)</a></li>
            </ul>
            <p>
                Note that with DataNucleus, you can map your classes using 
                <a href="../jdo/metadata.html">JDO MetaData</a> (<a href="../jdo/metadata_xml.html">XML</a>/<a href="../jdo/annotations.html">Annotations</a>) 
                OR using
                <a href="../jpa/metadata.html">JPA MetaData</a> (<a href="../jpa/metadata_xml.html">XML</a>/<a href="../jpa/annotations.html">Annotations</a>)
                and still use the JPA API with these classes.
            </p>
            <p>
                At runtime the JPA code can be split into several sections.
            </p>
            <ul>
                <li>You firstly need to <a href="emf.html">create an EntityManagerFactory</a> to connect to a datastore</li>
                <li>You then need to <a href="em.html">create an EntityManager</a> to provide the interface to 
                    persisting/accessing objects</li>
                <li>Controlling the <a href="transactions.html">transaction</a></li>
                <li>Accessing persisted object via <a href="query.html">queries</a>, using <a href="jpql.html">JPQL</a>,
                    or <a href="native_query.html">Native (SQL, CQL etc)</a></li>
            </ul>
            <p>
                If in doubt about how things fit together, please make use of the <a href="samples/tutorial_rdbms.html">JPA Tutorial</a>
            </p>
            <p>
                If you just want to get the JPA API javadocs, then you can access those
                <a href="http://docs.oracle.com/javaee/7/api/javax/persistence/package-summary.html" target="_blank">here</a>
            </p>
            <br/>

            <subsection name="JPA References">
                <ul>
                    <li><a href="http://jcp.org/aboutJava/communityprocess/final/jsr338/index.html" target="_blank">JPA 2.1 Specification</a></li>
                    <li><a href="http://www.datanucleus.org/javadocs/javax.persistence/2.1/" target="_blank">JPA 2.1 Javadocs</a></li>
                    <li><a href="http://java.net/projects/jpa-spec/lists" target="_blank">JPA Group mailing lists</a></li>
                    <li><a href="http://db.apache.org/jdo/jdo_v_jpa.html" target="_blank">ORM comparison : JDO .v. JPA</a></li>
                </ul>
            </subsection>
        </section>
    </body>
</document>