<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JPA API</title>
    </properties>

    <body>
        <section name="JPA : Caching">
            <p>
                Caching is an essential mechanism in providing efficient usage of resources in many systems.
                Caching allows objects to be retained and returned rapidly without having to make an extra call to 
                the datastore. JPA defines caching at 2 levels, with the second level as optional (some JPA providers
                don't see the need to provide this out of the box, but DataNucleus does).
                The 2 levels of caching available are
            </p>
            <ul>
                <li><a href="em.html#level1_cache">Level 1 Cache</a> - represents the caching of instances within an EntityManager</li>
                <li><a href="#level2">Level 2 Cache</a> - represents the caching of instances within an EntityManagerFactory (across multiple EntityManager's)</li>
            </ul>
            <p>
                You can think of a cache as a Map, with values referred to by keys. 
                In the case of JPA, the key is the object identity (identity is unique in JPA).
            </p>
            <br/>

            <a name="level2"/>
            <subsection name="Level 2 Cache">
                <p>
                    By default the <b>Level 2 Cache</b> is enabled.
                    The user can configure the Level 2 (L2) Cache if they so wish; by use of the persistence 
                    property <b>datanucleus.cache.level2.type</b>. You set this to "type" of cache required.
                    With the L2 Cache you currently have the following options.
                </p>
                <ul>
                    <li><b>none</b> - turn OFF Level 2 caching.</li>
                    <li><b>weak</b> - use the internal (weak reference based) L2 cache. Provides support for 
                        the JPA2 interface of being able to put objects into the cache, and evict them when 
                        required. This option does not support distributed caching, solely running within the 
                        JVM of the client application. Weak references are held to non pinned objects.</li>
                    <li><b>soft</b> - use the internal (soft reference based) L2 cache. Provides support for 
                        the JPA2 interface of being able to put objects into the cache, and evict them when 
                        required. This option does not support distributed caching, solely running within the 
                        JVM of the client application. Soft references are held to non pinned objects.</li>
                    <li><a href="#javax.cache">javax.cache</a> - a simple wrapper to standard javax.cache caching product(s). 
                        Provides basic support for adding items to the cache and retrieval from the cache. Doesn't support pinning and unpinning.</li>
                    <li><a href="#ehcache">EHCache</a> - a simple wrapper to EHCache's caching product. 
                        Provides basic support for adding items to the cache and retrieval from the cache. Doesn't support pinning and unpinning.</li>
                    <li><a href="#ehcache">EHCacheClassBased</a> - similar to the EHCache option but class-based.</li>
                    <li><a href="#oscache">OSCache</a> - a simple wrapper to OSCache's caching product. 
                        Provides basic support for adding items to the cache and retrieval from the cache. Doesn't support pinning and unpinning.</li>
                    <li><a href="#swarmcache">SwarmCache</a> - a simple wrapper to SwarmCache's caching product. 
                        Provides basic support for adding items to the cache and retrieval from the cache. Doesn't support pinning and unpinning.</li>
                    <li><a href="#coherence">Oracle Coherence</a> - a simple wrapper to Oracle's 
                        Coherence caching product. Provides basic support for adding items to the cache and retrieval 
                        from the cache. Doesn't support pinning and unpinning. Oracle's caches support distributed 
                        caching, so you could, in principle, use DataNucleus in a distributed environment with 
                        this option.</li>
                    <li><a href="#memcached">spymemcached</a> - a simple wrapper to Spymemcached java client for 
                        memcached caching product. Provides basic support for adding items to the cache and retrieval 
                        from the cache. Doesn't support pinning and unpinning.</li>
                    <li><a href="#memcached">xmemcached</a> - a simple wrapper to Xmemcached java client for 
                        memcached caching product. Provides basic support for adding items to the cache and retrieval 
                        from the cache. Doesn't support pinning and unpinning.</li>
                    <li><a href="#cacheonix">cacheonix</a> - a simple wrapper to the Cacheonix distributed
                        caching software. Provides basic support for adding items to the cache and retrieval 
                        from the cache. Doesn't support pinning and unpinning.</li>
                </ul>
                <p>
                    The weak, soft and javax.cache caches are available in the datanucleus-core plugin.
                    The EHCache, OSCache, SwarmCache, Coherence, Cacheonix, and Memcache caches are available in the <a href="../../../plugins/cache.html">datanucleus-cache</a> plugin.
                </p>
                <p>
                    In addition you can control the <i>mode</i> of operation of the L2 cache. You do this using the
                    persistence property <b>datanucleus.cache.level2.mode</b> (or <b>javax.persistence.sharedCache.mode</b>.
                    The default is <i>UNSPECIFIED</i> which means that DataNucleus will cache all objects of entities unless 
                    the entity is explicitly marked as not cacheable. The other options are
                    <i>NONE</i> (don't cache ever), <i>ALL</i> (cache all entities regardless of annotations),
                    <i>ENABLE_SELECTIVE</i> (cache entities explicitly marked as cacheable), or
                    <i>DISABLE_SELECTIVE</i> (cache entities unless explicitly marked as not cacheable - i.e same
                    as our default).
                </p>
                <p>
                    Objects are placed in the L2 cache when you commit() the transaction of a EntityManager. 
                    This means that you only have datastore-persisted objects in that cache. 
                    Also, if an object is deleted during a transaction then at commit it will be removed from the L2 cache if it is present.
                </p>
                <p>
                    <a href="../extensions/level2_cache.html"><img src="../images/nucleus_plugin.gif" border="0" alt=""/></a>
                    The Level 2 cache is a DataNucleus plugin point allowing you to provide your own cache
                    where you require it. Use the examples of the EHCache, Coherence caches etc as reference.
                </p>
				<br/>
            </subsection>
            
            <subsection name="Controlling the Level 2 Cache">
                <p>
                    The majority of times when using a JPA-enabled system you will not have to take control over 
                    any aspect of the caching other than specification of whether to use a <b>Level 2</b> Cache or 
                    not. With JPA and DataNucleus you have the ability to control which objects remain in the cache. 
                    This is available via a method on the <i>EntityManagerFactory</i>.
                </p>
                <source>
EntityManagerFactory emf = Persistence.createEntityManagerFactory(persUnitName, props);
Cache cache = emf.getCache();</source>
				<p>
				    The <i>Cache</i> interface provides methods to control the retention of objects in the cache. 
                    You have 2 types of methods
				</p>
                <ul>
                    <li><b>contains</b> - check if an object of a type with a particular identity is in the cache</li>
                    <li><b>evict</b> - used to remove objects from the Level 2 Cache</li>
                </ul>
                
                <p>
                    You can also control which classes are put into a Level 2 cache.
                    So with the following JPA2 annotation @Cacheable, no objects of type <i>MyClass</i>
                    will be put in the L2 cache.
                </p>
                <source><![CDATA[
@Cacheable(false)
@Entity
public class MyClass
{
    ...
}]]></source>
                <p>
                    If you want to control which fields of an object are put in the Level 2 cache you can do this
                    using an extension annotation on the field.
                    This setting is only required for fields that are relationships to other persistable 
                    objects. Like this
                </p>
                <source><![CDATA[
public class MyClass
{
    ...

    Collection values;

    @Extension(vendorName="datanucleus", key="cacheable", value="false")
    Collection elements;
}]]></source>
                <p>
                    So in this example we will cache "values" but not "elements".
                    If a field is <i>cacheable</i> then
                </p>
                <ul>
                    <li>If it is a persistable object, the "identity" of the related object will be stored
                            in the Level 2 cache for this field of this object</li>
                    <li>If it is a Collection of persistable elements, the "identity" of the elements will be 
                            stored in the Level 2 cache for this field of this object</li>
                    <li>If it is a Map of persistable keys/values, the "identity" of the keys/values will be 
                            stored in the Level 2 cache for this field of this object</li>
                </ul>
                <p>
                    When pulling an object in from the Level 2 cache and it has a reference to another object
                    Access Platform uses the "identity" to find that object in the Level 1 or Level 2 caches
                    to re-relate the objects.
                </p>
                <br/>
                <br/>
            </subsection>

            <a name="javax.cache"/>
            <subsection name="L2 Cache using javax.cache">
                <p>
                    DataNucleus provides a simple wrapper to 
                    <a href="http://jcp.org/en/jsr/detail?id=107" target="_blank">javax.cache's caches</a>. 
                    To enable this you should set the persistence properties
                </p>
                <source>
datanucleus.cache.level2.type=javax.cache
datanucleus.cache.level2.cacheName={cache name}
datanucleus.cache.level2.timeout={expiration time in millis - optional}</source>
                <br/>
            </subsection>

            <a name="coherence"/>
            <subsection name="L2 Cache using Oracle Coherence">
                <p>
                    DataNucleus provides a simple wrapper to 
                    <a href="http://www.oracle.com/technology/products/coherence/index.html" target="_blank">Oracle's Coherence caches</a>.
                    This currently takes the <i>NamedCache</i> interface in Coherence and instantiates a cache of a 
                    user provided name. To enabled this you should set the following persistence properties
                </p>
                <source>
datanucleus.cache.level2.type=coherence
datanucleus.cache.level2.cacheName={coherence cache name}</source>
                <p>
                    The <i>Coherence cache name</i> is the name that you would normally put into a call to 
                    CacheFactory.getCache(name). You have the benefits of Coherence's distributed/serialized 
                    caching. If you require more control over the Coherence cache whilst using it with 
                    DataNucleus, you can just access the cache directly via
                </p>
                <source>
DataStoreCache cache = pmf.getDataStoreCache();
NamedCache tangosolCache = ((TangosolLevel2Cache)cache).getTangosolCache();</source>
                <br/>
            </subsection>

            <a name="ehcache"/>
            <subsection name="L2 Cache using EHCache">
                <p>
                    DataNucleus provides a simple wrapper to 
                    <a href="http://www.sf.net/projects/ehcache" target="_blank">EHCache's caches</a>. 
                    To enable this you should set the persistence properties
                </p>
                <source>
datanucleus.cache.level2.type=ehcache
datanucleus.cache.level2.cacheName={cache name}
datanucleus.cache.level2.configurationFile={EHCache configuration file (in classpath)}</source>
                <p>
                    The EHCache plugin also provides an alternative L2 Cache that is class-based. 
                    To use this you would need to replace "ehcache" above with "ehcacheclassbased".
                </p>
                <br/>
            </subsection>

            <a name="oscache"/>
            <subsection name="L2 Cache using OSCache">
                <p>
                    DataNucleus provides a simple wrapper to 
                    <a href="http://www.opensymphony.com/oscache/" target="_blank">OSCache's caches</a>. 
                    To enable this you should set the persistence properties
                </p>
                <source>
datanucleus.cache.level2.type=oscache
datanucleus.cache.level2.cacheName={cache name}</source>
                <br/>
            </subsection>

            <a name="swarmcache"/>
            <subsection name="L2 Cache using SwarmCache">
                <p>
                    DataNucleus provides a simple wrapper to 
                    <a href="http://swarmcache.sourceforge.net/" target="_blank">SwarmCache's caches</a>. 
                    To enable this you should set the persistence properties
                </p>
                <source>
datanucleus.cache.level2.type=swarmcache
datanucleus.cache.level2.cacheName={cache name}</source>
                <br/>
            </subsection>

            <a name="memcached"/>
            <subsection name="L2 Cache using Spymemcached/Xmemcached">
                <p>
                    DataNucleus provides a simple wrapper to 
                    <a href="http://code.google.com/p/spymemcached/">Spymemcached caches</a> and
                    <a href="http://code.google.com/p/xmemcached/">Xmemcached caches</a>. . 
                    To enable this you should set the persistence properties
                </p>
                <source>
datanucleus.cache.level2.type=spymemcached         [or "xmemcached"]
datanucleus.cache.level2.cacheName={prefix for keys, to avoid clashes with other memcached objects}
datanucleus.cache.level2.memcached.servers=...
datanucleus.cache.level2.memcached.expireSeconds=...</source>
                <p>
                    <b>datanucleus.cache.level2.memcached.servers</b> is a space separated list of memcached 
                    hosts/ports, e.g. host:port host2:port.
                    <b>datanucleus.cache.level2.memcached.expireSeconds</b> if not set or set to 0 then no expire
                </p>
                <br/>
            </subsection>

            <a name="cacheonix"/>
            <subsection name="L2 Cache using Cacheonix">
                <p>
                    DataNucleus provides a simple wrapper to 
                    <a href="http://www.cacheonix.com/" target="_blank">Cacheonix</a>. 
                    To enable this you should set the persistence properties
                </p>
                <source>
datanucleus.cache.level2.type=cacheonix
datanucleus.cache.level2.cacheName={cache name}</source>
                <p>
                    Note that you can optionally also specify
                </p>
                <source>
datanucleus.cache.level2.timeout={timeout-in-millis (default=60)}
datanucleus.cache.level2.configurationFile={Cacheonix configuration file (in classpath)}</source>
                <p>
                    and define a <i>cacheonix-config.xml</i> like
                </p>
                <source><![CDATA[
<?xml version="1.0"?>
<cacheonix>
   <local>
      <!-- One cache per class being stored. -->
      <localCache name="mydomain.MyClass">
         <store>
            <lru maxElements="1000" maxBytes="1mb"/>
            <expiration timeToLive="60s"/>
         </store>
      </localCache>

      <!-- Fallback cache for classes indeterminable from their id. -->
      <localCache name="datanucleus">
         <store>
            <lru maxElements="1000" maxBytes="10mb"/>
            <expiration timeToLive="60s"/>
         </store>
      </localCache>

      <localCache name="default" template="true">
         <store>
            <lru maxElements="10" maxBytes="10mb"/>
            <overflowToDisk maxOverflowBytes="1mb"/>
            <expiration timeToLive="1s"/>
         </store>
      </localCache>
   </local>

</cacheonix>]]></source>
                <br/>
            </subsection>

        </section>
    </body>
</document>