<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Datastore Identity</title>
    </properties>

    <body>
        <section name="JPA : Datastore Identity">
            <img src="../images/nucleus_extension.gif" border="0" alt=""/>
            <p>
                While JPA defines support for <a href="application_identity.html">application identity</a> only
                DataNucleus also provides support for <b>datastore identity</b>. With <b>datastore identity</b> 
                you are leaving the assignment of id's to DataNucleus and your class will <b>not</b> have a field 
                for this identity - it will be added to the datastore representation by DataNucleus. 
                It is, to all extents and purposes a <i>surrogate key</i> that will have its own column in the 
                datastore. To specify that a class is to use <b>datastore identity</b> with JPA, you define the
                following annotations on your class
            </p>
            <source><![CDATA[
@Entity
@org.datanucleus.api.jpa.annotations.DatastoreIdentity
public class MyClass
{
    ...
}]]></source>
            <p>
                <i>Please note that since the JPA XML metadata is poorly designed it is not possible to specify
                datastore identity using XML, you have to use the annotations.</i>
            </p>
            <table>
                <tr>
                    <td>
                        <b>When you have an inheritance hierarchy, you should specify the identity type in the 
                        <u>base</u> class for the inheritance tree. This is then used for all persistent classes 
                        in the tree.</b>
                    </td>
                </tr>
            </table>
            <br/>

            <subsection name="Generating identities">
                <p>
                    By choosing <b>datastore identity</b> you are handing the process of identity generation to the 
                    DataNucleus. This does not mean that you haven't got any control over how it does this. 
                    JPA defines many ways of generating these identities and DataNucleus supports all of these and 
                    provides some more of its own besides.
                </p>
                <p>
                    Defining which one to use is a simple matter of adding a MetaData element to your classes 
                    definition, like this
                </p>
                <source><![CDATA[
@Entity
@org.datanucleus.api.jpa.annotations.DatastoreIdentity(generationType=GenerationType.TABLE)
public class MyClass
{
    ...
}]]></source>
                <p>See also :-</p>
                <ul>
                    <li><a href="value_generation.html">Identity Generation Guide</a> - strategies for generating ids</li>
                    <li><a href="annotations.html#DatastoreIdentity">Annotations reference for @DatastoreIdentity</a></li>
                </ul>
                <br/>
            </subsection>

            <subsection name="Accessing the Identity">
                <p>
                    When using <b>datastore identity</b>, the class has no associated field so you can't just 
                    access a field of the class to see its identity - if you need a field to be able to access the 
                    identity then you should be using<a href="application_identity.html">application identity</a>. 
                    There are, however, ways to get the identity for the datastore identity case, if you have the
                    object.
                </p>
                <source>Object id = JDOHelper.getObjectId(obj);</source>
                <p>
                    You should be aware however that the "identity" is in a complicated form, and is not available as 
                    a simple integer value for example. Again, if you want an identity of that form then you should use 
                    <a href="application_identity.html">application identity</a>
                </p>
                <br/>
            </subsection>

            <subsection name="DataNucleus Implementation">
                <p>
                    When implementing <b>datastore identity</b> DataNucleus provides a public class that represents
                    this identity. If you call <i>JDOHelper.getObjectId(...)</i> for a class using 
                    datastore identity you will be passed an object which, in the case of DataNucleus will be of 
                    type <i>org.datanucleus.identity.OIDImpl</i>. If you were to call "toString()" on this object 
                    you would get something like 
                </p>
                <source>
1[OID]mydomain.myclass
This is made up of :-
    1 = identity number of this object
    class-name</source>
                <p>
                    <img src="../images/nucleus_plugin.gif" border="0" alt=""/>
                    DataNucleus allows you the luxury of being able to 
                    <a href="http://www.datanucleus.org/documentation/extensions/datastoreidentity.html">provide your own datastore identity class</a> 
                    so you can have whatever formatting you want for identities.
                </p>
                <br/>
            </subsection>

            <subsection name="Accessing objects by Identity">
                <p>
                    To access the "id" assigned when using "datastore identity" you can call
                </p>
<source>
import org.datanucleus.api.jpa.NucleusJPAHelper;

Object idKey = NucleusJPAHelper.getDatastoreIdForEntity(obj);
</source>
                <p>
                    From this you can use the "find" method to retrieve the object
                </p>
                <source>Object obj = em.find(MyClass.class, idKey);</source>
                <br/>
            </subsection>
        </section>
    </body>
</document>