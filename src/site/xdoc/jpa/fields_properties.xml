<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Fields or Properties</title>
    </properties>

    <body>
        <section name="JPA : Persistent Fields or Properties">
            <p>
                Now that we have defined the class as persistable we need to define how to persist the different
                fields/properties that are to be persisted. 
                Please note that JPA <b>cannot persist static or final fields</b>.
                There are two distinct modes of persistence definition; the most common uses <b>fields</b>, 
                whereas an alternative uses <b>properties</b>.
            </p>

            <subsection name="Persistent Fields">
                <p>
                    The most common form of persistence is where you have a <b>field</b> in a class and want to 
                    persist it to the datastore. With this mode of operation DataNucleus will persist the values 
                    stored in the fields into the datastore, and will set the values of the fields when extracting 
                    it from the datastore.
                </p>
                <b>
                    Requirement : you have a field in the class. This can be public, protected, private or package
                    access, but cannot be static or final.
                </b>
                <p>
                    An example of how to define the persistence of a field is shown below
                </p>
                <source>
@Entity
public class MyClass
{
    @Basic
    Date birthday;

    @Transient
    String someOtherField;
}</source>
                <p>
                    So, using annotations, we have marked this class as persistent, and the field <i>birthday</i> 
                    also as persistent, whereas field <i>someOtherField</i> is not persisted.
                    Using XML MetaData we would have done
                </p>
                <source><![CDATA[
<entity name="mydomain.MyClass">
    <attributes>
        <basic name="birthday"/>
        <transient name="someOtherField"/>
    </attributes>
</entity>]]></source>
                <p>
                    Please note that the field Java type defines whether it is, by default, persistable.
                    Look at the <a href="types.html">Types Guide</a> and if the type has a tick in the column
                    "Persistent?" then you can omit the "basic" specification.
                </p>
                <br/>
            </subsection>

            <subsection name="Persistent Properties">
                <p>
                    A second mode of operation is where you have Java Bean-style getter/setter for a <b>property</b>. 
                    In this situation you want to persist the output from <i>getXXX</i> to the datastore, and use the 
                    <i>setXXX</i> to load up the value into the object when extracting it from the datastore.
                </p>
                <b>
                    Requirement : you have a property in the class with Java Bean getter/setter methods. These methods
                    can be public, protected, private or package access, but cannot be static. The class must have BOTH
                    getter AND setter methods.
                </b>
                <p>
                    An example of how to define the persistence of a property is shown below
                </p>
                <source>
@Entity
public class MyClass
{
    @Basic
    Date getBirthday()
    {
        ...
    }

    void setBirthday(Date date)
    {
        ...
    }
}</source>
                <p>
                    So, using annotations, we have marked this class as persistent, and the getter is marked as
                    persistent. By default a property is non-persistent, so we have no need in specifying the
                    <i>someOtherField</i> as transient. Using XML MetaData we would have done
                </p>
<source><![CDATA[
<entity name="mydomain.MyClass">
    <attributes>
        <basic name="birthday"/>
    </attributes>
</entity>]]></source>
                <br/>
            </subsection>

            <a name="columnposition"/>
            <subsection name="Field/Property positioning">
                <img src="../images/nucleus_extension.gif" alt=""/>
                <p>
                    With some datastores (notably spreadsheets) it is desirable to be able to specify the relative
                    position of a column. The default (for DataNucleus) is just to put them in ascending alphabetical order.
                    JPA doesn't allow configuration of this, but DataNucleus provides the following vendor extension.
                    It is currently only possible using (DataNucleus) annotations
                </p>
                <source>
@Entity
@Table(name="People")
public class Person
{
    @Id
    @ColumnPosition(0)
    long personNum;

    @ColumnPosition(1)
    String firstName;

    @ColumnPosition(2)
    String lastName;
}</source>
                <br/>
            </subsection>

            <a name="readonly"/>
            <subsection name="Making a field/property read-only">
                <img src="../images/nucleus_extension.gif" border="0" alt=""/>
                <p>
                    If you want to make a member read-only you can do it like this.
                </p>
<source><![CDATA[
<entity name="mydomain.MyClass">
    <attributes>
        <basic name="myField">
            <extension key="insertable" value="false"/>
            <extension key="updateable" value="false"/>
        </basic>
    </attributes>
</entity>]]></source>
                <p>
                    and with Annotations
                </p>
<source><![CDATA[
import org.datanucleus.api.jdo.annotations.ReadOnly;

@Entity
public class MyClass
{
    @ReadOnly
    String myField;

}]]></source>
                <br/>
            </subsection>
            
        </section>
    </body>
</document>