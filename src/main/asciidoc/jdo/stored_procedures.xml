<?xml version="1.0" encoding="iso-8859-1"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>JDO Queries - Stored Procedures</title>
    </properties>

    <body>
        <section name="JDO : Stored Procedures">
            <p>
                JDO doesn't include explicit support for stored procedures. However DataNucleus provides two options for allowing use of stored procedures with RDBMS datastores.
            </p>
            <br/>

            <a name="storedproc_api"/>
            <subsection name="Using DataNucleus Stored Procedure API">
                <img src="../images/nucleus_extension.gif" border="0" alt=""/>
                <p>
                    Obviously JDO allows potentially any "query language" to be invoked using its API. With DataNucleus and RDBMS datastores we can do the following
                </p>
<source><![CDATA[
Query q = pm.newQuery("STOREDPROC", "MY_TEST_SP_1");
]]></source>
                <p>
                    Now on its own this will simply invoke the define stored procedure (<i>MY_TEST_SP_1</i>) in the datastore. Obviously we want more control than that, 
                    so this is where you use DataNucleus specifics. Let's start by accessing the internal stored procedure query
                </p>
<source><![CDATA[
import org.datanucleus.api.jdo.JDOQuery;
import org.datanucleus.store.rdbms.query.StoredProcedureQuery;
...
StoredProcedureQuery spq = (StoredProcedureQuery)((JDOQuery)q).getInternalQuery());
]]></source>
                <p>
                    Now we can control things like parameters, and what is returned from the stored procedure query.
                    Let's start by registering any parameters (IN, OUT, or INOUT) for our stored proc. In our example we use named parameters, but you can also use positional parameters.
                </p>
<source><![CDATA[
spq.registerParameter("PARAM1", String.class, StoredProcQueryParameterMode.IN);
spq.registerParameter("PARAM2", Integer.class, StoredProcQueryParameterMode.OUT);
]]></source>
                <p>
                    Simple execution is like this (where you omit the paramValueMap if you have no input parameters).
                </p>
<source><![CDATA[
boolean hasResultSet = spq.executeWithMap(paramValueMap);
]]></source>
                <p>
                    That method returns whether a result set is returned from the stored procedure (some return results, but some return an update count, and/or output parameters). 
                    If we are expecting a result set we then do
                </p>
<source><![CDATA[
List results = (List)spq.getNextResults();
]]></source>
                <p>
                    and if we are expecting output parameter values then we get them using the API too. Note again that you can also access via position rather than name.
                </p>
<source><![CDATA[
Object val = spq.getOutputParameterValue("PARAM2");
]]></source>
                <p>
                    That summarises our stored procedure API. It also allows things like multiple result sets for a stored procedure, all using the <i>StoredProcedureQuery</i> API.
                </p>
                <br/>
            </subsection>

            <a name="sql"/>
            <subsection name="Using JDO SQL Query API to invoke stored procedures">
                <p>
                    In JDO all SQL queries must begin "SELECT ...", and consequently it is not possible to execute stored procedures by default. 
                    In DataNucleus we have an extension that allows this to be overridden, to call stored procedures. 
                    <b>Note that this is strongly discouraged now that we provide the mechanism above</b>.
                    To enable this you should pass the property <b>datanucleus.query.sql.allowAll</b> as true when creating the PersistenceManagerFactory. 
                    Thereafter you can invoke your stored procedures like this
                </p>
<source><![CDATA[
Query q = pm.newQuery("javax.jdo.query.SQL", "EXECUTE sp_who");
((org.datanucleus.api.jdo.JDOQuery)q).getInternalQuery().setType(org.datanucleus.store.query.Query.SELECT);
]]></source>
                <p>
                    Where "sp_who" is the stored procedure being invoked. 
                    The syntax of calling a stored procedure differs across RDBMS, some require "CALL ..." and some "EXECUTE ..."; Go consult your manual.
                    Clearly the same rules will apply regarding the results of the stored procedure and mapping them to any result class. 
                </p>
                <br/>
            </subsection>

        </section>
    </body>
</document>